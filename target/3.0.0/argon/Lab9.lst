
c:/Users/Vikash/Downloads/Lab9/target/3.0.0/argon/Lab9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006170  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da190  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e4f8  000da194  0001e4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000028c  2003e564  2003e564  0002e564  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000da200  000da200  0002a200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da228  000da228  0002a228  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0023881e  00000000  00000000  0002a22c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001ff63  00000000  00000000  00262a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000431f1  00000000  00000000  002829ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003388  00000000  00000000  002c5b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a668  00000000  00000000  002c8f26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004583e  00000000  00000000  002d358e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00054a19  00000000  00000000  00318dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00130f77  00000000  00000000  0036d7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000098c0  00000000  00000000  0049e75c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fda5 	bl	d8b80 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fdad 	bl	d8b9c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e4f8 	.word	0x2003e4f8
   d404c:	000da194 	.word	0x000da194
   d4050:	2003e564 	.word	0x2003e564
   d4054:	2003e564 	.word	0x2003e564
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 f88f 	bl	d7184 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000da16c 	.word	0x000da16c
   d4080:	000da190 	.word	0x000da190

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bc22 	b.w	d48cc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd89 	bl	d4ba0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 b839 	b.w	d7108 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bce1 	b.w	d6a5c <malloc>

000d409a <_Znaj>:
   d409a:	f002 bcdf 	b.w	d6a5c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bce5 	b.w	d6a6c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fc2a 	bl	d6904 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d65e5 	.word	0x000d65e5

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN10BlynkParam3addEPKc.part.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d40c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40ca:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d40cc:	4608      	mov	r0, r1
   d40ce:	9101      	str	r1, [sp, #4]
   d40d0:	f004 fd9a 	bl	d8c08 <strlen>
    if (len + l > buff_size)
   d40d4:	6863      	ldr	r3, [r4, #4]
   d40d6:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d40d8:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d40da:	18e8      	adds	r0, r5, r3
   d40dc:	4290      	cmp	r0, r2
   d40de:	d808      	bhi.n	d40f2 <_ZN10BlynkParam3addEPKc.part.0+0x2a>
    memcpy(buff+len, b, l);
   d40e0:	6820      	ldr	r0, [r4, #0]
   d40e2:	9901      	ldr	r1, [sp, #4]
   d40e4:	462a      	mov	r2, r5
   d40e6:	4418      	add	r0, r3
   d40e8:	f004 fd4a 	bl	d8b80 <memcpy>
    len += l;
   d40ec:	6860      	ldr	r0, [r4, #4]
   d40ee:	4428      	add	r0, r5
   d40f0:	6060      	str	r0, [r4, #4]
}
   d40f2:	b003      	add	sp, #12
   d40f4:	bd30      	pop	{r4, r5, pc}
	...

000d40f8 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d40f8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40fa:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40fc:	4b0a      	ldr	r3, [pc, #40]	; (d4128 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d40fe:	6003      	str	r3, [r0, #0]
   d4100:	4605      	mov	r5, r0
   d4102:	b17c      	cbz	r4, d4124 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4104:	6863      	ldr	r3, [r4, #4]
   d4106:	3b01      	subs	r3, #1
   d4108:	6063      	str	r3, [r4, #4]
   d410a:	b95b      	cbnz	r3, d4124 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d410c:	6823      	ldr	r3, [r4, #0]
   d410e:	4620      	mov	r0, r4
   d4110:	689b      	ldr	r3, [r3, #8]
   d4112:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4114:	68a3      	ldr	r3, [r4, #8]
   d4116:	3b01      	subs	r3, #1
   d4118:	60a3      	str	r3, [r4, #8]
   d411a:	b91b      	cbnz	r3, d4124 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d411c:	6823      	ldr	r3, [r4, #0]
   d411e:	4620      	mov	r0, r4
   d4120:	68db      	ldr	r3, [r3, #12]
   d4122:	4798      	blx	r3
   d4124:	4628      	mov	r0, r5
   d4126:	bd38      	pop	{r3, r4, r5, pc}
   d4128:	000d9eb8 	.word	0x000d9eb8

000d412c <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d412c:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d412e:	f002 fa61 	bl	d65f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4132:	4b03      	ldr	r3, [pc, #12]	; (d4140 <_ZN10CloudClass7processEv+0x14>)
   d4134:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d4136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d413a:	f002 bc7f 	b.w	d6a3c <spark_process>
   d413e:	bf00      	nop
   d4140:	2003e7d4 	.word	0x2003e7d4

000d4144 <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4144:	6803      	ldr	r3, [r0, #0]
   d4146:	b12b      	cbz	r3, d4154 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d4148:	6842      	ldr	r2, [r0, #4]
   d414a:	4293      	cmp	r3, r2
   d414c:	d202      	bcs.n	d4154 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d414e:	4618      	mov	r0, r3
   d4150:	f004 bd00 	b.w	d8b54 <atoi>
   d4154:	2000      	movs	r0, #0
   d4156:	4770      	bx	lr

000d4158 <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d4158:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d415a:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d415c:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d415e:	b145      	cbz	r5, d4172 <_ZN10BlynkParam8iteratorppEv+0x1a>
   d4160:	6843      	ldr	r3, [r0, #4]
   d4162:	429d      	cmp	r5, r3
   d4164:	d205      	bcs.n	d4172 <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d4166:	4628      	mov	r0, r5
   d4168:	f004 fd4e 	bl	d8c08 <strlen>
   d416c:	3001      	adds	r0, #1
   d416e:	4405      	add	r5, r0
   d4170:	6025      	str	r5, [r4, #0]
        }
   d4172:	4620      	mov	r0, r4
   d4174:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4178 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d4178:	b538      	push	{r3, r4, r5, lr}
   d417a:	4604      	mov	r4, r0
   d417c:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d417e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d4182:	6825      	ldr	r5, [r4, #0]
   d4184:	4a04      	ldr	r2, [pc, #16]	; (d4198 <_ZN10BlynkParam3addEi+0x20>)
   d4186:	1a09      	subs	r1, r1, r0
   d4188:	4428      	add	r0, r5
   d418a:	f002 fc77 	bl	d6a7c <snprintf>
   d418e:	6863      	ldr	r3, [r4, #4]
   d4190:	3001      	adds	r0, #1
   d4192:	4403      	add	r3, r0
   d4194:	6063      	str	r3, [r4, #4]
    }
   d4196:	bd38      	pop	{r3, r4, r5, pc}
   d4198:	000d8d5c 	.word	0x000d8d5c

000d419c <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d419c:	b538      	push	{r3, r4, r5, lr}
   d419e:	4604      	mov	r4, r0
   d41a0:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d41a2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d41a6:	6825      	ldr	r5, [r4, #0]
   d41a8:	4a04      	ldr	r2, [pc, #16]	; (d41bc <_ZN10BlynkParam3addEl+0x20>)
   d41aa:	1a09      	subs	r1, r1, r0
   d41ac:	4428      	add	r0, r5
   d41ae:	f002 fc65 	bl	d6a7c <snprintf>
   d41b2:	6863      	ldr	r3, [r4, #4]
   d41b4:	3001      	adds	r0, #1
   d41b6:	4403      	add	r3, r0
   d41b8:	6063      	str	r3, [r4, #4]
    }
   d41ba:	bd38      	pop	{r3, r4, r5, pc}
   d41bc:	000d8d5f 	.word	0x000d8d5f

000d41c0 <_ZN5Print7printlnItLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   d41c0:	b538      	push	{r3, r4, r5, lr}
   d41c2:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d41c4:	b94a      	cbnz	r2, d41da <_ZN5Print7printlnItLi0EEEjT_i+0x1a>
        return write(n);
   d41c6:	6802      	ldr	r2, [r0, #0]
   d41c8:	b2c9      	uxtb	r1, r1
   d41ca:	6892      	ldr	r2, [r2, #8]
   d41cc:	4790      	blx	r2
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d41ce:	4604      	mov	r4, r0
        n += println();
   d41d0:	4628      	mov	r0, r5
   d41d2:	f002 fdf0 	bl	d6db6 <_ZN5Print7printlnEv>
    }
   d41d6:	4420      	add	r0, r4
   d41d8:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
   d41da:	b2d2      	uxtb	r2, r2
   d41dc:	f002 fe01 	bl	d6de2 <_ZN5Print11printNumberEmh>
   d41e0:	e7f5      	b.n	d41ce <_ZN5Print7printlnItLi0EEEjT_i+0xe>

000d41e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d41e2:	b508      	push	{r3, lr}
        state = CONNECTING;
   d41e4:	2300      	movs	r3, #0
   d41e6:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d41e8:	6800      	ldr	r0, [r0, #0]
   d41ea:	f003 fc21 	bl	d7a30 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d41ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d41f2:	f002 b981 	b.w	d64f8 <BlynkNoOpCbk>
	...

000d41f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d41f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d41fc:	eb01 0902 	add.w	r9, r1, r2
   d4200:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d4202:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4204:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d4208:	4680      	mov	r8, r0
   d420a:	460d      	mov	r5, r1
   d420c:	4616      	mov	r6, r2
    if (it >= param.end())
   d420e:	f080 8092 	bcs.w	d4336 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d4212:	a805      	add	r0, sp, #20
   d4214:	880f      	ldrh	r7, [r1, #0]
   d4216:	f7ff ff9f 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
   d421a:	6803      	ldr	r3, [r0, #0]
   d421c:	4599      	cmp	r9, r3
   d421e:	f240 808a 	bls.w	d4336 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4222:	a805      	add	r0, sp, #20
   d4224:	f7ff ff8e 	bl	d4144 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d4228:	f247 2376 	movw	r3, #29302	; 0x7276
   d422c:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d422e:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   d4230:	f000 80a9 	beq.w	d4386 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   d4234:	d827      	bhi.n	d4286 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d4236:	f247 2361 	movw	r3, #29281	; 0x7261
   d423a:	429f      	cmp	r7, r3
   d423c:	d07e      	beq.n	d433c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   d423e:	f247 2364 	movw	r3, #29284	; 0x7264
   d4242:	429f      	cmp	r7, r3
   d4244:	d042      	beq.n	d42cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   d4246:	f646 5370 	movw	r3, #28016	; 0x6d70
   d424a:	429f      	cmp	r7, r3
   d424c:	d128      	bne.n	d42a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d424e:	4e63      	ldr	r6, [pc, #396]	; (d43dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d4250:	4f63      	ldr	r7, [pc, #396]	; (d43e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   d4252:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d43f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   d4256:	9b05      	ldr	r3, [sp, #20]
   d4258:	4599      	cmp	r9, r3
   d425a:	d96c      	bls.n	d4336 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d425c:	a805      	add	r0, sp, #20
   d425e:	f7ff ff71 	bl	d4144 <_ZNK10BlynkParam8iterator5asIntEv>
   d4262:	b2c4      	uxtb	r4, r0
            ++it;
   d4264:	a805      	add	r0, sp, #20
   d4266:	f7ff ff77 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d426a:	9d05      	ldr	r5, [sp, #20]
   d426c:	4631      	mov	r1, r6
   d426e:	4628      	mov	r0, r5
   d4270:	f004 fcc0 	bl	d8bf4 <strcmp>
   d4274:	4601      	mov	r1, r0
   d4276:	b9e0      	cbnz	r0, d42b2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   d4278:	4620      	mov	r0, r4
   d427a:	f003 fde1 	bl	d7e40 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d427e:	a805      	add	r0, sp, #20
   d4280:	f7ff ff6a 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d4284:	e7e7      	b.n	d4256 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   d4286:	f247 7364 	movw	r3, #30564	; 0x7764
   d428a:	429f      	cmp	r7, r3
   d428c:	d03f      	beq.n	d430e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d428e:	f247 7376 	movw	r3, #30582	; 0x7776
   d4292:	429f      	cmp	r7, r3
   d4294:	f000 8087 	beq.w	d43a6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   d4298:	f247 7361 	movw	r3, #30561	; 0x7761
   d429c:	429f      	cmp	r7, r3
   d429e:	d05f      	beq.n	d4360 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d42a0:	2300      	movs	r3, #0
   d42a2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d42a6:	2202      	movs	r2, #2
   d42a8:	9200      	str	r2, [sp, #0]
   d42aa:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d42ae:	4619      	mov	r1, r3
   d42b0:	e029      	b.n	d4306 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d42b2:	4639      	mov	r1, r7
   d42b4:	4628      	mov	r0, r5
   d42b6:	f004 fc9d 	bl	d8bf4 <strcmp>
   d42ba:	b128      	cbz	r0, d42c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   d42bc:	4641      	mov	r1, r8
   d42be:	4628      	mov	r0, r5
   d42c0:	f004 fc98 	bl	d8bf4 <strcmp>
   d42c4:	2800      	cmp	r0, #0
   d42c6:	d1da      	bne.n	d427e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   d42c8:	2101      	movs	r1, #1
   d42ca:	e7d5      	b.n	d4278 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d42cc:	ab0a      	add	r3, sp, #40	; 0x28
   d42ce:	4945      	ldr	r1, [pc, #276]	; (d43e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   d42d0:	9307      	str	r3, [sp, #28]
   d42d2:	a807      	add	r0, sp, #28
   d42d4:	2310      	movs	r3, #16
   d42d6:	2500      	movs	r5, #0
   d42d8:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d42dc:	f7ff fef4 	bl	d40c8 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d42e0:	a807      	add	r0, sp, #28
   d42e2:	4621      	mov	r1, r4
   d42e4:	f7ff ff48 	bl	d4178 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d42e8:	4620      	mov	r0, r4
   d42ea:	f003 fdd3 	bl	d7e94 <digitalRead>
        rsp.add(analogRead(pin));
   d42ee:	4601      	mov	r1, r0
   d42f0:	a807      	add	r0, sp, #28
   d42f2:	f7ff ff53 	bl	d419c <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d42f6:	9b08      	ldr	r3, [sp, #32]
   d42f8:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d42fc:	3b01      	subs	r3, #1
   d42fe:	9300      	str	r3, [sp, #0]
   d4300:	9b07      	ldr	r3, [sp, #28]
   d4302:	462a      	mov	r2, r5
   d4304:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d4306:	4640      	mov	r0, r8
   d4308:	f000 fb30 	bl	d496c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d430c:	e013      	b.n	d4336 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   d430e:	a805      	add	r0, sp, #20
   d4310:	f7ff ff22 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
   d4314:	6803      	ldr	r3, [r0, #0]
   d4316:	4599      	cmp	r9, r3
   d4318:	d90d      	bls.n	d4336 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d431a:	b2a4      	uxth	r4, r4
   d431c:	2101      	movs	r1, #1
   d431e:	4620      	mov	r0, r4
   d4320:	f003 fd8e 	bl	d7e40 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d4324:	a805      	add	r0, sp, #20
   d4326:	f7ff ff0d 	bl	d4144 <_ZNK10BlynkParam8iterator5asIntEv>
   d432a:	1e01      	subs	r1, r0, #0
   d432c:	bf18      	it	ne
   d432e:	2101      	movne	r1, #1
   d4330:	4620      	mov	r0, r4
   d4332:	f003 fd96 	bl	d7e62 <digitalWrite>
    }
}
   d4336:	b00f      	add	sp, #60	; 0x3c
   d4338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d433c:	ab0a      	add	r3, sp, #40	; 0x28
   d433e:	9307      	str	r3, [sp, #28]
   d4340:	a807      	add	r0, sp, #28
   d4342:	2310      	movs	r3, #16
   d4344:	4928      	ldr	r1, [pc, #160]	; (d43e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   d4346:	2500      	movs	r5, #0
   d4348:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d434c:	f7ff febc 	bl	d40c8 <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d4350:	a807      	add	r0, sp, #28
   d4352:	4621      	mov	r1, r4
   d4354:	f7ff ff10 	bl	d4178 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d4358:	4620      	mov	r0, r4
   d435a:	f003 fdae 	bl	d7eba <analogRead>
   d435e:	e7c6      	b.n	d42ee <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   d4360:	a805      	add	r0, sp, #20
   d4362:	f7ff fef9 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
   d4366:	6803      	ldr	r3, [r0, #0]
   d4368:	4599      	cmp	r9, r3
   d436a:	d9e4      	bls.n	d4336 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d436c:	b2a4      	uxth	r4, r4
   d436e:	2101      	movs	r1, #1
   d4370:	4620      	mov	r0, r4
   d4372:	f003 fd65 	bl	d7e40 <pinMode>
        analogWrite(pin, it.asInt());
   d4376:	a805      	add	r0, sp, #20
   d4378:	f7ff fee4 	bl	d4144 <_ZNK10BlynkParam8iterator5asIntEv>
   d437c:	4601      	mov	r1, r0
   d437e:	4620      	mov	r0, r4
   d4380:	f003 fdb2 	bl	d7ee8 <_Z11analogWritetm>
    } break;
   d4384:	e7d7      	b.n	d4336 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d4386:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d4388:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d438c:	f002 f8b6 	bl	d64fc <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d4390:	4603      	mov	r3, r0
            handler(req);
   d4392:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d4394:	b123      	cbz	r3, d43a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   d4396:	4a15      	ldr	r2, [pc, #84]	; (d43ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   d4398:	4293      	cmp	r3, r2
   d439a:	d001      	beq.n	d43a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   d439c:	4798      	blx	r3
   d439e:	e7ca      	b.n	d4336 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   d43a0:	f002 f8a8 	bl	d64f4 <BlynkWidgetRead>
        }
    }
   d43a4:	e7c7      	b.n	d4336 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   d43a6:	a805      	add	r0, sp, #20
   d43a8:	f7ff fed6 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d43ac:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d43ae:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d43b2:	1b5d      	subs	r5, r3, r5
   d43b4:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d43b6:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d43b8:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   d43bc:	950c      	str	r5, [sp, #48]	; 0x30
   d43be:	f002 f8a7 	bl	d6510 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d43c2:	4603      	mov	r3, r0
            handler(req, param);
   d43c4:	a90a      	add	r1, sp, #40	; 0x28
   d43c6:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d43c8:	b123      	cbz	r3, d43d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   d43ca:	4a09      	ldr	r2, [pc, #36]	; (d43f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d43cc:	4293      	cmp	r3, r2
   d43ce:	d001      	beq.n	d43d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   d43d0:	4798      	blx	r3
   d43d2:	e7b0      	b.n	d4336 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   d43d4:	f002 f88f 	bl	d64f6 <BlynkWidgetWrite>
    } break;
   d43d8:	e7ad      	b.n	d4336 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   d43da:	bf00      	nop
   d43dc:	000d8d63 	.word	0x000d8d63
   d43e0:	000d8d66 	.word	0x000d8d66
   d43e4:	000d8d6e 	.word	0x000d8d6e
   d43e8:	000d8d71 	.word	0x000d8d71
   d43ec:	000d64f5 	.word	0x000d64f5
   d43f0:	000d64f7 	.word	0x000d64f7
   d43f4:	000d8d6a 	.word	0x000d8d6a

000d43f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d43f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d43fc:	b08c      	sub	sp, #48	; 0x30
   d43fe:	af04      	add	r7, sp, #16
   d4400:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d4402:	2205      	movs	r2, #5
   d4404:	6800      	ldr	r0, [r0, #0]
   d4406:	1d39      	adds	r1, r7, #4
   d4408:	f002 fe1b 	bl	d7042 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d440c:	b3b8      	cbz	r0, d447e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d440e:	2805      	cmp	r0, #5
   d4410:	d004      	beq.n	d441c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d4412:	2000      	movs	r0, #0
}
   d4414:	3720      	adds	r7, #32
   d4416:	46bd      	mov	sp, r7
   d4418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d441c:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4420:	0a13      	lsrs	r3, r2, #8
   d4422:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d4426:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d442a:	f8a7 3005 	strh.w	r3, [r7, #5]
   d442e:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d4430:	0a13      	lsrs	r3, r2, #8
   d4432:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4436:	fa1f f883 	uxth.w	r8, r3
   d443a:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d443e:	2900      	cmp	r1, #0
   d4440:	d0e7      	beq.n	d4412 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d4442:	793b      	ldrb	r3, [r7, #4]
   d4444:	bb23      	cbnz	r3, d4490 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d4446:	f002 f853 	bl	d64f0 <_Z11BlynkMillisv>
   d444a:	4602      	mov	r2, r0
   d444c:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d444e:	7f60      	ldrb	r0, [r4, #29]
   d4450:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4454:	b9c0      	cbnz	r0, d4488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d4456:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d445a:	2901      	cmp	r1, #1
   d445c:	d114      	bne.n	d4488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d445e:	2b09      	cmp	r3, #9
   d4460:	d00f      	beq.n	d4482 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d4462:	2bc8      	cmp	r3, #200	; 0xc8
   d4464:	d001      	beq.n	d446a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d4466:	2b04      	cmp	r3, #4
   d4468:	d1d4      	bne.n	d4414 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d446a:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d446c:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d446e:	4620      	mov	r0, r4
                state = CONNECTED;
   d4470:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d4472:	f000 fb29 	bl	d4ac8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d4476:	f7ff fe59 	bl	d412c <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d447a:	f002 f83d 	bl	d64f8 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d447e:	2001      	movs	r0, #1
   d4480:	e7c8      	b.n	d4414 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d4482:	2303      	movs	r3, #3
   d4484:	7763      	strb	r3, [r4, #29]
                break;
   d4486:	e7c5      	b.n	d4414 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d4488:	1f58      	subs	r0, r3, #5
   d448a:	bf18      	it	ne
   d448c:	2001      	movne	r0, #1
   d448e:	e7c1      	b.n	d4414 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d4490:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d4494:	d903      	bls.n	d449e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d4496:	4620      	mov	r0, r4
   d4498:	f7ff fea3 	bl	d41e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d449c:	e7ef      	b.n	d447e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d449e:	f108 0308 	add.w	r3, r8, #8
   d44a2:	f023 0307 	bic.w	r3, r3, #7
   d44a6:	466e      	mov	r6, sp
   d44a8:	ebad 0d03 	sub.w	sp, sp, r3
   d44ac:	ad04      	add	r5, sp, #16
   d44ae:	6820      	ldr	r0, [r4, #0]
   d44b0:	4642      	mov	r2, r8
   d44b2:	4629      	mov	r1, r5
   d44b4:	f002 fdc5 	bl	d7042 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d44b8:	4580      	cmp	r8, r0
   d44ba:	f04f 0000 	mov.w	r0, #0
   d44be:	d17f      	bne.n	d45c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d44c0:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d44c4:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d44c6:	f002 f813 	bl	d64f0 <_Z11BlynkMillisv>
    switch (hdr.type)
   d44ca:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d44cc:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d44ce:	2b14      	cmp	r3, #20
   d44d0:	f000 80a6 	beq.w	d4620 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d44d4:	d848      	bhi.n	d4568 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d44d6:	2b0f      	cmp	r3, #15
   d44d8:	f000 80a2 	beq.w	d4620 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d44dc:	d807      	bhi.n	d44ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d44de:	2b02      	cmp	r3, #2
   d44e0:	d048      	beq.n	d4574 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d44e2:	2b06      	cmp	r3, #6
   d44e4:	d051      	beq.n	d458a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d44e6:	4620      	mov	r0, r4
   d44e8:	f7ff fe7b 	bl	d41e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d44ec:	e058      	b.n	d45a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d44ee:	2b11      	cmp	r3, #17
   d44f0:	d1f9      	bne.n	d44e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d44f2:	2300      	movs	r3, #0
   d44f4:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d44f6:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d44fa:	442b      	add	r3, r5
        if (it >= param.end())
   d44fc:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d44fe:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d4502:	d24d      	bcs.n	d45a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d4504:	f107 000c 	add.w	r0, r7, #12
   d4508:	f8d5 8000 	ldr.w	r8, [r5]
   d450c:	f7ff fe24 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d4510:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d4512:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d4516:	1b5d      	subs	r5, r3, r5
   d4518:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d451a:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d451e:	687b      	ldr	r3, [r7, #4]
   d4520:	61fd      	str	r5, [r7, #28]
   d4522:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4526:	8363      	strh	r3, [r4, #26]
   d4528:	4b64      	ldr	r3, [pc, #400]	; (d46bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d452a:	4598      	cmp	r8, r3
   d452c:	f000 80bf 	beq.w	d46ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d4530:	f200 808c 	bhi.w	d464c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d4534:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d4538:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d453c:	4413      	add	r3, r2
   d453e:	4598      	cmp	r8, r3
   d4540:	f000 809d 	beq.w	d467e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d4544:	d879      	bhi.n	d463a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d4546:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d454a:	3b06      	subs	r3, #6
   d454c:	4598      	cmp	r8, r3
   d454e:	f000 809c 	beq.w	d468a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d4552:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d4556:	3303      	adds	r3, #3
   d4558:	4598      	cmp	r8, r3
   d455a:	d16b      	bne.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d455c:	f107 0114 	add.w	r1, r7, #20
   d4560:	4638      	mov	r0, r7
   d4562:	f001 ffc8 	bl	d64f6 <BlynkWidgetWrite>
   d4566:	e065      	b.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d4568:	2b29      	cmp	r3, #41	; 0x29
   d456a:	d01b      	beq.n	d45a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d456c:	2b37      	cmp	r3, #55	; 0x37
   d456e:	d017      	beq.n	d45a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4570:	2b1d      	cmp	r3, #29
   d4572:	d1b8      	bne.n	d44e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d4574:	7f63      	ldrb	r3, [r4, #29]
   d4576:	b943      	cbnz	r3, d458a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d4578:	2301      	movs	r3, #1
   d457a:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d457c:	4620      	mov	r0, r4
   d457e:	f000 faa3 	bl	d4ac8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d4582:	f7ff fdd3 	bl	d412c <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d4586:	f001 ffb7 	bl	d64f8 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d458a:	2300      	movs	r3, #0
   d458c:	21c8      	movs	r1, #200	; 0xc8
   d458e:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4592:	9100      	str	r1, [sp, #0]
   d4594:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4598:	4619      	mov	r1, r3
   d459a:	4620      	mov	r0, r4
   d459c:	f000 f9e6 	bl	d496c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d45a0:	2001      	movs	r0, #1
   d45a2:	e00d      	b.n	d45c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d45a4:	68a3      	ldr	r3, [r4, #8]
   d45a6:	b91b      	cbnz	r3, d45b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d45a8:	2040      	movs	r0, #64	; 0x40
   d45aa:	f002 fa57 	bl	d6a5c <malloc>
   d45ae:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d45b0:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d45b4:	44a8      	add	r8, r5
        if (it >= param.end())
   d45b6:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d45b8:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d45bc:	d302      	bcc.n	d45c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d45be:	2000      	movs	r0, #0
   d45c0:	46b5      	mov	sp, r6
   d45c2:	e727      	b.n	d4414 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d45c4:	4629      	mov	r1, r5
   d45c6:	2240      	movs	r2, #64	; 0x40
   d45c8:	68a0      	ldr	r0, [r4, #8]
   d45ca:	f004 fb25 	bl	d8c18 <strncpy>
        redir_serv[63] = '\0';
   d45ce:	68a3      	ldr	r3, [r4, #8]
   d45d0:	2500      	movs	r5, #0
   d45d2:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d45d6:	f107 0014 	add.w	r0, r7, #20
   d45da:	f7ff fdbd 	bl	d4158 <_ZN10BlynkParam8iteratorppEv>
   d45de:	6803      	ldr	r3, [r0, #0]
   d45e0:	4543      	cmp	r3, r8
   d45e2:	d21b      	bcs.n	d461c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d45e4:	6978      	ldr	r0, [r7, #20]
   d45e6:	b120      	cbz	r0, d45f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d45e8:	69bb      	ldr	r3, [r7, #24]
   d45ea:	4298      	cmp	r0, r3
   d45ec:	d214      	bcs.n	d4618 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d45ee:	f004 fab5 	bl	d8b5c <atol>
            redir_port = it.asLong();
   d45f2:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d45f4:	6820      	ldr	r0, [r4, #0]
   d45f6:	f003 fa1b 	bl	d7a30 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d45fa:	6823      	ldr	r3, [r4, #0]
   d45fc:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d45fe:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d4600:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d4602:	2300      	movs	r3, #0
   d4604:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4606:	f001 ff73 	bl	d64f0 <_Z11BlynkMillisv>
   d460a:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d460e:	3808      	subs	r0, #8
   d4610:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4614:	6160      	str	r0, [r4, #20]
   d4616:	e7c3      	b.n	d45a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4618:	4628      	mov	r0, r5
   d461a:	e7ea      	b.n	d45f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d461c:	2550      	movs	r5, #80	; 0x50
   d461e:	e7e9      	b.n	d45f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d4620:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d4622:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d4626:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d462a:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d462c:	4629      	mov	r1, r5
   d462e:	4620      	mov	r0, r4
   d4630:	f7ff fde2 	bl	d41f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d4634:	2300      	movs	r3, #0
   d4636:	8363      	strh	r3, [r4, #26]
   d4638:	e7b2      	b.n	d45a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d463a:	4b21      	ldr	r3, [pc, #132]	; (d46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d463c:	4598      	cmp	r8, r3
   d463e:	d1f9      	bne.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d4640:	f107 0114 	add.w	r1, r7, #20
   d4644:	4638      	mov	r0, r7
   d4646:	f001 ff56 	bl	d64f6 <BlynkWidgetWrite>
   d464a:	e7f3      	b.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d464c:	4b1d      	ldr	r3, [pc, #116]	; (d46c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d464e:	4598      	cmp	r8, r3
   d4650:	d021      	beq.n	d4696 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d4652:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d4656:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d465a:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d465e:	4598      	cmp	r8, r3
   d4660:	d01f      	beq.n	d46a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d4662:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d4666:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d466a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d466e:	4598      	cmp	r8, r3
   d4670:	d1e0      	bne.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d4672:	f107 0114 	add.w	r1, r7, #20
   d4676:	4638      	mov	r0, r7
   d4678:	f001 ff3d 	bl	d64f6 <BlynkWidgetWrite>
   d467c:	e7da      	b.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d467e:	f107 0114 	add.w	r1, r7, #20
   d4682:	4638      	mov	r0, r7
   d4684:	f001 ff37 	bl	d64f6 <BlynkWidgetWrite>
   d4688:	e7d4      	b.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d468a:	f107 0114 	add.w	r1, r7, #20
   d468e:	4638      	mov	r0, r7
   d4690:	f001 ff31 	bl	d64f6 <BlynkWidgetWrite>
   d4694:	e7ce      	b.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d4696:	f107 0114 	add.w	r1, r7, #20
   d469a:	4638      	mov	r0, r7
   d469c:	f001 ff2b 	bl	d64f6 <BlynkWidgetWrite>
   d46a0:	e7c8      	b.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d46a2:	f107 0114 	add.w	r1, r7, #20
   d46a6:	4638      	mov	r0, r7
   d46a8:	f001 ff25 	bl	d64f6 <BlynkWidgetWrite>
   d46ac:	e7c2      	b.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d46ae:	f107 0114 	add.w	r1, r7, #20
   d46b2:	4638      	mov	r0, r7
   d46b4:	f001 ff1f 	bl	d64f6 <BlynkWidgetWrite>
   d46b8:	e7bc      	b.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d46ba:	bf00      	nop
   d46bc:	00736676 	.word	0x00736676
   d46c0:	00676264 	.word	0x00676264
   d46c4:	6e6f6361 	.word	0x6e6f6361

000d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d46c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d46cc:	4604      	mov	r4, r0
   d46ce:	b08c      	sub	sp, #48	; 0x30
   d46d0:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d46d2:	f7ff fd2b 	bl	d412c <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d46d6:	7f63      	ldrb	r3, [r4, #29]
   d46d8:	2b02      	cmp	r3, #2
   d46da:	f000 80a8 	beq.w	d482e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d46de:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d46e0:	8b62      	ldrh	r2, [r4, #26]
   d46e2:	3301      	adds	r3, #1
   d46e4:	b2db      	uxtb	r3, r3
   d46e6:	7723      	strb	r3, [r4, #28]
   d46e8:	b10a      	cbz	r2, d46ee <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d46ea:	2501      	movs	r5, #1
   d46ec:	e016      	b.n	d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d46ee:	2b02      	cmp	r3, #2
   d46f0:	d8fb      	bhi.n	d46ea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d46f2:	6820      	ldr	r0, [r4, #0]
   d46f4:	f002 ffbb 	bl	d766e <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d46f8:	b1b8      	cbz	r0, d472a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d46fa:	b925      	cbnz	r5, d4706 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d46fc:	6820      	ldr	r0, [r4, #0]
   d46fe:	f003 f93d 	bl	d797c <_ZN9TCPClient9availableEv>
   d4702:	2800      	cmp	r0, #0
   d4704:	dd11      	ble.n	d472a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d4706:	4620      	mov	r0, r4
   d4708:	f7ff fe76 	bl	d43f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d470c:	4605      	mov	r5, r0
   d470e:	2800      	cmp	r0, #0
   d4710:	d1f4      	bne.n	d46fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d4712:	6820      	ldr	r0, [r4, #0]
   d4714:	f003 f98c 	bl	d7a30 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d4718:	f001 feee 	bl	d64f8 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d471c:	7f23      	ldrb	r3, [r4, #28]
   d471e:	3b01      	subs	r3, #1
   d4720:	7723      	strb	r3, [r4, #28]
}
   d4722:	4628      	mov	r0, r5
   d4724:	b00c      	add	sp, #48	; 0x30
   d4726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d472a:	f001 fee1 	bl	d64f0 <_Z11BlynkMillisv>
   d472e:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d4730:	6820      	ldr	r0, [r4, #0]
   d4732:	f002 ff9c 	bl	d766e <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d4736:	7f67      	ldrb	r7, [r4, #29]
   d4738:	2f01      	cmp	r7, #1
   d473a:	4605      	mov	r5, r0
   d473c:	d129      	bne.n	d4792 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d473e:	b920      	cbnz	r0, d474a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d4740:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d4742:	4620      	mov	r0, r4
   d4744:	f7ff fd4d 	bl	d41e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4748:	e7e8      	b.n	d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d474a:	68e3      	ldr	r3, [r4, #12]
   d474c:	f24f 6218 	movw	r2, #63000	; 0xf618
   d4750:	1af3      	subs	r3, r6, r3
   d4752:	4293      	cmp	r3, r2
   d4754:	d904      	bls.n	d4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d4756:	4620      	mov	r0, r4
   d4758:	f7ff fd43 	bl	d41e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d475c:	2500      	movs	r5, #0
   d475e:	e7dd      	b.n	d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4760:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d4764:	4293      	cmp	r3, r2
   d4766:	d803      	bhi.n	d4770 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4768:	6923      	ldr	r3, [r4, #16]
   d476a:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d476c:	4293      	cmp	r3, r2
   d476e:	d9bc      	bls.n	d46ea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4770:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4772:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4776:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4778:	4293      	cmp	r3, r2
   d477a:	d9b6      	bls.n	d46ea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d477c:	2300      	movs	r3, #0
   d477e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4782:	9300      	str	r3, [sp, #0]
   d4784:	461a      	mov	r2, r3
   d4786:	2106      	movs	r1, #6
   d4788:	4620      	mov	r0, r4
   d478a:	f000 f8ef 	bl	d496c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d478e:	6166      	str	r6, [r4, #20]
   d4790:	e7ab      	b.n	d46ea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d4792:	2f00      	cmp	r7, #0
   d4794:	d1a9      	bne.n	d46ea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d4796:	6962      	ldr	r2, [r4, #20]
   d4798:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d479a:	b140      	cbz	r0, d47ae <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d479c:	f241 7370 	movw	r3, #6000	; 0x1770
   d47a0:	429a      	cmp	r2, r3
   d47a2:	d9a2      	bls.n	d46ea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d47a4:	6820      	ldr	r0, [r4, #0]
   d47a6:	f003 f943 	bl	d7a30 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d47aa:	7767      	strb	r7, [r4, #29]
   d47ac:	e7d6      	b.n	d475c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d47ae:	f241 3388 	movw	r3, #5000	; 0x1388
   d47b2:	429a      	cmp	r2, r3
   d47b4:	d999      	bls.n	d46ea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d47b6:	6820      	ldr	r0, [r4, #0]
   d47b8:	f003 f93a 	bl	d7a30 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d47bc:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d47c0:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d47c4:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d47c8:	f1be 0f00 	cmp.w	lr, #0
   d47cc:	d00b      	beq.n	d47e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d47ce:	462b      	mov	r3, r5
   d47d0:	4642      	mov	r2, r8
   d47d2:	4671      	mov	r1, lr
   d47d4:	4660      	mov	r0, ip
   d47d6:	f003 f989 	bl	d7aec <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d47da:	1e43      	subs	r3, r0, #1
   d47dc:	425d      	negs	r5, r3
   d47de:	415d      	adcs	r5, r3
   d47e0:	b98d      	cbnz	r5, d4806 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d47e2:	6166      	str	r6, [r4, #20]
                return false;
   d47e4:	e79a      	b.n	d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d47e6:	4b13      	ldr	r3, [pc, #76]	; (d4834 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d47e8:	9306      	str	r3, [sp, #24]
   d47ea:	f10c 0720 	add.w	r7, ip, #32
   d47ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d47f0:	ad07      	add	r5, sp, #28
   d47f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d47f4:	683b      	ldr	r3, [r7, #0]
   d47f6:	702b      	strb	r3, [r5, #0]
   d47f8:	4642      	mov	r2, r8
   d47fa:	4673      	mov	r3, lr
   d47fc:	a906      	add	r1, sp, #24
   d47fe:	4660      	mov	r0, ip
   d4800:	f003 f841 	bl	d7886 <_ZN9TCPClient7connectE9IPAddresstm>
   d4804:	e7e9      	b.n	d47da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4806:	6863      	ldr	r3, [r4, #4]
   d4808:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d480a:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d480c:	4618      	mov	r0, r3
            msgIdOut = 1;
   d480e:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4810:	f004 f9fa 	bl	d8c08 <strlen>
   d4814:	2200      	movs	r2, #0
   d4816:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d481a:	9b05      	ldr	r3, [sp, #20]
   d481c:	9000      	str	r0, [sp, #0]
   d481e:	4632      	mov	r2, r6
   d4820:	211d      	movs	r1, #29
   d4822:	4620      	mov	r0, r4
   d4824:	f000 f8a2 	bl	d496c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d4828:	6923      	ldr	r3, [r4, #16]
   d482a:	6163      	str	r3, [r4, #20]
            return true;
   d482c:	e776      	b.n	d471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d482e:	2500      	movs	r5, #0
   d4830:	e777      	b.n	d4722 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d4832:	bf00      	nop
   d4834:	000d9de8 	.word	0x000d9de8

000d4838 <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d4838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d483c:	4615      	mov	r5, r2
   d483e:	b08c      	sub	sp, #48	; 0x30
   d4840:	4604      	mov	r4, r0
   d4842:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4844:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d4848:	460f      	mov	r7, r1
   d484a:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d484c:	f001 fe4e 	bl	d64ec <_Z10BlynkDelaym>
   d4850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4852:	ae01      	add	r6, sp, #4
   d4854:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4856:	682b      	ldr	r3, [r5, #0]
   d4858:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d485a:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d485c:	f001 fe48 	bl	d64f0 <_Z11BlynkMillisv>
   d4860:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4864:	3808      	subs	r0, #8
   d4866:	af01      	add	r7, sp, #4
   d4868:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d486c:	6160      	str	r0, [r4, #20]
   d486e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4870:	ae07      	add	r6, sp, #28
   d4872:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4874:	683b      	ldr	r3, [r7, #0]
   d4876:	7033      	strb	r3, [r6, #0]
   d4878:	af07      	add	r7, sp, #28
   d487a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d487c:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d487e:	f04f 0c00 	mov.w	ip, #0
   d4882:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d4886:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d488a:	3520      	adds	r5, #32
   d488c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d488e:	6833      	ldr	r3, [r6, #0]
   d4890:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d4892:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d4894:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d4898:	6820      	ldr	r0, [r4, #0]
   d489a:	f003 f8c9 	bl	d7a30 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d489e:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d48a0:	f001 fe26 	bl	d64f0 <_Z11BlynkMillisv>
   d48a4:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d48a6:	7f63      	ldrb	r3, [r4, #29]
   d48a8:	2b01      	cmp	r3, #1
   d48aa:	d00c      	beq.n	d48c6 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d48ac:	f001 fe20 	bl	d64f0 <_Z11BlynkMillisv>
   d48b0:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d48b2:	42b8      	cmp	r0, r7
   d48b4:	d804      	bhi.n	d48c0 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d48b6:	2100      	movs	r1, #0
   d48b8:	4620      	mov	r0, r4
   d48ba:	f7ff ff05 	bl	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d48be:	e7f2      	b.n	d48a6 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d48c0:	7f63      	ldrb	r3, [r4, #29]
   d48c2:	2b01      	cmp	r3, #1
   d48c4:	d1e8      	bne.n	d4898 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d48c6:	b00c      	add	sp, #48	; 0x30
   d48c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d48cc <setup>:
#include "SparkFun_VCNL4040_Arduino_Library.h"
#include "oled-wing-adafruit.h"
OledWingAdafruit display;
VCNL4040 proximitySensor;
// setup() runs once, when the device is first turned on.
void setup() {
   d48cc:	b510      	push	{r4, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(D3,INPUT);    // setup button
   d48ce:	2100      	movs	r1, #0
void setup() {
   d48d0:	b088      	sub	sp, #32
  pinMode(D3,INPUT);    // setup button
   d48d2:	2003      	movs	r0, #3
   d48d4:	f003 fab4 	bl	d7e40 <pinMode>
  pinMode(A4, INPUT);   // tmp36
   d48d8:	2100      	movs	r1, #0
   d48da:	200f      	movs	r0, #15
   d48dc:	f003 fab0 	bl	d7e40 <pinMode>
  pinMode(A5,INPUT); // setup potentiometer
   d48e0:	2100      	movs	r1, #0
   d48e2:	200e      	movs	r0, #14
   d48e4:	f003 faac 	bl	d7e40 <pinMode>
  pinMode(D7,OUTPUT); //led
   d48e8:	2101      	movs	r1, #1
   d48ea:	2007      	movs	r0, #7
   d48ec:	f003 faa8 	bl	d7e40 <pinMode>
  pinMode(D6,OUTPUT); //led
   d48f0:	2101      	movs	r1, #1
   d48f2:	2006      	movs	r0, #6
   d48f4:	f003 faa4 	bl	d7e40 <pinMode>
  pinMode(D5,OUTPUT); //led
   d48f8:	2101      	movs	r1, #1
   d48fa:	2005      	movs	r0, #5
   d48fc:	f003 faa0 	bl	d7e40 <pinMode>
  display.setup();
   d4900:	4816      	ldr	r0, [pc, #88]	; (d495c <setup+0x90>)
  display.clearDisplay();
  display.display();
  Serial.begin(9600); 
  Blynk.begin("I5S3IEzBg_rLSDyArIkR2FpW-hgpONn6", IPAddress(167, 172, 234, 162), 9090); 
  Wire.begin();
  proximitySensor.begin(); //Initialize the sensor  
   d4902:	4c17      	ldr	r4, [pc, #92]	; (d4960 <setup+0x94>)
  display.setup();
   d4904:	f000 ff72 	bl	d57ec <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d4908:	4814      	ldr	r0, [pc, #80]	; (d495c <setup+0x90>)
   d490a:	f001 fae9 	bl	d5ee0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d490e:	4813      	ldr	r0, [pc, #76]	; (d495c <setup+0x90>)
   d4910:	f001 fd52 	bl	d63b8 <_ZN16Adafruit_SSD13067displayEv>
  Serial.begin(9600); 
   d4914:	f002 fd5e 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4918:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d491c:	f002 fd4e 	bl	d73bc <_ZN9USBSerial5beginEl>
  Blynk.begin("I5S3IEzBg_rLSDyArIkR2FpW-hgpONn6", IPAddress(167, 172, 234, 162), 9090); 
   d4920:	23a2      	movs	r3, #162	; 0xa2
   d4922:	9300      	str	r3, [sp, #0]
   d4924:	22ac      	movs	r2, #172	; 0xac
   d4926:	23ea      	movs	r3, #234	; 0xea
   d4928:	21a7      	movs	r1, #167	; 0xa7
   d492a:	a802      	add	r0, sp, #8
   d492c:	f002 fcda 	bl	d72e4 <_ZN9IPAddressC1Ehhhh>
   d4930:	f242 3382 	movw	r3, #9090	; 0x2382
   d4934:	aa02      	add	r2, sp, #8
   d4936:	490b      	ldr	r1, [pc, #44]	; (d4964 <setup+0x98>)
   d4938:	480b      	ldr	r0, [pc, #44]	; (d4968 <setup+0x9c>)
   d493a:	f7ff ff7d 	bl	d4838 <_ZN13BlynkParticle5beginEPKc9IPAddresst>
  Wire.begin();
   d493e:	f003 fb11 	bl	d7f64 <_Z19__fetch_global_Wirev>
   d4942:	f002 fe31 	bl	d75a8 <_ZN7TwoWire5beginEv>
  proximitySensor.begin(); //Initialize the sensor  
   d4946:	f003 fb0d 	bl	d7f64 <_Z19__fetch_global_Wirev>
   d494a:	4601      	mov	r1, r0
   d494c:	4620      	mov	r0, r4
   d494e:	f001 f923 	bl	d5b98 <_ZN8VCNL40405beginER7TwoWire>
  proximitySensor.powerOnAmbient(); //Power up the ambient sensor
   d4952:	4620      	mov	r0, r4
   d4954:	f001 f8b3 	bl	d5abe <_ZN8VCNL404014powerOnAmbientEv>

}
   d4958:	b008      	add	sp, #32
   d495a:	bd10      	pop	{r4, pc}
   d495c:	2003e5c8 	.word	0x2003e5c8
   d4960:	2003e63c 	.word	0x2003e63c
   d4964:	000d8d74 	.word	0x000d8d74
   d4968:	2003e568 	.word	0x2003e568

000d496c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d496c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4970:	b083      	sub	sp, #12
   d4972:	af00      	add	r7, sp, #0
   d4974:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d4976:	6800      	ldr	r0, [r0, #0]
   d4978:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d497a:	4688      	mov	r8, r1
   d497c:	4616      	mov	r6, r2
   d497e:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d4980:	46eb      	mov	fp, sp
   d4982:	f002 fe74 	bl	d766e <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d4986:	2800      	cmp	r0, #0
   d4988:	d07f      	beq.n	d4a8a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d498a:	f1b8 0f1d 	cmp.w	r8, #29
   d498e:	d804      	bhi.n	d499a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d4990:	4b4c      	ldr	r3, [pc, #304]	; (d4ac4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d4992:	fa23 f308 	lsr.w	r3, r3, r8
   d4996:	07db      	lsls	r3, r3, #31
   d4998:	d402      	bmi.n	d49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d499a:	7f63      	ldrb	r3, [r4, #29]
   d499c:	2b01      	cmp	r3, #1
   d499e:	d174      	bne.n	d4a8a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d49a0:	b946      	cbnz	r6, d49b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d49a2:	8b66      	ldrh	r6, [r4, #26]
   d49a4:	b936      	cbnz	r6, d49b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d49a6:	8b23      	ldrh	r3, [r4, #24]
   d49a8:	3301      	adds	r3, #1
   d49aa:	b29b      	uxth	r3, r3
   d49ac:	2b00      	cmp	r3, #0
   d49ae:	d071      	beq.n	d4a94 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d49b0:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d49b2:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d49b4:	f1a8 030c 	sub.w	r3, r8, #12
   d49b8:	2b08      	cmp	r3, #8
   d49ba:	d816      	bhi.n	d49ea <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d49bc:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d49c0:	4293      	cmp	r3, r2
   d49c2:	bf38      	it	cc
   d49c4:	4613      	movcc	r3, r2
   d49c6:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d49ca:	f001 fd91 	bl	d64f0 <_Z11BlynkMillisv>
   d49ce:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d49d2:	2800      	cmp	r0, #0
   d49d4:	db60      	blt.n	d4a98 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d49d6:	2100      	movs	r1, #0
   d49d8:	4620      	mov	r0, r4
   d49da:	f7ff fe75 	bl	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d49de:	f001 fd87 	bl	d64f0 <_Z11BlynkMillisv>
   d49e2:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d49e6:	2800      	cmp	r0, #0
   d49e8:	daf5      	bge.n	d49d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d49ea:	f1b9 0f00 	cmp.w	r9, #0
   d49ee:	d05a      	beq.n	d4aa6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d49f0:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d49f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d49f4:	2a00      	cmp	r2, #0
   d49f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d49f8:	bf08      	it	eq
   d49fa:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d49fc:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d4a00:	f10a 0307 	add.w	r3, sl, #7
   d4a04:	f023 0307 	bic.w	r3, r3, #7
   d4a08:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d4a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d4a0e:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d4a12:	18ea      	adds	r2, r5, r3
   d4a14:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d4a18:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4a1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d4a1e:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d4a22:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4a26:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d4a2a:	f1b9 0f00 	cmp.w	r9, #0
   d4a2e:	d03c      	beq.n	d4aaa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4a30:	2d00      	cmp	r5, #0
   d4a32:	d03a      	beq.n	d4aaa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4a34:	462a      	mov	r2, r5
   d4a36:	4649      	mov	r1, r9
   d4a38:	f10d 0005 	add.w	r0, sp, #5
   d4a3c:	f004 f8a0 	bl	d8b80 <memcpy>
        pos += length;
   d4a40:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4a44:	b13b      	cbz	r3, d4a56 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4a48:	b12b      	cbz	r3, d4a56 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4a4a:	461a      	mov	r2, r3
   d4a4c:	687b      	ldr	r3, [r7, #4]
   d4a4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4a50:	4418      	add	r0, r3
   d4a52:	f004 f895 	bl	d8b80 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4a56:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4a58:	4555      	cmp	r5, sl
   d4a5a:	d22a      	bcs.n	d4ab2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4a5c:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4a60:	687b      	ldr	r3, [r7, #4]
   d4a62:	6820      	ldr	r0, [r4, #0]
   d4a64:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4a68:	bf28      	it	cs
   d4a6a:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4a6e:	1959      	adds	r1, r3, r5
   d4a70:	f002 fde7 	bl	d7642 <_ZN9TCPClient5writeEPKhj>
   d4a74:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4a76:	2000      	movs	r0, #0
   d4a78:	f001 fd38 	bl	d64ec <_Z10BlynkDelaym>
        if (w == 0) {
   d4a7c:	b9be      	cbnz	r6, d4aae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4a7e:	6820      	ldr	r0, [r4, #0]
   d4a80:	f002 ffd6 	bl	d7a30 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4a84:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4a86:	f001 fd37 	bl	d64f8 <BlynkNoOpCbk>
}
   d4a8a:	370c      	adds	r7, #12
   d4a8c:	46dd      	mov	sp, fp
   d4a8e:	46bd      	mov	sp, r7
   d4a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4a94:	2301      	movs	r3, #1
   d4a96:	e78b      	b.n	d49b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4a98:	7f21      	ldrb	r1, [r4, #28]
   d4a9a:	2900      	cmp	r1, #0
   d4a9c:	d1a5      	bne.n	d49ea <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4a9e:	4620      	mov	r0, r4
   d4aa0:	f7ff fe12 	bl	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4aa4:	e7a1      	b.n	d49ea <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4aa6:	2305      	movs	r3, #5
   d4aa8:	e7a3      	b.n	d49f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4aaa:	2005      	movs	r0, #5
   d4aac:	e7c9      	b.n	d4a42 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4aae:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4ab0:	e7d2      	b.n	d4a58 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4ab2:	d003      	beq.n	d4abc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4ab4:	4620      	mov	r0, r4
   d4ab6:	f7ff fb94 	bl	d41e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4aba:	e7e6      	b.n	d4a8a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4abc:	f001 fd18 	bl	d64f0 <_Z11BlynkMillisv>
   d4ac0:	6120      	str	r0, [r4, #16]
   d4ac2:	e7e2      	b.n	d4a8a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4ac4:	20000045 	.word	0x20000045

000d4ac8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4ac8:	b500      	push	{lr}
   d4aca:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4acc:	ab04      	add	r3, sp, #16
   d4ace:	2200      	movs	r2, #0
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	2349      	movs	r3, #73	; 0x49
   d4ad4:	9300      	str	r3, [sp, #0]
   d4ad6:	9202      	str	r2, [sp, #8]
   d4ad8:	4b03      	ldr	r3, [pc, #12]	; (d4ae8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4ada:	2111      	movs	r1, #17
   d4adc:	f7ff ff46 	bl	d496c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4ae0:	b015      	add	sp, #84	; 0x54
   d4ae2:	f85d fb04 	ldr.w	pc, [sp], #4
   d4ae6:	bf00      	nop
   d4ae8:	000d8de3 	.word	0x000d8de3

000d4aec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4aec:	b570      	push	{r4, r5, r6, lr}
   d4aee:	ed2d 8b02 	vpush	{d8}
   d4af2:	eeb0 8a40 	vmov.f32	s16, s0
   d4af6:	eef0 8a60 	vmov.f32	s17, s1
   d4afa:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4afe:	ab08      	add	r3, sp, #32
   d4b00:	2400      	movs	r4, #0
   d4b02:	4605      	mov	r5, r0
   d4b04:	460e      	mov	r6, r1
   d4b06:	9305      	str	r3, [sp, #20]
   d4b08:	a805      	add	r0, sp, #20
   d4b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4b0e:	4913      	ldr	r1, [pc, #76]	; (d4b5c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x70>)
   d4b10:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4b14:	f7ff fad8 	bl	d40c8 <_ZN10BlynkParam3addEPKc.part.0>
        cmd.add(pin);
   d4b18:	4631      	mov	r1, r6
   d4b1a:	a805      	add	r0, sp, #20
   d4b1c:	f7ff fb2c 	bl	d4178 <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d4b20:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   d4b24:	9805      	ldr	r0, [sp, #20]
   d4b26:	4a0e      	ldr	r2, [pc, #56]	; (d4b60 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x74>)
   d4b28:	1ac9      	subs	r1, r1, r3
   d4b2a:	ed8d 8b00 	vstr	d8, [sp]
   d4b2e:	4418      	add	r0, r3
   d4b30:	f001 ffa4 	bl	d6a7c <snprintf>
   d4b34:	1c43      	adds	r3, r0, #1
   d4b36:	9806      	ldr	r0, [sp, #24]
   d4b38:	4403      	add	r3, r0
   d4b3a:	9306      	str	r3, [sp, #24]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4b3c:	3b01      	subs	r3, #1
   d4b3e:	9300      	str	r3, [sp, #0]
   d4b40:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4b44:	9b05      	ldr	r3, [sp, #20]
   d4b46:	4622      	mov	r2, r4
   d4b48:	2114      	movs	r1, #20
   d4b4a:	4628      	mov	r0, r5
   d4b4c:	f7ff ff0e 	bl	d496c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4b50:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   d4b54:	ecbd 8b02 	vpop	{d8}
   d4b58:	bd70      	pop	{r4, r5, r6, pc}
   d4b5a:	bf00      	nop
   d4b5c:	000d8d95 	.word	0x000d8d95
   d4b60:	000d8d98 	.word	0x000d8d98

000d4b64 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA30_cEEvRKT_>:
    }

    // Please use Blynk.logEvent("event", "Description")
    template<typename T>
    BLYNK_DEPRECATED
    void notify(const T& msg) {
   d4b64:	b530      	push	{r4, r5, lr}
   d4b66:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4b6a:	ab08      	add	r3, sp, #32
   d4b6c:	2400      	movs	r4, #0
   d4b6e:	4605      	mov	r5, r0
   d4b70:	9305      	str	r3, [sp, #20]
   d4b72:	a805      	add	r0, sp, #20
   d4b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4b78:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4b7c:	f7ff faa4 	bl	d40c8 <_ZN10BlynkParam3addEPKc.part.0>
        logEvent("notify", msg);
#else
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4b80:	9b06      	ldr	r3, [sp, #24]
   d4b82:	3b01      	subs	r3, #1
   d4b84:	9300      	str	r3, [sp, #0]
   d4b86:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4b8a:	9b05      	ldr	r3, [sp, #20]
   d4b8c:	4622      	mov	r2, r4
   d4b8e:	210e      	movs	r1, #14
   d4b90:	4628      	mov	r0, r5
   d4b92:	f7ff feeb 	bl	d496c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    }
   d4b96:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4b9a:	bd30      	pop	{r4, r5, pc}
   d4b9c:	0000      	movs	r0, r0
	...

000d4ba0 <loop>:
uint16_t lowSet = 0;  // low set 
uint16_t highSet = 0;  // high set
uint16_t numTimesButton = 1;  // numTimes of press button
uint16_t color = 0;  // color tracker
// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // The core of your code will likely live here.
  Blynk.run();
  display.loop();
   d4ba4:	4cac      	ldr	r4, [pc, #688]	; (d4e58 <loop+0x2b8>)
  Blynk.run();
   d4ba6:	48ad      	ldr	r0, [pc, #692]	; (d4e5c <loop+0x2bc>)
  Serial.begin(9600); 
  // it will read the value and print it in the console
  bool value; // button true or false
  value = digitalRead(D3);  // reads the button either true or false
  //Serial.println(value); 
  Serial.println(numTimesButton);
   d4ba8:	4fad      	ldr	r7, [pc, #692]	; (d4e60 <loop+0x2c0>)
void loop() {
   d4baa:	ed2d 8b04 	vpush	{d8-d9}
  Blynk.run();
   d4bae:	2100      	movs	r1, #0
   d4bb0:	f7ff fd8a 	bl	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  display.loop();
   d4bb4:	4620      	mov	r0, r4
   d4bb6:	f000 fe42 	bl	d583e <_ZN16OledWingAdafruit4loopEv>
  display.clearDisplay();
   d4bba:	4620      	mov	r0, r4
   d4bbc:	f001 f990 	bl	d5ee0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d4bc0:	2101      	movs	r1, #1
   d4bc2:	4620      	mov	r0, r4
   d4bc4:	f000 fdc3 	bl	d574e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4bc8:	2500      	movs	r5, #0
   d4bca:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4bce:	e9c4 5304 	strd	r5, r3, [r4, #16]
  uint64_t reading = analogRead(A4);
   d4bd2:	200f      	movs	r0, #15
   d4bd4:	f003 f971 	bl	d7eba <analogRead>
  double voltage = (reading * 3.3) / 4095.0;
   d4bd8:	17c1      	asrs	r1, r0, #31
   d4bda:	f003 fc8d 	bl	d84f8 <__aeabi_ul2d>
   d4bde:	a39a      	add	r3, pc, #616	; (adr r3, d4e48 <loop+0x2a8>)
   d4be0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4be4:	f003 fcbe 	bl	d8564 <__aeabi_dmul>
   d4be8:	a399      	add	r3, pc, #612	; (adr r3, d4e50 <loop+0x2b0>)
   d4bea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bee:	f003 fde3 	bl	d87b8 <__aeabi_ddiv>
  double temperature = (voltage - 0.5) * 100;
   d4bf2:	4b9c      	ldr	r3, [pc, #624]	; (d4e64 <loop+0x2c4>)
   d4bf4:	2200      	movs	r2, #0
   d4bf6:	f003 fafd 	bl	d81f4 <__aeabi_dsub>
   d4bfa:	4b9b      	ldr	r3, [pc, #620]	; (d4e68 <loop+0x2c8>)
   d4bfc:	2200      	movs	r2, #0
   d4bfe:	f003 fcb1 	bl	d8564 <__aeabi_dmul>
   d4c02:	ec41 0b18 	vmov	d8, r0, r1
  display.clearDisplay();
   d4c06:	4620      	mov	r0, r4
   d4c08:	f001 f96a 	bl	d5ee0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.print(temperature); // prints temp in C
   d4c0c:	eeb0 0a48 	vmov.f32	s0, s16
   d4c10:	eef0 0a68 	vmov.f32	s1, s17
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d4c14:	6125      	str	r5, [r4, #16]
   d4c16:	2102      	movs	r1, #2
   d4c18:	4620      	mov	r0, r4
   d4c1a:	f002 f9c9 	bl	d6fb0 <_ZN5Print5printEdi>
  display.println(" C");
   d4c1e:	4993      	ldr	r1, [pc, #588]	; (d4e6c <loop+0x2cc>)
   d4c20:	4d93      	ldr	r5, [pc, #588]	; (d4e70 <loop+0x2d0>)
   d4c22:	4620      	mov	r0, r4
   d4c24:	f002 f8d3 	bl	d6dce <_ZN5Print7printlnEPKc>
  display.print((temperature)*9/5+32); // prints temp in F
   d4c28:	4b92      	ldr	r3, [pc, #584]	; (d4e74 <loop+0x2d4>)
   d4c2a:	2200      	movs	r2, #0
   d4c2c:	ec51 0b18 	vmov	r0, r1, d8
   d4c30:	f003 fc98 	bl	d8564 <__aeabi_dmul>
   d4c34:	4b90      	ldr	r3, [pc, #576]	; (d4e78 <loop+0x2d8>)
   d4c36:	2200      	movs	r2, #0
   d4c38:	f003 fdbe 	bl	d87b8 <__aeabi_ddiv>
   d4c3c:	4b8f      	ldr	r3, [pc, #572]	; (d4e7c <loop+0x2dc>)
   d4c3e:	2200      	movs	r2, #0
   d4c40:	f003 fada 	bl	d81f8 <__adddf3>
   d4c44:	ec41 0b19 	vmov	d9, r0, r1
   d4c48:	2102      	movs	r1, #2
   d4c4a:	eeb0 0a49 	vmov.f32	s0, s18
   d4c4e:	eef0 0a69 	vmov.f32	s1, s19
   d4c52:	4620      	mov	r0, r4
   d4c54:	f002 f9ac 	bl	d6fb0 <_ZN5Print5printEdi>
  display.println(" F");
   d4c58:	4989      	ldr	r1, [pc, #548]	; (d4e80 <loop+0x2e0>)
   d4c5a:	4620      	mov	r0, r4
   d4c5c:	f002 f8b7 	bl	d6dce <_ZN5Print7printlnEPKc>
  display.display();  // cause the display to be updated
   d4c60:	4620      	mov	r0, r4
   d4c62:	f001 fba9 	bl	d63b8 <_ZN16Adafruit_SSD13067displayEv>
  Blynk.virtualWrite(V1,temperature);
   d4c66:	eeb0 0a48 	vmov.f32	s0, s16
   d4c6a:	eef0 0a68 	vmov.f32	s1, s17
   d4c6e:	487b      	ldr	r0, [pc, #492]	; (d4e5c <loop+0x2bc>)
   d4c70:	4c84      	ldr	r4, [pc, #528]	; (d4e84 <loop+0x2e4>)
   d4c72:	2101      	movs	r1, #1
   d4c74:	f7ff ff3a 	bl	d4aec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
  Blynk.virtualWrite(V2,(temperature)*9/5+32);
   d4c78:	eeb0 0a49 	vmov.f32	s0, s18
   d4c7c:	eef0 0a69 	vmov.f32	s1, s19
   d4c80:	2102      	movs	r1, #2
   d4c82:	4876      	ldr	r0, [pc, #472]	; (d4e5c <loop+0x2bc>)
   d4c84:	f7ff ff32 	bl	d4aec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
  unsigned int ambientValue = proximitySensor.getAmbient(); // ambient light level
   d4c88:	487f      	ldr	r0, [pc, #508]	; (d4e88 <loop+0x2e8>)
   d4c8a:	f000 fe9c 	bl	d59c6 <_ZN8VCNL404010getAmbientEv>
   d4c8e:	4606      	mov	r6, r0
  Serial.begin(9600); 
   d4c90:	f002 fba0 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4c94:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4c98:	f002 fb90 	bl	d73bc <_ZN9USBSerial5beginEl>
  value = digitalRead(D3);  // reads the button either true or false
   d4c9c:	2003      	movs	r0, #3
   d4c9e:	f003 f8f9 	bl	d7e94 <digitalRead>
   d4ca2:	4680      	mov	r8, r0
  Serial.println(numTimesButton);
   d4ca4:	f002 fb96 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4ca8:	8839      	ldrh	r1, [r7, #0]
   d4caa:	220a      	movs	r2, #10
   d4cac:	f7ff fa88 	bl	d41c0 <_ZN5Print7printlnItLi0EEEjT_i>
  if (value == true && numTimesButton % 2 != 0) {
   d4cb0:	f1b8 0f00 	cmp.w	r8, #0
   d4cb4:	d00e      	beq.n	d4cd4 <loop+0x134>
   d4cb6:	883b      	ldrh	r3, [r7, #0]
   d4cb8:	07db      	lsls	r3, r3, #31
    lowSet= analogRead(A5); // if the button is pressed the low set will  be set
   d4cba:	f04f 000e 	mov.w	r0, #14
  if (value == true && numTimesButton % 2 != 0) {
   d4cbe:	d549      	bpl.n	d4d54 <loop+0x1b4>
    lowSet= analogRead(A5); // if the button is pressed the low set will  be set
   d4cc0:	f003 f8fb 	bl	d7eba <analogRead>
   d4cc4:	8020      	strh	r0, [r4, #0]
    delay(500);
    
  } 
  else if (value == true && numTimesButton % 2 == 0) {
    highSet= analogRead(A5); // if the button is pressed the high set will  be set
    numTimesButton++;
   d4cc6:	883b      	ldrh	r3, [r7, #0]
    delay(500);
   d4cc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    numTimesButton++;
   d4ccc:	3301      	adds	r3, #1
   d4cce:	803b      	strh	r3, [r7, #0]
    delay(500);
   d4cd0:	f002 f9e0 	bl	d7094 <delay>
  } 
  uint16_t temp = lowSet; 
   d4cd4:	8823      	ldrh	r3, [r4, #0]
  // finding low set and high set
  if(lowSet>highSet){
   d4cd6:	882a      	ldrh	r2, [r5, #0]
   d4cd8:	429a      	cmp	r2, r3
    lowSet = highSet;
   d4cda:	bf3c      	itt	cc
   d4cdc:	8022      	strhcc	r2, [r4, #0]
    highSet = temp;
   d4cde:	802b      	strhcc	r3, [r5, #0]
  //Serial.println(highSet); 


  

  Serial.println(lowSet); 
   d4ce0:	f002 fb78 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4ce4:	8821      	ldrh	r1, [r4, #0]
   d4ce6:	220a      	movs	r2, #10
   d4ce8:	f7ff fa6a 	bl	d41c0 <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.println(highSet);
   d4cec:	f002 fb72 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4cf0:	8829      	ldrh	r1, [r5, #0]
   d4cf2:	220a      	movs	r2, #10
   d4cf4:	f7ff fa64 	bl	d41c0 <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.println(ambientValue); 
   d4cf8:	f002 fb6c 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4cfc:	220a      	movs	r2, #10
   d4cfe:	4607      	mov	r7, r0
   d4d00:	4631      	mov	r1, r6
   d4d02:	f002 f86e 	bl	d6de2 <_ZN5Print11printNumberEmh>
        n += println();
   d4d06:	4638      	mov	r0, r7
   d4d08:	f002 f855 	bl	d6db6 <_ZN5Print7printlnEv>
  
  //Serial.println(proxValue);
  // blue ambientValue below lowset
  if(ambientValue <= (lowSet))
   d4d0c:	8823      	ldrh	r3, [r4, #0]
   d4d0e:	42b3      	cmp	r3, r6
   d4d10:	d224      	bcs.n	d4d5c <loop+0x1bc>
    }
    color = 1; // blue
    
  }
  // orange ambientValue between high and low set
  if(ambientValue > (lowSet) && ambientValue<highSet)
   d4d12:	882b      	ldrh	r3, [r5, #0]
   d4d14:	42b3      	cmp	r3, r6
   d4d16:	d941      	bls.n	d4d9c <loop+0x1fc>
  {
    transitionCount++;
   d4d18:	4f5c      	ldr	r7, [pc, #368]	; (d4e8c <loop+0x2ec>)
   d4d1a:	883b      	ldrh	r3, [r7, #0]
    digitalWrite(D6, HIGH);
   d4d1c:	2101      	movs	r1, #1
    transitionCount++;
   d4d1e:	3301      	adds	r3, #1
    digitalWrite(D6, HIGH);
   d4d20:	2006      	movs	r0, #6
    transitionCount++;
   d4d22:	803b      	strh	r3, [r7, #0]
    digitalWrite(D6, HIGH);
   d4d24:	f003 f89d 	bl	d7e62 <digitalWrite>
    digitalWrite(D5, LOW);
   d4d28:	2100      	movs	r1, #0
   d4d2a:	2005      	movs	r0, #5
   d4d2c:	f003 f899 	bl	d7e62 <digitalWrite>
    digitalWrite(D7, LOW);
   d4d30:	2100      	movs	r1, #0
   d4d32:	2007      	movs	r0, #7
   d4d34:	f003 f895 	bl	d7e62 <digitalWrite>

    //notify transition
    if(transitionCount>1 && color != 2){
   d4d38:	883b      	ldrh	r3, [r7, #0]
   d4d3a:	4f55      	ldr	r7, [pc, #340]	; (d4e90 <loop+0x2f0>)
   d4d3c:	2b01      	cmp	r3, #1
   d4d3e:	d906      	bls.n	d4d4e <loop+0x1ae>
   d4d40:	883b      	ldrh	r3, [r7, #0]
   d4d42:	2b02      	cmp	r3, #2
   d4d44:	d003      	beq.n	d4d4e <loop+0x1ae>
      Blynk.notify("Hey, got a push notification!"); // sends notification to Blynk app
   d4d46:	4953      	ldr	r1, [pc, #332]	; (d4e94 <loop+0x2f4>)
   d4d48:	4844      	ldr	r0, [pc, #272]	; (d4e5c <loop+0x2bc>)
   d4d4a:	f7ff ff0b 	bl	d4b64 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA30_cEEvRKT_>
    }
    color = 2; // orange
   d4d4e:	2302      	movs	r3, #2
   d4d50:	803b      	strh	r3, [r7, #0]
   d4d52:	e023      	b.n	d4d9c <loop+0x1fc>
    highSet= analogRead(A5); // if the button is pressed the high set will  be set
   d4d54:	f003 f8b1 	bl	d7eba <analogRead>
   d4d58:	8028      	strh	r0, [r5, #0]
   d4d5a:	e7b4      	b.n	d4cc6 <loop+0x126>
    transitionCount++;
   d4d5c:	4f4b      	ldr	r7, [pc, #300]	; (d4e8c <loop+0x2ec>)
   d4d5e:	883b      	ldrh	r3, [r7, #0]
    digitalWrite(D7, HIGH);
   d4d60:	2101      	movs	r1, #1
    transitionCount++;
   d4d62:	3301      	adds	r3, #1
    digitalWrite(D7, HIGH);
   d4d64:	2007      	movs	r0, #7
    transitionCount++;
   d4d66:	803b      	strh	r3, [r7, #0]
    digitalWrite(D7, HIGH);
   d4d68:	f003 f87b 	bl	d7e62 <digitalWrite>
    digitalWrite(D6, LOW);
   d4d6c:	2100      	movs	r1, #0
   d4d6e:	2006      	movs	r0, #6
   d4d70:	f003 f877 	bl	d7e62 <digitalWrite>
    digitalWrite(D5, LOW);
   d4d74:	2100      	movs	r1, #0
   d4d76:	2005      	movs	r0, #5
   d4d78:	f003 f873 	bl	d7e62 <digitalWrite>
    if(transitionCount>1 && color != 1){
   d4d7c:	883b      	ldrh	r3, [r7, #0]
   d4d7e:	4f44      	ldr	r7, [pc, #272]	; (d4e90 <loop+0x2f0>)
   d4d80:	2b01      	cmp	r3, #1
   d4d82:	d906      	bls.n	d4d92 <loop+0x1f2>
   d4d84:	883b      	ldrh	r3, [r7, #0]
   d4d86:	2b01      	cmp	r3, #1
   d4d88:	d003      	beq.n	d4d92 <loop+0x1f2>
      Blynk.notify("Hey, got a push notification!"); // sends notification to Blynk app
   d4d8a:	4942      	ldr	r1, [pc, #264]	; (d4e94 <loop+0x2f4>)
   d4d8c:	4833      	ldr	r0, [pc, #204]	; (d4e5c <loop+0x2bc>)
   d4d8e:	f7ff fee9 	bl	d4b64 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA30_cEEvRKT_>
    color = 1; // blue
   d4d92:	2301      	movs	r3, #1
   d4d94:	803b      	strh	r3, [r7, #0]
  if(ambientValue > (lowSet) && ambientValue<highSet)
   d4d96:	8823      	ldrh	r3, [r4, #0]
   d4d98:	42b3      	cmp	r3, r6
   d4d9a:	d3ba      	bcc.n	d4d12 <loop+0x172>
  }
  //green ambientValue higher than hughB set
  if(ambientValue > (highSet))
   d4d9c:	882b      	ldrh	r3, [r5, #0]
   d4d9e:	42b3      	cmp	r3, r6
   d4da0:	d21c      	bcs.n	d4ddc <loop+0x23c>
  {
    transitionCount++;
   d4da2:	4e3a      	ldr	r6, [pc, #232]	; (d4e8c <loop+0x2ec>)
   d4da4:	8833      	ldrh	r3, [r6, #0]
    digitalWrite(D5, HIGH);
   d4da6:	2101      	movs	r1, #1
    transitionCount++;
   d4da8:	3301      	adds	r3, #1
    digitalWrite(D5, HIGH);
   d4daa:	2005      	movs	r0, #5
    transitionCount++;
   d4dac:	8033      	strh	r3, [r6, #0]
    digitalWrite(D5, HIGH);
   d4dae:	f003 f858 	bl	d7e62 <digitalWrite>
    digitalWrite(D6, LOW);
   d4db2:	2100      	movs	r1, #0
   d4db4:	2006      	movs	r0, #6
   d4db6:	f003 f854 	bl	d7e62 <digitalWrite>
    digitalWrite(D7, LOW);
   d4dba:	2100      	movs	r1, #0
   d4dbc:	2007      	movs	r0, #7
   d4dbe:	f003 f850 	bl	d7e62 <digitalWrite>
    
    //notify transition
    if(transitionCount>1 && color != 3){
   d4dc2:	8833      	ldrh	r3, [r6, #0]
   d4dc4:	4e32      	ldr	r6, [pc, #200]	; (d4e90 <loop+0x2f0>)
   d4dc6:	2b01      	cmp	r3, #1
   d4dc8:	d906      	bls.n	d4dd8 <loop+0x238>
   d4dca:	8833      	ldrh	r3, [r6, #0]
   d4dcc:	2b03      	cmp	r3, #3
   d4dce:	d003      	beq.n	d4dd8 <loop+0x238>
      Blynk.notify("Hey, got a push notification!"); // sends notification to Blynk app
   d4dd0:	4930      	ldr	r1, [pc, #192]	; (d4e94 <loop+0x2f4>)
   d4dd2:	4822      	ldr	r0, [pc, #136]	; (d4e5c <loop+0x2bc>)
   d4dd4:	f7ff fec6 	bl	d4b64 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA30_cEEvRKT_>
    }
    color = 3; // green
   d4dd8:	2303      	movs	r3, #3
   d4dda:	8033      	strh	r3, [r6, #0]
  }
  // if button c is pressed, find light level
  if(display.pressedC()) {
   d4ddc:	481e      	ldr	r0, [pc, #120]	; (d4e58 <loop+0x2b8>)
   d4dde:	f000 fd51 	bl	d5884 <_ZN16OledWingAdafruit8pressedCEv>
   d4de2:	b190      	cbz	r0, d4e0a <loop+0x26a>
    display.clearDisplay();
   d4de4:	481c      	ldr	r0, [pc, #112]	; (d4e58 <loop+0x2b8>)
   d4de6:	f001 f87b 	bl	d5ee0 <_ZN16Adafruit_SSD130612clearDisplayEv>

    display.print("High Level: ");
   d4dea:	492b      	ldr	r1, [pc, #172]	; (d4e98 <loop+0x2f8>)
   d4dec:	481a      	ldr	r0, [pc, #104]	; (d4e58 <loop+0x2b8>)
   d4dee:	f001 ffdb 	bl	d6da8 <_ZN5Print5printEPKc>
    display.println(highSet);
   d4df2:	8829      	ldrh	r1, [r5, #0]
   d4df4:	4818      	ldr	r0, [pc, #96]	; (d4e58 <loop+0x2b8>)
   d4df6:	220a      	movs	r2, #10
   d4df8:	f7ff f9e2 	bl	d41c0 <_ZN5Print7printlnItLi0EEEjT_i>
    display.display(); 
   d4dfc:	4816      	ldr	r0, [pc, #88]	; (d4e58 <loop+0x2b8>)
   d4dfe:	f001 fadb 	bl	d63b8 <_ZN16Adafruit_SSD13067displayEv>
    delay(5000);
   d4e02:	f241 3088 	movw	r0, #5000	; 0x1388
   d4e06:	f002 f945 	bl	d7094 <delay>
  }
  
  // if button a is pressed, find light level
  if (display.pressedA()) {
   d4e0a:	4813      	ldr	r0, [pc, #76]	; (d4e58 <loop+0x2b8>)
   d4e0c:	f000 fd30 	bl	d5870 <_ZN16OledWingAdafruit8pressedAEv>
   d4e10:	b1b0      	cbz	r0, d4e40 <loop+0x2a0>
    display.clearDisplay();
   d4e12:	4811      	ldr	r0, [pc, #68]	; (d4e58 <loop+0x2b8>)
   d4e14:	f001 f864 	bl	d5ee0 <_ZN16Adafruit_SSD130612clearDisplayEv>

    display.print("Low Level: ");
   d4e18:	4920      	ldr	r1, [pc, #128]	; (d4e9c <loop+0x2fc>)
   d4e1a:	480f      	ldr	r0, [pc, #60]	; (d4e58 <loop+0x2b8>)
   d4e1c:	f001 ffc4 	bl	d6da8 <_ZN5Print5printEPKc>
    display.println(lowSet);
   d4e20:	8821      	ldrh	r1, [r4, #0]
   d4e22:	480d      	ldr	r0, [pc, #52]	; (d4e58 <loop+0x2b8>)
   d4e24:	220a      	movs	r2, #10
   d4e26:	f7ff f9cb 	bl	d41c0 <_ZN5Print7printlnItLi0EEEjT_i>
    display.display(); 
   d4e2a:	480b      	ldr	r0, [pc, #44]	; (d4e58 <loop+0x2b8>)
   d4e2c:	f001 fac4 	bl	d63b8 <_ZN16Adafruit_SSD13067displayEv>
    delay(5000);
  }
  
  
   d4e30:	ecbd 8b04 	vpop	{d8-d9}
    delay(5000);
   d4e34:	f241 3088 	movw	r0, #5000	; 0x1388
   d4e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    delay(5000);
   d4e3c:	f002 b92a 	b.w	d7094 <delay>
   d4e40:	ecbd 8b04 	vpop	{d8-d9}
   d4e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4e48:	66666666 	.word	0x66666666
   d4e4c:	400a6666 	.word	0x400a6666
   d4e50:	00000000 	.word	0x00000000
   d4e54:	40affe00 	.word	0x40affe00
   d4e58:	2003e5c8 	.word	0x2003e5c8
   d4e5c:	2003e568 	.word	0x2003e568
   d4e60:	2003e4f8 	.word	0x2003e4f8
   d4e64:	3fe00000 	.word	0x3fe00000
   d4e68:	40590000 	.word	0x40590000
   d4e6c:	000d8d9e 	.word	0x000d8d9e
   d4e70:	2003e638 	.word	0x2003e638
   d4e74:	40220000 	.word	0x40220000
   d4e78:	40140000 	.word	0x40140000
   d4e7c:	40400000 	.word	0x40400000
   d4e80:	000d8da1 	.word	0x000d8da1
   d4e84:	2003e63a 	.word	0x2003e63a
   d4e88:	2003e63c 	.word	0x2003e63c
   d4e8c:	2003e640 	.word	0x2003e640
   d4e90:	2003e5c4 	.word	0x2003e5c4
   d4e94:	000d8da4 	.word	0x000d8da4
   d4e98:	000d8dc2 	.word	0x000d8dc2
   d4e9c:	000d8dcf 	.word	0x000d8dcf

000d4ea0 <_GLOBAL__sub_I_Blynk>:
   d4ea0:	b538      	push	{r3, r4, r5, lr}
        : domain(NULL), port(0)
   d4ea2:	4d16      	ldr	r5, [pc, #88]	; (d4efc <_GLOBAL__sub_I_Blynk+0x5c>)
SYSTEM_THREAD(ENABLED);
   d4ea4:	2100      	movs	r1, #0
   d4ea6:	2001      	movs	r0, #1
   d4ea8:	f001 fd4c 	bl	d6944 <system_thread_set_state>
   d4eac:	4628      	mov	r0, r5
   d4eae:	f002 fe09 	bl	d7ac4 <_ZN9TCPClientC1Ev>
   d4eb2:	f105 001c 	add.w	r0, r5, #28
   d4eb6:	f002 f9d1 	bl	d725c <_ZN9IPAddressC1Ev>
   d4eba:	2400      	movs	r4, #0
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4ebc:	4a10      	ldr	r2, [pc, #64]	; (d4f00 <_GLOBAL__sub_I_Blynk+0x60>)
   d4ebe:	4911      	ldr	r1, [pc, #68]	; (d4f04 <_GLOBAL__sub_I_Blynk+0x64>)
   d4ec0:	636c      	str	r4, [r5, #52]	; 0x34
   d4ec2:	4628      	mov	r0, r5
   d4ec4:	872c      	strh	r4, [r5, #56]	; 0x38
   d4ec6:	f003 f875 	bl	d7fb4 <__aeabi_atexit>
        , state(CONNECTING)
   d4eca:	4b0f      	ldr	r3, [pc, #60]	; (d4f08 <_GLOBAL__sub_I_Blynk+0x68>)
   d4ecc:	e9c3 5400 	strd	r5, r4, [r3]
   d4ed0:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4ed4:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4ed8:	619c      	str	r4, [r3, #24]
   d4eda:	839c      	strh	r4, [r3, #28]
OledWingAdafruit display;
   d4edc:	4c0b      	ldr	r4, [pc, #44]	; (d4f0c <_GLOBAL__sub_I_Blynk+0x6c>)
   d4ede:	2107      	movs	r1, #7
   d4ee0:	4620      	mov	r0, r4
   d4ee2:	f000 fc55 	bl	d5790 <_ZN16OledWingAdafruitC1Ei>
   d4ee6:	4620      	mov	r0, r4
   d4ee8:	4a05      	ldr	r2, [pc, #20]	; (d4f00 <_GLOBAL__sub_I_Blynk+0x60>)
   d4eea:	4909      	ldr	r1, [pc, #36]	; (d4f10 <_GLOBAL__sub_I_Blynk+0x70>)
   d4eec:	f003 f862 	bl	d7fb4 <__aeabi_atexit>
   d4ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
VCNL4040 proximitySensor;
   d4ef4:	4807      	ldr	r0, [pc, #28]	; (d4f14 <_GLOBAL__sub_I_Blynk+0x74>)
   d4ef6:	f000 bd2c 	b.w	d5952 <_ZN8VCNL4040C1Ev>
   d4efa:	bf00      	nop
   d4efc:	2003e588 	.word	0x2003e588
   d4f00:	2003e564 	.word	0x2003e564
   d4f04:	000d40f9 	.word	0x000d40f9
   d4f08:	2003e568 	.word	0x2003e568
   d4f0c:	2003e5c8 	.word	0x2003e5c8
   d4f10:	000d575d 	.word	0x000d575d
   d4f14:	2003e63c 	.word	0x2003e63c

000d4f18 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4f18:	4770      	bx	lr

000d4f1a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4f1a:	b510      	push	{r4, lr}
  }
   d4f1c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4f1e:	4604      	mov	r4, r0
  }
   d4f20:	f003 f84d 	bl	d7fbe <_ZdlPvj>
   d4f24:	4620      	mov	r0, r4
   d4f26:	bd10      	pop	{r4, pc}

000d4f28 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4f28:	b40e      	push	{r1, r2, r3}
   d4f2a:	b503      	push	{r0, r1, lr}
   d4f2c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d4f2e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4f30:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4f34:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4f36:	f002 f83e 	bl	d6fb6 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d4f3a:	b002      	add	sp, #8
   d4f3c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4f40:	b003      	add	sp, #12
   d4f42:	4770      	bx	lr

000d4f44 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4f44:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4f46:	4604      	mov	r4, r0
   d4f48:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4f4a:	7922      	ldrb	r2, [r4, #4]
   d4f4c:	68a3      	ldr	r3, [r4, #8]
   d4f4e:	b132      	cbz	r2, d4f5e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4f50:	b9a3      	cbnz	r3, d4f7c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4f52:	490b      	ldr	r1, [pc, #44]	; (d4f80 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4f54:	b002      	add	sp, #8
   d4f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4f5a:	f001 bf25 	b.w	d6da8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4f5e:	4a09      	ldr	r2, [pc, #36]	; (d4f84 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4f60:	7b26      	ldrb	r6, [r4, #12]
   d4f62:	4d09      	ldr	r5, [pc, #36]	; (d4f88 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4f64:	4909      	ldr	r1, [pc, #36]	; (d4f8c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4f66:	7b64      	ldrb	r4, [r4, #13]
   d4f68:	2e01      	cmp	r6, #1
   d4f6a:	bf18      	it	ne
   d4f6c:	4629      	movne	r1, r5
   d4f6e:	e9cd 1400 	strd	r1, r4, [sp]
   d4f72:	4907      	ldr	r1, [pc, #28]	; (d4f90 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4f74:	f7ff ffd8 	bl	d4f28 <_ZN5Print6printfEPKcz>
  }
   d4f78:	b002      	add	sp, #8
   d4f7a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4f7c:	4a05      	ldr	r2, [pc, #20]	; (d4f94 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4f7e:	e7ef      	b.n	d4f60 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4f80:	000d8e3f 	.word	0x000d8e3f
   d4f84:	000d8dce 	.word	0x000d8dce
   d4f88:	000d8e3b 	.word	0x000d8e3b
   d4f8c:	000d8e37 	.word	0x000d8e37
   d4f90:	000d8e55 	.word	0x000d8e55
   d4f94:	000d8e2e 	.word	0x000d8e2e

000d4f98 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f9c:	b085      	sub	sp, #20
   d4f9e:	461f      	mov	r7, r3
   d4fa0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4fa4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4fa8:	eba8 0902 	sub.w	r9, r8, r2
   d4fac:	eba7 0a01 	sub.w	sl, r7, r1
   d4fb0:	f1b9 0f00 	cmp.w	r9, #0
   d4fb4:	bfb8      	it	lt
   d4fb6:	f1c9 0900 	rsblt	r9, r9, #0
   d4fba:	f1ba 0f00 	cmp.w	sl, #0
   d4fbe:	bfb8      	it	lt
   d4fc0:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4fc4:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4fc6:	4683      	mov	fp, r0
   d4fc8:	460c      	mov	r4, r1
   d4fca:	4615      	mov	r5, r2
    if (steep) {
   d4fcc:	dd04      	ble.n	d4fd8 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d4fce:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4fd0:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d4fd2:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4fd4:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d4fd6:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4fd8:	42bc      	cmp	r4, r7
   d4fda:	dd05      	ble.n	d4fe8 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4fdc:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4fde:	4645      	mov	r5, r8
   d4fe0:	4690      	mov	r8, r2
    if (x0 > x1) {
   d4fe2:	4622      	mov	r2, r4
   d4fe4:	463c      	mov	r4, r7
   d4fe6:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4fe8:	1b3e      	subs	r6, r7, r4
   d4fea:	b2b2      	uxth	r2, r6
   d4fec:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d4fee:	eba8 0205 	sub.w	r2, r8, r5
   d4ff2:	2a00      	cmp	r2, #0
   d4ff4:	bfb8      	it	lt
   d4ff6:	4252      	neglt	r2, r2
   d4ff8:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d4ffa:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d4ffe:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d5002:	4545      	cmp	r5, r8
   d5004:	bfb4      	ite	lt
   d5006:	2201      	movlt	r2, #1
   d5008:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d500c:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d500e:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d5010:	42bc      	cmp	r4, r7
   d5012:	dc1c      	bgt.n	d504e <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d5014:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d5018:	9303      	str	r3, [sp, #12]
        if (steep) {
   d501a:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d501c:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d5020:	bfc7      	ittee	gt
   d5022:	4629      	movgt	r1, r5
   d5024:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d5026:	462a      	movle	r2, r5
   d5028:	4621      	movle	r1, r4
   d502a:	4658      	mov	r0, fp
   d502c:	47c0      	blx	r8
        }
        err -= dy;
   d502e:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d5030:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d5032:	1ab6      	subs	r6, r6, r2
   d5034:	b2b1      	uxth	r1, r6
   d5036:	b236      	sxth	r6, r6
        if (err < 0) {
   d5038:	2e00      	cmp	r6, #0
   d503a:	da05      	bge.n	d5048 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d503c:	9a02      	ldr	r2, [sp, #8]
   d503e:	4415      	add	r5, r2
            err += dx;
   d5040:	9a00      	ldr	r2, [sp, #0]
   d5042:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d5044:	b22d      	sxth	r5, r5
            err += dx;
   d5046:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d5048:	3401      	adds	r4, #1
   d504a:	b224      	sxth	r4, r4
   d504c:	e7e0      	b.n	d5010 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d504e:	b005      	add	sp, #20
   d5050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5054 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d5054:	4770      	bx	lr

000d5056 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d5056:	b410      	push	{r4}
    drawPixel(x, y, color);
   d5058:	6804      	ldr	r4, [r0, #0]
   d505a:	6924      	ldr	r4, [r4, #16]
   d505c:	46a4      	mov	ip, r4
}
   d505e:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d5062:	4760      	bx	ip

000d5064 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d5064:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d5066:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d5068:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d506c:	9502      	str	r5, [sp, #8]
   d506e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d5070:	46a4      	mov	ip, r4
}
   d5072:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d5074:	4760      	bx	ip

000d5076 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d5076:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d5078:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d507a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d507e:	9502      	str	r5, [sp, #8]
   d5080:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d5082:	46a4      	mov	ip, r4
}
   d5084:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d5086:	4760      	bx	ip

000d5088 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5088:	b470      	push	{r4, r5, r6}
   d508a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d508e:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d5092:	6804      	ldr	r4, [r0, #0]
   d5094:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d5098:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d509a:	46a4      	mov	ip, r4
}
   d509c:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d509e:	4760      	bx	ip

000d50a0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d50a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d50a4:	461c      	mov	r4, r3
    startWrite();
   d50a6:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d50a8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d50ac:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d50ae:	4605      	mov	r5, r0
   d50b0:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d50b2:	3c01      	subs	r4, #1
   d50b4:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d50b6:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d50b8:	b224      	sxth	r4, r4
    startWrite();
   d50ba:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d50bc:	682b      	ldr	r3, [r5, #0]
   d50be:	f8cd 8004 	str.w	r8, [sp, #4]
   d50c2:	9400      	str	r4, [sp, #0]
   d50c4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d50c6:	4628      	mov	r0, r5
   d50c8:	463b      	mov	r3, r7
   d50ca:	4632      	mov	r2, r6
   d50cc:	4639      	mov	r1, r7
   d50ce:	47a0      	blx	r4
    endWrite();
   d50d0:	682b      	ldr	r3, [r5, #0]
   d50d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50d4:	4628      	mov	r0, r5
}
   d50d6:	b002      	add	sp, #8
   d50d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d50dc:	4718      	bx	r3

000d50de <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d50de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d50e2:	461d      	mov	r5, r3
    startWrite();
   d50e4:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d50e6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d50ea:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d50ec:	4604      	mov	r4, r0
   d50ee:	4617      	mov	r7, r2
   d50f0:	460e      	mov	r6, r1
    startWrite();
   d50f2:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d50f4:	e9cd 7800 	strd	r7, r8, [sp]
   d50f8:	6822      	ldr	r2, [r4, #0]
   d50fa:	1e6b      	subs	r3, r5, #1
   d50fc:	4433      	add	r3, r6
   d50fe:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d5100:	4620      	mov	r0, r4
   d5102:	b21b      	sxth	r3, r3
   d5104:	463a      	mov	r2, r7
   d5106:	4631      	mov	r1, r6
   d5108:	47a8      	blx	r5
    endWrite();
   d510a:	6823      	ldr	r3, [r4, #0]
   d510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d510e:	4620      	mov	r0, r4
}
   d5110:	b002      	add	sp, #8
   d5112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d5116:	4718      	bx	r3

000d5118 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5118:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d511c:	461e      	mov	r6, r3
    startWrite();
   d511e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d5120:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d5124:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d5126:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d512a:	460c      	mov	r4, r1
   d512c:	4605      	mov	r5, r0
   d512e:	4617      	mov	r7, r2
    startWrite();
   d5130:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d5132:	4426      	add	r6, r4
   d5134:	42b4      	cmp	r4, r6
   d5136:	682b      	ldr	r3, [r5, #0]
   d5138:	da0b      	bge.n	d5152 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d513a:	f8cd 8000 	str.w	r8, [sp]
   d513e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d5142:	4621      	mov	r1, r4
   d5144:	464b      	mov	r3, r9
   d5146:	463a      	mov	r2, r7
   d5148:	4628      	mov	r0, r5
   d514a:	3401      	adds	r4, #1
   d514c:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d514e:	b224      	sxth	r4, r4
   d5150:	e7f0      	b.n	d5134 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d5152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5154:	4628      	mov	r0, r5
}
   d5156:	b002      	add	sp, #8
   d5158:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d515c:	4718      	bx	r3

000d515e <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d515e:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d5160:	6802      	ldr	r2, [r0, #0]
   d5162:	9101      	str	r1, [sp, #4]
   d5164:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d5168:	9100      	str	r1, [sp, #0]
   d516a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d516c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5170:	2200      	movs	r2, #0
   d5172:	4611      	mov	r1, r2
   d5174:	47a0      	blx	r4
}
   d5176:	b002      	add	sp, #8
   d5178:	bd10      	pop	{r4, pc}

000d517a <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d517a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d517e:	461d      	mov	r5, r3
    startWrite();
   d5180:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d5182:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d5186:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d5188:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d518c:	4604      	mov	r4, r0
   d518e:	460f      	mov	r7, r1
   d5190:	4616      	mov	r6, r2
    startWrite();
   d5192:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d5194:	6823      	ldr	r3, [r4, #0]
   d5196:	f8cd 8000 	str.w	r8, [sp]
   d519a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d519e:	4632      	mov	r2, r6
   d51a0:	462b      	mov	r3, r5
   d51a2:	4639      	mov	r1, r7
   d51a4:	4620      	mov	r0, r4
   d51a6:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d51a8:	6823      	ldr	r3, [r4, #0]
   d51aa:	f8cd 8000 	str.w	r8, [sp]
   d51ae:	f109 32ff 	add.w	r2, r9, #4294967295
   d51b2:	4432      	add	r2, r6
   d51b4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d51b8:	4639      	mov	r1, r7
   d51ba:	462b      	mov	r3, r5
   d51bc:	4620      	mov	r0, r4
   d51be:	b212      	sxth	r2, r2
   d51c0:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d51c2:	6823      	ldr	r3, [r4, #0]
   d51c4:	f8cd 8000 	str.w	r8, [sp]
   d51c8:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d51cc:	4632      	mov	r2, r6
   d51ce:	464b      	mov	r3, r9
   d51d0:	4639      	mov	r1, r7
   d51d2:	4620      	mov	r0, r4
   d51d4:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d51d6:	1e6b      	subs	r3, r5, #1
   d51d8:	19d9      	adds	r1, r3, r7
   d51da:	6823      	ldr	r3, [r4, #0]
   d51dc:	f8cd 8000 	str.w	r8, [sp]
   d51e0:	6a1d      	ldr	r5, [r3, #32]
   d51e2:	4620      	mov	r0, r4
   d51e4:	464b      	mov	r3, r9
   d51e6:	4632      	mov	r2, r6
   d51e8:	b209      	sxth	r1, r1
   d51ea:	47a8      	blx	r5
    endWrite();
   d51ec:	6823      	ldr	r3, [r4, #0]
   d51ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d51f0:	4620      	mov	r0, r4
}
   d51f2:	b002      	add	sp, #8
   d51f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d51f8:	4718      	bx	r3

000d51fa <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d51fa:	4770      	bx	lr

000d51fc <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d51fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d5200:	4299      	cmp	r1, r3
        uint16_t color) {
   d5202:	4616      	mov	r6, r2
   d5204:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d5208:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d520c:	6802      	ldr	r2, [r0, #0]
   d520e:	4680      	mov	r8, r0
   d5210:	460d      	mov	r5, r1
   d5212:	461c      	mov	r4, r3
    if(x0 == x1){
   d5214:	d113      	bne.n	d523e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d5216:	42be      	cmp	r6, r7
   d5218:	bfc8      	it	gt
   d521a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d521c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d5220:	bfc4      	itt	gt
   d5222:	463e      	movgt	r6, r7
   d5224:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d5226:	1c7b      	adds	r3, r7, #1
   d5228:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d522a:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d522c:	b21b      	sxth	r3, r3
   d522e:	4632      	mov	r2, r6
   d5230:	4629      	mov	r1, r5
   d5232:	4640      	mov	r0, r8
   d5234:	46a4      	mov	ip, r4
}
   d5236:	b003      	add	sp, #12
   d5238:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d523c:	4760      	bx	ip
    } else if(y0 == y1){
   d523e:	42be      	cmp	r6, r7
   d5240:	d10a      	bne.n	d5258 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d5242:	4299      	cmp	r1, r3
   d5244:	bfc2      	ittt	gt
   d5246:	460b      	movgt	r3, r1
   d5248:	4625      	movgt	r5, r4
   d524a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d524c:	1c63      	adds	r3, r4, #1
   d524e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d5252:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d5254:	1b5b      	subs	r3, r3, r5
   d5256:	e7e9      	b.n	d522c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d5258:	6953      	ldr	r3, [r2, #20]
   d525a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d525c:	e9cd 7900 	strd	r7, r9, [sp]
   d5260:	f8d8 3000 	ldr.w	r3, [r8]
   d5264:	4640      	mov	r0, r8
   d5266:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5268:	4632      	mov	r2, r6
   d526a:	4623      	mov	r3, r4
   d526c:	4629      	mov	r1, r5
   d526e:	47b8      	blx	r7
        endWrite();
   d5270:	f8d8 3000 	ldr.w	r3, [r8]
   d5274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5276:	4640      	mov	r0, r8
}
   d5278:	b003      	add	sp, #12
   d527a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d527e:	4718      	bx	r3

000d5280 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d5280:	f001 0303 	and.w	r3, r1, #3
   d5284:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d5288:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d528a:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d528c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5290:	bf59      	ittee	pl
   d5292:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d5294:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d5296:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d5298:	81c3      	strhmi	r3, [r0, #14]
}
   d529a:	4770      	bx	lr

000d529c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d529c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d529e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d52a0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d52a2:	4a07      	ldr	r2, [pc, #28]	; (d52c0 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d52a4:	4d07      	ldr	r5, [pc, #28]	; (d52c4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d52a6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d52a8:	2400      	movs	r4, #0
    _width    = WIDTH;
   d52aa:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d52ac:	f04f 31ff 	mov.w	r1, #4294967295
   d52b0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d52b4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d52b6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d52b8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d52ba:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d52bc:	6204      	str	r4, [r0, #32]
}
   d52be:	bd30      	pop	{r4, r5, pc}
   d52c0:	01000101 	.word	0x01000101
   d52c4:	000d937c 	.word	0x000d937c

000d52c8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d52c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d52cc:	b089      	sub	sp, #36	; 0x24
   d52ce:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d52d2:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d52d4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d52d8:	9304      	str	r3, [sp, #16]
   d52da:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d52de:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d52e0:	9305      	str	r3, [sp, #20]
   d52e2:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d52e6:	4604      	mov	r4, r0
    startWrite();
   d52e8:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d52ea:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d52ee:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d52f2:	bf48      	it	mi
   d52f4:	f108 020e 	addmi.w	r2, r8, #14
   d52f8:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d52fc:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d52fe:	4635      	mov	r5, r6
   d5300:	9b03      	ldr	r3, [sp, #12]
   d5302:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d5304:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d5308:	189a      	adds	r2, r3, r2
   d530a:	9b05      	ldr	r3, [sp, #20]
   d530c:	428b      	cmp	r3, r1
   d530e:	b212      	sxth	r2, r2
   d5310:	dd27      	ble.n	d5362 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5312:	9b04      	ldr	r3, [sp, #16]
   d5314:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d5316:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d531a:	9306      	str	r3, [sp, #24]
   d531c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d5320:	4580      	cmp	r8, r0
   d5322:	fa1f f189 	uxth.w	r1, r9
   d5326:	dd17      	ble.n	d5358 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d5328:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d532a:	bf05      	ittet	eq
   d532c:	9b06      	ldreq	r3, [sp, #24]
   d532e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d5330:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5332:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d5334:	bf18      	it	ne
   d5336:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d5338:	062b      	lsls	r3, r5, #24
   d533a:	d50a      	bpl.n	d5352 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d533c:	9b02      	ldr	r3, [sp, #8]
   d533e:	6820      	ldr	r0, [r4, #0]
   d5340:	9207      	str	r2, [sp, #28]
   d5342:	4419      	add	r1, r3
   d5344:	6983      	ldr	r3, [r0, #24]
   d5346:	b209      	sxth	r1, r1
   d5348:	461f      	mov	r7, r3
   d534a:	4620      	mov	r0, r4
   d534c:	4653      	mov	r3, sl
   d534e:	47b8      	blx	r7
   d5350:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d5352:	f109 0901 	add.w	r9, r9, #1
   d5356:	e7e1      	b.n	d531c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d5358:	9b01      	ldr	r3, [sp, #4]
   d535a:	3301      	adds	r3, #1
   d535c:	9301      	str	r3, [sp, #4]
   d535e:	445e      	add	r6, fp
   d5360:	e7ce      	b.n	d5300 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d5362:	6823      	ldr	r3, [r4, #0]
   d5364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5366:	4620      	mov	r0, r4
}
   d5368:	b009      	add	sp, #36	; 0x24
   d536a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d536e:	4718      	bx	r3

000d5370 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d5370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5374:	ed2d 8b02 	vpush	{d8}
   d5378:	b091      	sub	sp, #68	; 0x44
   d537a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d537c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d537e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d5382:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d5386:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d538a:	9103      	str	r1, [sp, #12]
   d538c:	461f      	mov	r7, r3
   d538e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d5392:	9304      	str	r3, [sp, #16]
   d5394:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d5396:	2a00      	cmp	r2, #0
   d5398:	f040 80c5 	bne.w	d5526 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d539c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d53a0:	428b      	cmp	r3, r1
   d53a2:	f340 814c 	ble.w	d563e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d53a6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d53aa:	42b3      	cmp	r3, r6
   d53ac:	f340 8147 	ble.w	d563e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d53b0:	2306      	movs	r3, #6
   d53b2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d53b6:	2b00      	cmp	r3, #0
   d53b8:	f340 8141 	ble.w	d563e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d53bc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d53c0:	2b00      	cmp	r3, #0
   d53c2:	f340 813c 	ble.w	d563e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d53c6:	7f03      	ldrb	r3, [r0, #28]
   d53c8:	b91b      	cbnz	r3, d53d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d53ca:	2faf      	cmp	r7, #175	; 0xaf
   d53cc:	bf84      	itt	hi
   d53ce:	3701      	addhi	r7, #1
   d53d0:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d53d2:	f8db 3000 	ldr.w	r3, [fp]
   d53d6:	4658      	mov	r0, fp
   d53d8:	695b      	ldr	r3, [r3, #20]
   d53da:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d53dc:	2205      	movs	r2, #5
   d53de:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d53e0:	2200      	movs	r2, #0
   d53e2:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d53e4:	4a98      	ldr	r2, [pc, #608]	; (d5648 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d53e6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d53ea:	18d3      	adds	r3, r2, r3
   d53ec:	930c      	str	r3, [sp, #48]	; 0x30
   d53ee:	b2b3      	uxth	r3, r6
   d53f0:	9306      	str	r3, [sp, #24]
   d53f2:	9a05      	ldr	r2, [sp, #20]
   d53f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d53f6:	5c9b      	ldrb	r3, [r3, r2]
   d53f8:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d53fa:	b2ab      	uxth	r3, r5
   d53fc:	930b      	str	r3, [sp, #44]	; 0x2c
   d53fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d5402:	9308      	str	r3, [sp, #32]
   d5404:	9b03      	ldr	r3, [sp, #12]
   d5406:	fb02 f905 	mul.w	r9, r2, r5
   d540a:	fa19 f983 	uxtah	r9, r9, r3
   d540e:	fa0f f389 	sxth.w	r3, r9
   d5412:	ee08 3a10 	vmov	s16, r3
   d5416:	2308      	movs	r3, #8
   d5418:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d541a:	9b03      	ldr	r3, [sp, #12]
   d541c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5420:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d5424:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d5428:	9a07      	ldr	r2, [sp, #28]
   d542a:	f8db 3000 	ldr.w	r3, [fp]
   d542e:	07d2      	lsls	r2, r2, #31
   d5430:	d552      	bpl.n	d54d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d5432:	2d01      	cmp	r5, #1
   d5434:	fa1f f289 	uxth.w	r2, r9
   d5438:	d13e      	bne.n	d54b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d543a:	2c01      	cmp	r4, #1
   d543c:	d13c      	bne.n	d54b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d543e:	699b      	ldr	r3, [r3, #24]
   d5440:	9906      	ldr	r1, [sp, #24]
   d5442:	461f      	mov	r7, r3
   d5444:	9b04      	ldr	r3, [sp, #16]
   d5446:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d5448:	b212      	sxth	r2, r2
   d544a:	4651      	mov	r1, sl
   d544c:	4658      	mov	r0, fp
   d544e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5450:	f109 0301 	add.w	r3, r9, #1
   d5454:	fa4f f983 	sxtb.w	r9, r3
   d5458:	9b07      	ldr	r3, [sp, #28]
   d545a:	085b      	lsrs	r3, r3, #1
   d545c:	9307      	str	r3, [sp, #28]
   d545e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5460:	3b01      	subs	r3, #1
   d5462:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5466:	930a      	str	r3, [sp, #40]	; 0x28
   d5468:	d1de      	bne.n	d5428 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d546a:	9f05      	ldr	r7, [sp, #20]
   d546c:	3701      	adds	r7, #1
   d546e:	b27b      	sxtb	r3, r7
   d5470:	9305      	str	r3, [sp, #20]
   d5472:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5474:	3b01      	subs	r3, #1
   d5476:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d547a:	9309      	str	r3, [sp, #36]	; 0x24
   d547c:	d1b9      	bne.n	d53f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d547e:	9b04      	ldr	r3, [sp, #16]
   d5480:	4543      	cmp	r3, r8
   d5482:	d00f      	beq.n	d54a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d5484:	2d01      	cmp	r5, #1
   d5486:	f8db 3000 	ldr.w	r3, [fp]
   d548a:	d13b      	bne.n	d5504 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d548c:	2c01      	cmp	r4, #1
   d548e:	d139      	bne.n	d5504 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d5490:	9908      	ldr	r1, [sp, #32]
   d5492:	f8cd 8000 	str.w	r8, [sp]
   d5496:	3105      	adds	r1, #5
   d5498:	6a1c      	ldr	r4, [r3, #32]
   d549a:	4632      	mov	r2, r6
   d549c:	2308      	movs	r3, #8
   d549e:	b209      	sxth	r1, r1
   d54a0:	4658      	mov	r0, fp
   d54a2:	47a0      	blx	r4
        endWrite();
   d54a4:	f8db 3000 	ldr.w	r3, [fp]
   d54a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54aa:	4658      	mov	r0, fp
}
   d54ac:	b011      	add	sp, #68	; 0x44
   d54ae:	ecbd 8b02 	vpop	{d8}
   d54b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d54b6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d54b8:	9906      	ldr	r1, [sp, #24]
   d54ba:	fb14 f202 	smulbb	r2, r4, r2
   d54be:	440a      	add	r2, r1
   d54c0:	9904      	ldr	r1, [sp, #16]
   d54c2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d54c4:	9400      	str	r4, [sp, #0]
   d54c6:	69db      	ldr	r3, [r3, #28]
   d54c8:	ee18 1a10 	vmov	r1, s16
   d54cc:	461f      	mov	r7, r3
   d54ce:	b212      	sxth	r2, r2
   d54d0:	462b      	mov	r3, r5
   d54d2:	4658      	mov	r0, fp
   d54d4:	47b8      	blx	r7
   d54d6:	e7bb      	b.n	d5450 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d54d8:	9a04      	ldr	r2, [sp, #16]
   d54da:	4542      	cmp	r2, r8
   d54dc:	d0b8      	beq.n	d5450 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d54de:	2d01      	cmp	r5, #1
   d54e0:	fa1f f289 	uxth.w	r2, r9
   d54e4:	d107      	bne.n	d54f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d54e6:	2c01      	cmp	r4, #1
   d54e8:	d105      	bne.n	d54f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d54ea:	699b      	ldr	r3, [r3, #24]
   d54ec:	9906      	ldr	r1, [sp, #24]
   d54ee:	461f      	mov	r7, r3
   d54f0:	440a      	add	r2, r1
   d54f2:	4643      	mov	r3, r8
   d54f4:	e7a8      	b.n	d5448 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d54f6:	9906      	ldr	r1, [sp, #24]
   d54f8:	f8cd 8004 	str.w	r8, [sp, #4]
   d54fc:	fb14 f202 	smulbb	r2, r4, r2
   d5500:	440a      	add	r2, r1
   d5502:	e7df      	b.n	d54c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d5504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d5506:	f8cd 8004 	str.w	r8, [sp, #4]
   d550a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d550e:	9a08      	ldr	r2, [sp, #32]
   d5510:	00e4      	lsls	r4, r4, #3
   d5512:	440a      	add	r2, r1
   d5514:	4611      	mov	r1, r2
   d5516:	9400      	str	r4, [sp, #0]
   d5518:	69dc      	ldr	r4, [r3, #28]
   d551a:	4632      	mov	r2, r6
   d551c:	462b      	mov	r3, r5
   d551e:	b209      	sxth	r1, r1
   d5520:	4658      	mov	r0, fp
   d5522:	47a0      	blx	r4
        endWrite();
   d5524:	e7be      	b.n	d54a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d5526:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d5528:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d552a:	6812      	ldr	r2, [r2, #0]
   d552c:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d552e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d5530:	b2ff      	uxtb	r7, r7
   d5532:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d5536:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d553a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d553c:	789a      	ldrb	r2, [r3, #2]
   d553e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d5540:	78da      	ldrb	r2, [r3, #3]
   d5542:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d5544:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d5546:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d554a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d554e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d5550:	d801      	bhi.n	d5556 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d5552:	2c01      	cmp	r4, #1
   d5554:	d957      	bls.n	d5606 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d5556:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d555a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d555c:	fa0f f38a 	sxth.w	r3, sl
   d5560:	9307      	str	r3, [sp, #28]
        startWrite();
   d5562:	f8db 3000 	ldr.w	r3, [fp]
   d5566:	4658      	mov	r0, fp
   d5568:	695b      	ldr	r3, [r3, #20]
   d556a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d556c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d556e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5572:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5574:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5578:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d557a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d557c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d557e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5580:	429f      	cmp	r7, r3
   d5582:	d28f      	bcs.n	d54a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5584:	9b07      	ldr	r3, [sp, #28]
   d5586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d5588:	443b      	add	r3, r7
   d558a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d558e:	2200      	movs	r2, #0
   d5590:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5592:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5594:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5596:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d559a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d559e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d55a2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d55a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d55a6:	9905      	ldr	r1, [sp, #20]
   d55a8:	4291      	cmp	r1, r2
   d55aa:	d241      	bcs.n	d5630 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d55ac:	1c5a      	adds	r2, r3, #1
   d55ae:	b2d2      	uxtb	r2, r2
   d55b0:	075b      	lsls	r3, r3, #29
   d55b2:	920c      	str	r2, [sp, #48]	; 0x30
   d55b4:	d107      	bne.n	d55c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d55b6:	9b06      	ldr	r3, [sp, #24]
   d55b8:	9906      	ldr	r1, [sp, #24]
   d55ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d55bc:	3301      	adds	r3, #1
   d55be:	b29b      	uxth	r3, r3
   d55c0:	f812 9001 	ldrb.w	r9, [r2, r1]
   d55c4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d55c6:	f019 0f80 	tst.w	r9, #128	; 0x80
   d55ca:	d012      	beq.n	d55f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d55cc:	2d01      	cmp	r5, #1
   d55ce:	f8db 3000 	ldr.w	r3, [fp]
   d55d2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d55d6:	d11a      	bne.n	d560e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d55d8:	2c01      	cmp	r4, #1
   d55da:	d118      	bne.n	d560e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d55dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d55de:	699b      	ldr	r3, [r3, #24]
   d55e0:	4411      	add	r1, r2
   d55e2:	9a05      	ldr	r2, [sp, #20]
   d55e4:	4411      	add	r1, r2
   d55e6:	461e      	mov	r6, r3
   d55e8:	4652      	mov	r2, sl
   d55ea:	9b04      	ldr	r3, [sp, #16]
   d55ec:	b209      	sxth	r1, r1
   d55ee:	4658      	mov	r0, fp
   d55f0:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d55f2:	9e05      	ldr	r6, [sp, #20]
   d55f4:	3601      	adds	r6, #1
   d55f6:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d55f8:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d55fc:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d55fe:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d5602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d5604:	e7ce      	b.n	d55a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d5606:	2300      	movs	r3, #0
   d5608:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d560c:	e7a9      	b.n	d5562 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d560e:	9805      	ldr	r0, [sp, #20]
   d5610:	9a08      	ldr	r2, [sp, #32]
   d5612:	4402      	add	r2, r0
   d5614:	fb02 1105 	mla	r1, r2, r5, r1
   d5618:	9a04      	ldr	r2, [sp, #16]
   d561a:	e9cd 4200 	strd	r4, r2, [sp]
   d561e:	69db      	ldr	r3, [r3, #28]
   d5620:	ee18 2a10 	vmov	r2, s16
   d5624:	461e      	mov	r6, r3
   d5626:	b209      	sxth	r1, r1
   d5628:	462b      	mov	r3, r5
   d562a:	4658      	mov	r0, fp
   d562c:	47b0      	blx	r6
   d562e:	e7e0      	b.n	d55f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d5630:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d5632:	3701      	adds	r7, #1
   d5634:	4498      	add	r8, r3
   d5636:	fa5f f888 	uxtb.w	r8, r8
   d563a:	b2ff      	uxtb	r7, r7
   d563c:	e79f      	b.n	d557e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d563e:	b011      	add	sp, #68	; 0x44
   d5640:	ecbd 8b02 	vpop	{d8}
   d5644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5648:	000d8e72 	.word	0x000d8e72

000d564c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d564c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d564e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d5650:	b085      	sub	sp, #20
   d5652:	4604      	mov	r4, r0
   d5654:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d5656:	2a00      	cmp	r2, #0
   d5658:	d134      	bne.n	d56c4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d565a:	290a      	cmp	r1, #10
   d565c:	d108      	bne.n	d5670 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d565e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d5660:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d5662:	7e42      	ldrb	r2, [r0, #25]
   d5664:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d5668:	8263      	strh	r3, [r4, #18]
}
   d566a:	2001      	movs	r0, #1
   d566c:	b005      	add	sp, #20
   d566e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d5670:	290d      	cmp	r1, #13
   d5672:	d0fa      	beq.n	d566a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d5674:	7ee1      	ldrb	r1, [r4, #27]
   d5676:	7e00      	ldrb	r0, [r0, #24]
   d5678:	7e65      	ldrb	r5, [r4, #25]
   d567a:	b171      	cbz	r1, d569a <_ZN12Adafruit_GFX5writeEh+0x4e>
   d567c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d5680:	2106      	movs	r1, #6
   d5682:	fb11 6100 	smlabb	r1, r1, r0, r6
   d5686:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d568a:	42b1      	cmp	r1, r6
   d568c:	bfc1      	itttt	gt
   d568e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d5692:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d5694:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d5698:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d569a:	8ae2      	ldrh	r2, [r4, #22]
   d569c:	9201      	str	r2, [sp, #4]
   d569e:	8aa2      	ldrh	r2, [r4, #20]
   d56a0:	9200      	str	r2, [sp, #0]
   d56a2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d56a6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d56aa:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d56ae:	4620      	mov	r0, r4
   d56b0:	f7ff fe5e 	bl	d5370 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d56b4:	7e23      	ldrb	r3, [r4, #24]
   d56b6:	8a22      	ldrh	r2, [r4, #16]
   d56b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d56bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d56c0:	8223      	strh	r3, [r4, #16]
   d56c2:	e7d2      	b.n	d566a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d56c4:	290a      	cmp	r1, #10
   d56c6:	d107      	bne.n	d56d8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d56c8:	2300      	movs	r3, #0
   d56ca:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d56cc:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d56ce:	7e41      	ldrb	r1, [r0, #25]
   d56d0:	8a42      	ldrh	r2, [r0, #18]
   d56d2:	fb01 2303 	mla	r3, r1, r3, r2
   d56d6:	e7c7      	b.n	d5668 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d56d8:	290d      	cmp	r1, #13
   d56da:	d0c6      	beq.n	d566a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d56dc:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d56de:	42a9      	cmp	r1, r5
   d56e0:	d3c3      	bcc.n	d566a <_ZN12Adafruit_GFX5writeEh+0x1e>
   d56e2:	7a51      	ldrb	r1, [r2, #9]
   d56e4:	4299      	cmp	r1, r3
   d56e6:	d3c0      	bcc.n	d566a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d56e8:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d56ea:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d56ec:	b2ed      	uxtb	r5, r5
   d56ee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d56f2:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d56f4:	b32f      	cbz	r7, d5742 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d56f6:	78e9      	ldrb	r1, [r5, #3]
   d56f8:	b319      	cbz	r1, d5742 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d56fa:	7ee1      	ldrb	r1, [r4, #27]
   d56fc:	7e00      	ldrb	r0, [r0, #24]
   d56fe:	7e66      	ldrb	r6, [r4, #25]
   d5700:	b191      	cbz	r1, d5728 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d5702:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d5706:	4439      	add	r1, r7
   d5708:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d570c:	fb00 7101 	mla	r1, r0, r1, r7
   d5710:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d5714:	42b9      	cmp	r1, r7
   d5716:	dd07      	ble.n	d5728 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d5718:	2700      	movs	r7, #0
   d571a:	8227      	strh	r7, [r4, #16]
   d571c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5720:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d5722:	fb02 1206 	mla	r2, r2, r6, r1
   d5726:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d5728:	8ae2      	ldrh	r2, [r4, #22]
   d572a:	9201      	str	r2, [sp, #4]
   d572c:	8aa2      	ldrh	r2, [r4, #20]
   d572e:	9200      	str	r2, [sp, #0]
   d5730:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d5734:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d5738:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d573c:	4620      	mov	r0, r4
   d573e:	f7ff fe17 	bl	d5370 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d5742:	7929      	ldrb	r1, [r5, #4]
   d5744:	7e23      	ldrb	r3, [r4, #24]
   d5746:	8a22      	ldrh	r2, [r4, #16]
   d5748:	fb01 2303 	mla	r3, r1, r3, r2
   d574c:	e7b8      	b.n	d56c0 <_ZN12Adafruit_GFX5writeEh+0x74>

000d574e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d574e:	2901      	cmp	r1, #1
   d5750:	bf38      	it	cc
   d5752:	2101      	movcc	r1, #1
   d5754:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d5756:	7641      	strb	r1, [r0, #25]
}
   d5758:	4770      	bx	lr
	...

000d575c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d575c:	b510      	push	{r4, lr}
   d575e:	4b06      	ldr	r3, [pc, #24]	; (d5778 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d5760:	6003      	str	r3, [r0, #0]
   d5762:	4604      	mov	r4, r0
	if (mutex) {
   d5764:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d5766:	b108      	cbz	r0, d576c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d5768:	f000 ff54 	bl	d6614 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d576c:	4620      	mov	r0, r4
   d576e:	f000 fa3f 	bl	d5bf0 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d5772:	4620      	mov	r0, r4
   d5774:	bd10      	pop	{r4, pc}
   d5776:	bf00      	nop
   d5778:	000d93d4 	.word	0x000d93d4

000d577c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d577c:	b510      	push	{r4, lr}
   d577e:	4604      	mov	r4, r0
}
   d5780:	f7ff ffec 	bl	d575c <_ZN16OledWingAdafruitD1Ev>
   d5784:	4620      	mov	r0, r4
   d5786:	2170      	movs	r1, #112	; 0x70
   d5788:	f002 fc19 	bl	d7fbe <_ZdlPvj>
   d578c:	4620      	mov	r0, r4
   d578e:	bd10      	pop	{r4, pc}

000d5790 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d5790:	b530      	push	{r4, r5, lr}
   d5792:	b085      	sub	sp, #20
   d5794:	4604      	mov	r4, r0
   d5796:	460d      	mov	r5, r1
   d5798:	f002 fbe4 	bl	d7f64 <_Z19__fetch_global_Wirev>
   d579c:	4a10      	ldr	r2, [pc, #64]	; (d57e0 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d579e:	4911      	ldr	r1, [pc, #68]	; (d57e4 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d57a0:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d57a4:	f04f 32ff 	mov.w	r2, #4294967295
   d57a8:	2180      	movs	r1, #128	; 0x80
   d57aa:	4603      	mov	r3, r0
   d57ac:	9200      	str	r2, [sp, #0]
   d57ae:	4620      	mov	r0, r4
   d57b0:	2220      	movs	r2, #32
   d57b2:	f000 faa3 	bl	d5cfc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d57b6:	4b0c      	ldr	r3, [pc, #48]	; (d57e8 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d57b8:	6023      	str	r3, [r4, #0]
   d57ba:	2300      	movs	r3, #0
   d57bc:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d57c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d57c4:	f000 f868 	bl	d5898 <_ZN8DebounceC1Ev>
   d57c8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d57cc:	f000 f864 	bl	d5898 <_ZN8DebounceC1Ev>
   d57d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d57d4:	f000 f860 	bl	d5898 <_ZN8DebounceC1Ev>
}
   d57d8:	4620      	mov	r0, r4
   d57da:	b005      	add	sp, #20
   d57dc:	bd30      	pop	{r4, r5, pc}
   d57de:	bf00      	nop
   d57e0:	00061a80 	.word	0x00061a80
   d57e4:	000186a0 	.word	0x000186a0
   d57e8:	000d93d4 	.word	0x000d93d4

000d57ec <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d57ec:	b513      	push	{r0, r1, r4, lr}
   d57ee:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d57f0:	3050      	adds	r0, #80	; 0x50
   d57f2:	f000 ff07 	bl	d6604 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d57f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d57f8:	07d9      	lsls	r1, r3, #31
   d57fa:	d505      	bpl.n	d5808 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d57fc:	2202      	movs	r2, #2
   d57fe:	2104      	movs	r1, #4
   d5800:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d5804:	f000 f85c 	bl	d58c0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d5808:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d580a:	079a      	lsls	r2, r3, #30
   d580c:	d505      	bpl.n	d581a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d580e:	2200      	movs	r2, #0
   d5810:	2103      	movs	r1, #3
   d5812:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d5816:	f000 f853 	bl	d58c0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d581a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d581c:	075b      	lsls	r3, r3, #29
   d581e:	d505      	bpl.n	d582c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d5820:	2202      	movs	r2, #2
   d5822:	4611      	mov	r1, r2
   d5824:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d5828:	f000 f84a 	bl	d58c0 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d582c:	2301      	movs	r3, #1
   d582e:	9300      	str	r3, [sp, #0]
   d5830:	223c      	movs	r2, #60	; 0x3c
   d5832:	2102      	movs	r1, #2
   d5834:	4620      	mov	r0, r4
   d5836:	f000 fb61 	bl	d5efc <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d583a:	b002      	add	sp, #8
   d583c:	bd10      	pop	{r4, pc}

000d583e <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d583e:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d5840:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d5842:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d5844:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d5846:	d502      	bpl.n	d584e <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d5848:	3058      	adds	r0, #88	; 0x58
   d584a:	f000 f846 	bl	d58da <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d584e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5850:	079a      	lsls	r2, r3, #30
   d5852:	d503      	bpl.n	d585c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d5854:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d5858:	f000 f83f 	bl	d58da <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d585c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d585e:	075b      	lsls	r3, r3, #29
   d5860:	d505      	bpl.n	d586e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d5862:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d5866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d586a:	f000 b836 	b.w	d58da <_ZN8Debounce6updateEv>
}
   d586e:	bd10      	pop	{r4, pc}

000d5870 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d5870:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   d5872:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d5874:	f013 0001 	ands.w	r0, r3, #1
   d5878:	d003      	beq.n	d5882 <_ZN16OledWingAdafruit8pressedAEv+0x12>
   d587a:	f102 0058 	add.w	r0, r2, #88	; 0x58
   d587e:	f000 b85c 	b.w	d593a <_ZN8Debounce4fellEv>
}
   d5882:	4770      	bx	lr

000d5884 <_ZN16OledWingAdafruit8pressedCEv>:
bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
}

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   d5884:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   d5886:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   d5888:	f013 0004 	ands.w	r0, r3, #4
   d588c:	d003      	beq.n	d5896 <_ZN16OledWingAdafruit8pressedCEv+0x12>
   d588e:	f102 0068 	add.w	r0, r2, #104	; 0x68
   d5892:	f000 b852 	b.w	d593a <_ZN8Debounce4fellEv>
}
   d5896:	4770      	bx	lr

000d5898 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d5898:	2100      	movs	r1, #0
   d589a:	220a      	movs	r2, #10
   d589c:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d58a0:	4770      	bx	lr

000d58a2 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d58a2:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d58a4:	b510      	push	{r4, lr}
   d58a6:	4604      	mov	r4, r0
    this->pin = pin;
   d58a8:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d58aa:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d58ac:	b288      	uxth	r0, r1
   d58ae:	f002 faf1 	bl	d7e94 <digitalRead>
   d58b2:	b108      	cbz	r0, d58b8 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d58b4:	2303      	movs	r3, #3
   d58b6:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d58b8:	f000 fe9c 	bl	d65f4 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d58bc:	6020      	str	r0, [r4, #0]
#endif
}
   d58be:	bd10      	pop	{r4, pc}

000d58c0 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d58c0:	b538      	push	{r3, r4, r5, lr}
   d58c2:	460c      	mov	r4, r1
   d58c4:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d58c6:	4611      	mov	r1, r2
   d58c8:	b2a0      	uxth	r0, r4
   d58ca:	f002 fab9 	bl	d7e40 <pinMode>
  
  this->attach(pin);
   d58ce:	4621      	mov	r1, r4
   d58d0:	4628      	mov	r0, r5
}
   d58d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d58d6:	f7ff bfe4 	b.w	d58a2 <_ZN8Debounce6attachEi>

000d58da <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d58da:	b538      	push	{r3, r4, r5, lr}
   d58dc:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d58de:	79c0      	ldrb	r0, [r0, #7]
   d58e0:	f002 fad8 	bl	d7e94 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d58e4:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d58e6:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d58e8:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d58ec:	bf18      	it	ne
   d58ee:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d58f0:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d58f4:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d58f6:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d58f8:	d00a      	beq.n	d5910 <_ZN8Debounce6updateEv+0x36>
   d58fa:	f000 fe7b 	bl	d65f4 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d58fe:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d5900:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d5902:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d5906:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d5908:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d590a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d590e:	bd38      	pop	{r3, r4, r5, pc}
   d5910:	f000 fe70 	bl	d65f4 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d5914:	6823      	ldr	r3, [r4, #0]
   d5916:	1ac0      	subs	r0, r0, r3
   d5918:	88a3      	ldrh	r3, [r4, #4]
   d591a:	4298      	cmp	r0, r3
   d591c:	d3f4      	bcc.n	d5908 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d591e:	79a3      	ldrb	r3, [r4, #6]
   d5920:	f003 0301 	and.w	r3, r3, #1
   d5924:	42ab      	cmp	r3, r5
   d5926:	d0ef      	beq.n	d5908 <_ZN8Debounce6updateEv+0x2e>
   d5928:	f000 fe64 	bl	d65f4 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d592c:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d592e:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d5930:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d5934:	f043 0308 	orr.w	r3, r3, #8
   d5938:	e7e5      	b.n	d5906 <_ZN8Debounce6updateEv+0x2c>

000d593a <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   d593a:	7980      	ldrb	r0, [r0, #6]
   d593c:	f000 0009 	and.w	r0, r0, #9
   d5940:	f1a0 0308 	sub.w	r3, r0, #8
   d5944:	4258      	negs	r0, r3
   d5946:	4158      	adcs	r0, r3
   d5948:	4770      	bx	lr

000d594a <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d594a:	6803      	ldr	r3, [r0, #0]
   d594c:	b2c9      	uxtb	r1, r1
   d594e:	689b      	ldr	r3, [r3, #8]
   d5950:	4718      	bx	r3

000d5952 <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   d5952:	4770      	bx	lr

000d5954 <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   d5954:	b510      	push	{r4, lr}
   d5956:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   d5958:	2160      	movs	r1, #96	; 0x60
   d595a:	6800      	ldr	r0, [r0, #0]
   d595c:	f001 fe56 	bl	d760c <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   d5960:	6820      	ldr	r0, [r4, #0]
   d5962:	f001 fe5e 	bl	d7622 <_ZN7TwoWire15endTransmissionEv>
}
   d5966:	fab0 f080 	clz	r0, r0
   d596a:	0940      	lsrs	r0, r0, #5
   d596c:	bd10      	pop	{r4, pc}

000d596e <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   d596e:	b538      	push	{r3, r4, r5, lr}
   d5970:	4605      	mov	r5, r0
   d5972:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d5974:	6800      	ldr	r0, [r0, #0]
   d5976:	2160      	movs	r1, #96	; 0x60
   d5978:	f001 fe48 	bl	d760c <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   d597c:	6828      	ldr	r0, [r5, #0]
   d597e:	6803      	ldr	r3, [r0, #0]
   d5980:	4621      	mov	r1, r4
   d5982:	689b      	ldr	r3, [r3, #8]
   d5984:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d5986:	6828      	ldr	r0, [r5, #0]
   d5988:	2100      	movs	r1, #0
   d598a:	f001 fe46 	bl	d761a <_ZN7TwoWire15endTransmissionEh>
   d598e:	b108      	cbz	r0, d5994 <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   d5990:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   d5992:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   d5994:	6828      	ldr	r0, [r5, #0]
   d5996:	2202      	movs	r2, #2
   d5998:	2160      	movs	r1, #96	; 0x60
   d599a:	f001 fe34 	bl	d7606 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d599e:	6828      	ldr	r0, [r5, #0]
   d59a0:	6803      	ldr	r3, [r0, #0]
   d59a2:	691b      	ldr	r3, [r3, #16]
   d59a4:	4798      	blx	r3
   d59a6:	2800      	cmp	r0, #0
   d59a8:	d0f2      	beq.n	d5990 <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   d59aa:	6828      	ldr	r0, [r5, #0]
   d59ac:	6803      	ldr	r3, [r0, #0]
   d59ae:	695b      	ldr	r3, [r3, #20]
   d59b0:	4798      	blx	r3
   d59b2:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   d59b4:	6828      	ldr	r0, [r5, #0]
   d59b6:	6803      	ldr	r3, [r0, #0]
   d59b8:	695b      	ldr	r3, [r3, #20]
   d59ba:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d59bc:	b2e4      	uxtb	r4, r4
   d59be:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   d59c2:	b280      	uxth	r0, r0
   d59c4:	e7e5      	b.n	d5992 <_ZN8VCNL404011readCommandEh+0x24>

000d59c6 <_ZN8VCNL404010getAmbientEv>:
  return (readCommand(VCNL4040_ALS_DATA));
   d59c6:	2109      	movs	r1, #9
   d59c8:	f7ff bfd1 	b.w	d596e <_ZN8VCNL404011readCommandEh>

000d59cc <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   d59cc:	210c      	movs	r1, #12
   d59ce:	f7ff bfce 	b.w	d596e <_ZN8VCNL404011readCommandEh>

000d59d2 <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   d59d2:	b570      	push	{r4, r5, r6, lr}
   d59d4:	4604      	mov	r4, r0
   d59d6:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d59d8:	6800      	ldr	r0, [r0, #0]
   d59da:	2160      	movs	r1, #96	; 0x60
{
   d59dc:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d59de:	f001 fe15 	bl	d760c <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   d59e2:	6820      	ldr	r0, [r4, #0]
   d59e4:	6803      	ldr	r3, [r0, #0]
   d59e6:	4631      	mov	r1, r6
   d59e8:	689b      	ldr	r3, [r3, #8]
   d59ea:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   d59ec:	b2e9      	uxtb	r1, r5
   d59ee:	6820      	ldr	r0, [r4, #0]
   d59f0:	f7ff ffab 	bl	d594a <_ZN7TwoWire5writeEi>
  _i2cPort->write(value >> 8); //MSB
   d59f4:	0a29      	lsrs	r1, r5, #8
   d59f6:	6820      	ldr	r0, [r4, #0]
   d59f8:	f7ff ffa7 	bl	d594a <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d59fc:	6820      	ldr	r0, [r4, #0]
   d59fe:	f001 fe10 	bl	d7622 <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   d5a02:	fab0 f080 	clz	r0, r0
   d5a06:	0940      	lsrs	r0, r0, #5
   d5a08:	bd70      	pop	{r4, r5, r6, pc}

000d5a0a <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   d5a0a:	b570      	push	{r4, r5, r6, lr}
   d5a0c:	4604      	mov	r4, r0
   d5a0e:	460d      	mov	r5, r1
   d5a10:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   d5a12:	f7ff ffac 	bl	d596e <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   d5a16:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   d5a1a:	ea40 0206 	orr.w	r2, r0, r6
   d5a1e:	4629      	mov	r1, r5
   d5a20:	4620      	mov	r0, r4
}
   d5a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   d5a26:	f7ff bfd4 	b.w	d59d2 <_ZN8VCNL404012writeCommandEht>

000d5a2a <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   d5a2a:	b570      	push	{r4, r5, r6, lr}
   d5a2c:	4604      	mov	r4, r0
   d5a2e:	460d      	mov	r5, r1
   d5a30:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   d5a32:	f7ff ff9c 	bl	d596e <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   d5a36:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   d5a38:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   d5a3c:	4629      	mov	r1, r5
   d5a3e:	4620      	mov	r0, r4
}
   d5a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   d5a44:	f7ff bfc5 	b.w	d59d2 <_ZN8VCNL404012writeCommandEht>

000d5a48 <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   d5a48:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   d5a4a:	f7ff ff90 	bl	d596e <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   d5a4e:	f3c0 2007 	ubfx	r0, r0, #8, #8
   d5a52:	bd08      	pop	{r3, pc}

000d5a54 <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   d5a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5a58:	4604      	mov	r4, r0
   d5a5a:	f89d 7018 	ldrb.w	r7, [sp, #24]
   d5a5e:	460d      	mov	r5, r1
   d5a60:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   d5a62:	4616      	mov	r6, r2
   d5a64:	b16a      	cbz	r2, d5a82 <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   d5a66:	f7ff ff82 	bl	d596e <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   d5a6a:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   d5a6c:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   d5a70:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   d5a74:	4629      	mov	r1, r5
   d5a76:	4620      	mov	r0, r4
   d5a78:	b136      	cbz	r6, d5a88 <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   d5a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   d5a7e:	f7ff bfc4 	b.w	d5a0a <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   d5a82:	f7ff ffe1 	bl	d5a48 <_ZN8VCNL404016readCommandUpperEh>
   d5a86:	e7f1      	b.n	d5a6c <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   d5a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   d5a8c:	f7ff bfcd 	b.w	d5a2a <_ZN8VCNL404017writeCommandUpperEhh>

000d5a90 <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d5a90:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   d5a94:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d5a96:	d20e      	bcs.n	d5ab6 <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   d5a98:	299f      	cmp	r1, #159	; 0x9f
   d5a9a:	d80e      	bhi.n	d5aba <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else if(dutyValue > 80 - 1) dutyValue = VCNL4040_PS_DUTY_80;
   d5a9c:	294f      	cmp	r1, #79	; 0x4f
  else dutyValue = VCNL4040_PS_DUTY_40;
   d5a9e:	bf8c      	ite	hi
   d5aa0:	2340      	movhi	r3, #64	; 0x40
   d5aa2:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   d5aa4:	9300      	str	r3, [sp, #0]
   d5aa6:	2201      	movs	r2, #1
   d5aa8:	233f      	movs	r3, #63	; 0x3f
   d5aaa:	2103      	movs	r1, #3
   d5aac:	f7ff ffd2 	bl	d5a54 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5ab0:	b003      	add	sp, #12
   d5ab2:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d5ab6:	23c0      	movs	r3, #192	; 0xc0
   d5ab8:	e7f4      	b.n	d5aa4 <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   d5aba:	2380      	movs	r3, #128	; 0x80
   d5abc:	e7f2      	b.n	d5aa4 <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000d5abe <_ZN8VCNL404014powerOnAmbientEv>:
{
   d5abe:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_ON);
   d5ac0:	2100      	movs	r1, #0
   d5ac2:	9100      	str	r1, [sp, #0]
   d5ac4:	23fe      	movs	r3, #254	; 0xfe
   d5ac6:	2201      	movs	r2, #1
   d5ac8:	f7ff ffc4 	bl	d5a54 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5acc:	b003      	add	sp, #12
   d5ace:	f85d fb04 	ldr.w	pc, [sp], #4

000d5ad2 <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d5ad2:	2907      	cmp	r1, #7
{
   d5ad4:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d5ad6:	d80f      	bhi.n	d5af8 <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   d5ad8:	2903      	cmp	r1, #3
   d5ada:	d80f      	bhi.n	d5afc <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   d5adc:	d010      	beq.n	d5b00 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else if(timeValue > 2 - 1) timeValue = VCNL4040_PS_IT_2T;
   d5ade:	2902      	cmp	r1, #2
  else timeValue = VCNL4040_PS_IT_1T;
   d5ae0:	bf0c      	ite	eq
   d5ae2:	2304      	moveq	r3, #4
   d5ae4:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   d5ae6:	9300      	str	r3, [sp, #0]
   d5ae8:	2201      	movs	r2, #1
   d5aea:	23f1      	movs	r3, #241	; 0xf1
   d5aec:	2103      	movs	r1, #3
   d5aee:	f7ff ffb1 	bl	d5a54 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5af2:	b003      	add	sp, #12
   d5af4:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d5af8:	230e      	movs	r3, #14
   d5afa:	e7f4      	b.n	d5ae6 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   d5afc:	230c      	movs	r3, #12
   d5afe:	e7f2      	b.n	d5ae6 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   d5b00:	2308      	movs	r3, #8
   d5b02:	e7f0      	b.n	d5ae6 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000d5b04 <_ZN8VCNL404016powerOnProximityEv>:
{
   d5b04:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   d5b06:	2300      	movs	r3, #0
   d5b08:	9300      	str	r3, [sp, #0]
   d5b0a:	2201      	movs	r2, #1
   d5b0c:	23fe      	movs	r3, #254	; 0xfe
   d5b0e:	2103      	movs	r1, #3
   d5b10:	f7ff ffa0 	bl	d5a54 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5b14:	b003      	add	sp, #12
   d5b16:	f85d fb04 	ldr.w	pc, [sp], #4

000d5b1a <_ZN8VCNL404017setProxResolutionEh>:
{
   d5b1a:	b507      	push	{r0, r1, r2, lr}
	if(resolutionValue > 16 - 1) resolutionValue = VCNL4040_PS_HD_16_BIT;
   d5b1c:	290f      	cmp	r1, #15
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   d5b1e:	bf8c      	ite	hi
   d5b20:	2308      	movhi	r3, #8
   d5b22:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   d5b24:	9300      	str	r3, [sp, #0]
   d5b26:	2200      	movs	r2, #0
   d5b28:	23f7      	movs	r3, #247	; 0xf7
   d5b2a:	2103      	movs	r1, #3
   d5b2c:	f7ff ff92 	bl	d5a54 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5b30:	b003      	add	sp, #12
   d5b32:	f85d fb04 	ldr.w	pc, [sp], #4

000d5b36 <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   d5b36:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   d5b38:	2302      	movs	r3, #2
   d5b3a:	9300      	str	r3, [sp, #0]
   d5b3c:	2201      	movs	r2, #1
   d5b3e:	23ef      	movs	r3, #239	; 0xef
   d5b40:	2104      	movs	r1, #4
   d5b42:	f7ff ff87 	bl	d5a54 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5b46:	b003      	add	sp, #12
   d5b48:	f85d fb04 	ldr.w	pc, [sp], #4

000d5b4c <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d5b4c:	29c7      	cmp	r1, #199	; 0xc7
{
   d5b4e:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d5b50:	d816      	bhi.n	d5b80 <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   d5b52:	29b3      	cmp	r1, #179	; 0xb3
   d5b54:	d816      	bhi.n	d5b84 <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   d5b56:	299f      	cmp	r1, #159	; 0x9f
   d5b58:	d816      	bhi.n	d5b88 <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   d5b5a:	298b      	cmp	r1, #139	; 0x8b
   d5b5c:	d816      	bhi.n	d5b8c <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   d5b5e:	2977      	cmp	r1, #119	; 0x77
   d5b60:	d816      	bhi.n	d5b90 <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   d5b62:	2963      	cmp	r1, #99	; 0x63
   d5b64:	d816      	bhi.n	d5b94 <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d5b66:	294a      	cmp	r1, #74	; 0x4a
   d5b68:	bf94      	ite	ls
   d5b6a:	2100      	movls	r1, #0
   d5b6c:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   d5b6e:	9100      	str	r1, [sp, #0]
   d5b70:	23f8      	movs	r3, #248	; 0xf8
   d5b72:	2200      	movs	r2, #0
   d5b74:	2104      	movs	r1, #4
   d5b76:	f7ff ff6d 	bl	d5a54 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5b7a:	b003      	add	sp, #12
   d5b7c:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d5b80:	2107      	movs	r1, #7
   d5b82:	e7f4      	b.n	d5b6e <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   d5b84:	2106      	movs	r1, #6
   d5b86:	e7f2      	b.n	d5b6e <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   d5b88:	2105      	movs	r1, #5
   d5b8a:	e7f0      	b.n	d5b6e <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   d5b8c:	2104      	movs	r1, #4
   d5b8e:	e7ee      	b.n	d5b6e <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   d5b90:	2103      	movs	r1, #3
   d5b92:	e7ec      	b.n	d5b6e <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   d5b94:	2102      	movs	r1, #2
   d5b96:	e7ea      	b.n	d5b6e <_ZN8VCNL404013setLEDCurrentEh+0x22>

000d5b98 <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   d5b98:	b538      	push	{r3, r4, r5, lr}
   d5b9a:	4604      	mov	r4, r0
   d5b9c:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d5b9e:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   d5ba0:	f001 fd02 	bl	d75a8 <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   d5ba4:	4620      	mov	r0, r4
   d5ba6:	f7ff fed5 	bl	d5954 <_ZN8VCNL404011isConnectedEv>
   d5baa:	4605      	mov	r5, r0
   d5bac:	b910      	cbnz	r0, d5bb4 <_ZN8VCNL40405beginER7TwoWire+0x1c>
   d5bae:	2500      	movs	r5, #0
}
   d5bb0:	4628      	mov	r0, r5
   d5bb2:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	f7ff ff09 	bl	d59cc <_ZN8VCNL40405getIDEv>
   d5bba:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   d5bbe:	d1f6      	bne.n	d5bae <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   d5bc0:	4620      	mov	r0, r4
   d5bc2:	21c8      	movs	r1, #200	; 0xc8
   d5bc4:	f7ff ffc2 	bl	d5b4c <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   d5bc8:	4620      	mov	r0, r4
   d5bca:	2128      	movs	r1, #40	; 0x28
   d5bcc:	f7ff ff60 	bl	d5a90 <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   d5bd0:	4620      	mov	r0, r4
   d5bd2:	2108      	movs	r1, #8
   d5bd4:	f7ff ff7d 	bl	d5ad2 <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   d5bd8:	2110      	movs	r1, #16
   d5bda:	4620      	mov	r0, r4
   d5bdc:	f7ff ff9d 	bl	d5b1a <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   d5be0:	4620      	mov	r0, r4
   d5be2:	f7ff ffa8 	bl	d5b36 <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   d5be6:	4620      	mov	r0, r4
   d5be8:	f7ff ff8c 	bl	d5b04 <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   d5bec:	e7e0      	b.n	d5bb0 <_ZN8VCNL40405beginER7TwoWire+0x18>
	...

000d5bf0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d5bf0:	b510      	push	{r4, lr}
   d5bf2:	4b04      	ldr	r3, [pc, #16]	; (d5c04 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d5bf4:	6003      	str	r3, [r0, #0]
   d5bf6:	4604      	mov	r4, r0
  if(buffer) {
   d5bf8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5bfa:	b108      	cbz	r0, d5c00 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d5bfc:	f000 ff36 	bl	d6a6c <free>
    buffer = NULL;
  }
}
   d5c00:	4620      	mov	r0, r4
   d5c02:	bd10      	pop	{r4, pc}
   d5c04:	000d98e0 	.word	0x000d98e0

000d5c08 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d5c08:	b510      	push	{r4, lr}
   d5c0a:	4604      	mov	r4, r0
}
   d5c0c:	f7ff fff0 	bl	d5bf0 <_ZN16Adafruit_SSD1306D1Ev>
   d5c10:	4620      	mov	r0, r4
   d5c12:	2150      	movs	r1, #80	; 0x50
   d5c14:	f002 f9d3 	bl	d7fbe <_ZdlPvj>
   d5c18:	4620      	mov	r0, r4
   d5c1a:	bd10      	pop	{r4, pc}

000d5c1c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d5c1c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5c1e:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d5c20:	db4b      	blt.n	d5cba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d5c22:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d5c26:	428c      	cmp	r4, r1
   d5c28:	dd47      	ble.n	d5cba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d5c2a:	2a00      	cmp	r2, #0
   d5c2c:	db45      	blt.n	d5cba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d5c2e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d5c32:	4294      	cmp	r4, r2
   d5c34:	dd41      	ble.n	d5cba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d5c36:	7e84      	ldrb	r4, [r0, #26]
   d5c38:	2c02      	cmp	r4, #2
   d5c3a:	d01f      	beq.n	d5c7c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d5c3c:	2c03      	cmp	r4, #3
   d5c3e:	d026      	beq.n	d5c8e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d5c40:	2c01      	cmp	r4, #1
   d5c42:	d104      	bne.n	d5c4e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d5c44:	8904      	ldrh	r4, [r0, #8]
   d5c46:	43d2      	mvns	r2, r2
   d5c48:	4414      	add	r4, r2
      break;
   d5c4a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d5c4c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d5c4e:	2b01      	cmp	r3, #1
   d5c50:	d023      	beq.n	d5c9a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d5c52:	2b02      	cmp	r3, #2
   d5c54:	d032      	beq.n	d5cbc <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d5c56:	bb83      	cbnz	r3, d5cba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d5c58:	2a00      	cmp	r2, #0
   d5c5a:	4613      	mov	r3, r2
   d5c5c:	8904      	ldrh	r4, [r0, #8]
   d5c5e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5c60:	bfb8      	it	lt
   d5c62:	1dd3      	addlt	r3, r2, #7
   d5c64:	10db      	asrs	r3, r3, #3
   d5c66:	fb13 1104 	smlabb	r1, r3, r4, r1
   d5c6a:	f002 0207 	and.w	r2, r2, #7
   d5c6e:	2301      	movs	r3, #1
   d5c70:	4093      	lsls	r3, r2
   d5c72:	5c42      	ldrb	r2, [r0, r1]
   d5c74:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d5c78:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d5c7a:	e01e      	b.n	d5cba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d5c7c:	8904      	ldrh	r4, [r0, #8]
   d5c7e:	43c9      	mvns	r1, r1
   d5c80:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d5c82:	8944      	ldrh	r4, [r0, #10]
   d5c84:	43d2      	mvns	r2, r2
   d5c86:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d5c88:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d5c8a:	b212      	sxth	r2, r2
      break;
   d5c8c:	e7df      	b.n	d5c4e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d5c8e:	8944      	ldrh	r4, [r0, #10]
   d5c90:	43c9      	mvns	r1, r1
   d5c92:	440c      	add	r4, r1
      break;
   d5c94:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d5c96:	b222      	sxth	r2, r4
      break;
   d5c98:	e7d9      	b.n	d5c4e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d5c9a:	2a00      	cmp	r2, #0
   d5c9c:	8904      	ldrh	r4, [r0, #8]
   d5c9e:	4613      	mov	r3, r2
   d5ca0:	bfb8      	it	lt
   d5ca2:	1dd3      	addlt	r3, r2, #7
   d5ca4:	10db      	asrs	r3, r3, #3
   d5ca6:	fb13 1104 	smlabb	r1, r3, r4, r1
   d5caa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5cac:	f002 0007 	and.w	r0, r2, #7
   d5cb0:	2201      	movs	r2, #1
   d5cb2:	4082      	lsls	r2, r0
   d5cb4:	5c58      	ldrb	r0, [r3, r1]
   d5cb6:	4302      	orrs	r2, r0
   d5cb8:	545a      	strb	r2, [r3, r1]
}
   d5cba:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d5cbc:	2a00      	cmp	r2, #0
   d5cbe:	4613      	mov	r3, r2
   d5cc0:	8904      	ldrh	r4, [r0, #8]
   d5cc2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5cc4:	bfb8      	it	lt
   d5cc6:	1dd3      	addlt	r3, r2, #7
   d5cc8:	10db      	asrs	r3, r3, #3
   d5cca:	fb13 1104 	smlabb	r1, r3, r4, r1
   d5cce:	f002 0207 	and.w	r2, r2, #7
   d5cd2:	2301      	movs	r3, #1
   d5cd4:	fa03 f202 	lsl.w	r2, r3, r2
   d5cd8:	5c43      	ldrb	r3, [r0, r1]
   d5cda:	405a      	eors	r2, r3
   d5cdc:	e7cc      	b.n	d5c78 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d5cde <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5cde:	b510      	push	{r4, lr}
   d5ce0:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d5ce2:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d5ce6:	2101      	movs	r1, #1
   d5ce8:	b280      	uxth	r0, r0
   d5cea:	f002 f8ba 	bl	d7e62 <digitalWrite>
   d5cee:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5cf0:	b118      	cbz	r0, d5cfa <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d5cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d5cf6:	f000 bf40 	b.w	d6b7a <_ZN8SPIClass14endTransactionEv>
}
   d5cfa:	bd10      	pop	{r4, pc}

000d5cfc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d5cfc:	b570      	push	{r4, r5, r6, lr}
   d5cfe:	4604      	mov	r4, r0
   d5d00:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d5d02:	2600      	movs	r6, #0
   d5d04:	f7ff faca 	bl	d529c <_ZN12Adafruit_GFXC1Ess>
   d5d08:	4b11      	ldr	r3, [pc, #68]	; (d5d50 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d5d0a:	6023      	str	r3, [r4, #0]
   d5d0c:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d5d0e:	b915      	cbnz	r5, d5d16 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d5d10:	f002 f928 	bl	d7f64 <_Z19__fetch_global_Wirev>
   d5d14:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d5d16:	23ff      	movs	r3, #255	; 0xff
   d5d18:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d5d1c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d5d20:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d5d24:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d5d28:	4b0a      	ldr	r3, [pc, #40]	; (d5d54 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d5d2a:	63a3      	str	r3, [r4, #56]	; 0x38
   d5d2c:	2301      	movs	r3, #1
   d5d2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d5d32:	9b05      	ldr	r3, [sp, #20]
   d5d34:	64a3      	str	r3, [r4, #72]	; 0x48
   d5d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5d3a:	9b06      	ldr	r3, [sp, #24]
   d5d3c:	86a2      	strh	r2, [r4, #52]	; 0x34
   d5d3e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d5d42:	6426      	str	r6, [r4, #64]	; 0x40
   d5d44:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d5d48:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d5d4a:	4620      	mov	r0, r4
   d5d4c:	bd70      	pop	{r4, r5, r6, pc}
   d5d4e:	bf00      	nop
   d5d50:	000d98e0 	.word	0x000d98e0
   d5d54:	000d942c 	.word	0x000d942c

000d5d58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d5d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d5a:	4604      	mov	r4, r0
  if(wire) { // I2C
   d5d5c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d5d5e:	460d      	mov	r5, r1
  if(wire) { // I2C
   d5d60:	b190      	cbz	r0, d5d88 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d5d62:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5d66:	f001 fc55 	bl	d7614 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5d6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5d6c:	6803      	ldr	r3, [r0, #0]
   d5d6e:	2100      	movs	r1, #0
   d5d70:	689b      	ldr	r3, [r3, #8]
   d5d72:	4798      	blx	r3
    WIRE_WRITE(c);
   d5d74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5d76:	6803      	ldr	r3, [r0, #0]
   d5d78:	4629      	mov	r1, r5
   d5d7a:	689b      	ldr	r3, [r3, #8]
   d5d7c:	4798      	blx	r3
    wire->endTransmission();
   d5d7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d5d80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d5d84:	f001 bc4d 	b.w	d7622 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5d88:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d5d8c:	4601      	mov	r1, r0
   d5d8e:	b298      	uxth	r0, r3
   d5d90:	f002 f867 	bl	d7e62 <digitalWrite>
  if(spi) {
   d5d94:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5d96:	b120      	cbz	r0, d5da2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d5d98:	4629      	mov	r1, r5
}
   d5d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d5d9e:	f000 bf73 	b.w	d6c88 <_ZN8SPIClass8transferEh>
   d5da2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5da4:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5da6:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5daa:	ea05 0107 	and.w	r1, r5, r7
   d5dae:	b280      	uxth	r0, r0
   d5db0:	f002 f857 	bl	d7e62 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5db4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5db8:	2101      	movs	r1, #1
   d5dba:	b280      	uxth	r0, r0
   d5dbc:	f002 f851 	bl	d7e62 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5dc0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5dc4:	2100      	movs	r1, #0
   d5dc6:	b280      	uxth	r0, r0
   d5dc8:	f002 f84b 	bl	d7e62 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5dcc:	3e01      	subs	r6, #1
   d5dce:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d5dd2:	d1e8      	bne.n	d5da6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d5dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5dd6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5dd6:	b538      	push	{r3, r4, r5, lr}
   d5dd8:	4604      	mov	r4, r0
  TRANSACTION_START
   d5dda:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5ddc:	460d      	mov	r5, r1
  TRANSACTION_START
   d5dde:	b180      	cbz	r0, d5e02 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>
	  setSpeed(speed);
   d5de0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5de2:	f001 fbdd 	bl	d75a0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d5de6:	2d00      	cmp	r5, #0
   d5de8:	4620      	mov	r0, r4
   d5dea:	bf14      	ite	ne
   d5dec:	21a7      	movne	r1, #167	; 0xa7
   d5dee:	21a6      	moveq	r1, #166	; 0xa6
   d5df0:	f7ff ffb2 	bl	d5d58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d5df4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5df6:	b188      	cbz	r0, d5e1c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d5df8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5dfe:	f001 bbcf 	b.w	d75a0 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d5e02:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5e04:	b118      	cbz	r0, d5e0e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d5e06:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5e0a:	f000 fecf 	bl	d6bac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5e0e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5e12:	2100      	movs	r1, #0
   d5e14:	b280      	uxth	r0, r0
   d5e16:	f002 f824 	bl	d7e62 <digitalWrite>
   d5e1a:	e7e4      	b.n	d5de6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d5e1c:	4620      	mov	r0, r4
}
   d5e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5e22:	f7ff bf5c 	b.w	d5cde <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d5e26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d5e26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5e2a:	4604      	mov	r4, r0
  if(wire) { // I2C
   d5e2c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d5e2e:	460d      	mov	r5, r1
  if(wire) { // I2C
   d5e30:	188f      	adds	r7, r1, r2
   d5e32:	b340      	cbz	r0, d5e86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d5e34:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5e38:	f001 fbec 	bl	d7614 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5e3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e3e:	6803      	ldr	r3, [r0, #0]
   d5e40:	2100      	movs	r1, #0
   d5e42:	689b      	ldr	r3, [r3, #8]
   d5e44:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5e46:	2601      	movs	r6, #1
    while(n--) {
   d5e48:	42bd      	cmp	r5, r7
   d5e4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e4c:	d017      	beq.n	d5e7e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d5e4e:	2e1f      	cmp	r6, #31
   d5e50:	d90c      	bls.n	d5e6c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d5e52:	f001 fbe6 	bl	d7622 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5e56:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5e5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e5c:	f001 fbda 	bl	d7614 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5e60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e62:	6803      	ldr	r3, [r0, #0]
   d5e64:	2100      	movs	r1, #0
   d5e66:	689b      	ldr	r3, [r3, #8]
   d5e68:	4798      	blx	r3
        bytesOut = 1;
   d5e6a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5e6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e6e:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5e72:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5e74:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5e76:	689b      	ldr	r3, [r3, #8]
   d5e78:	4798      	blx	r3
      bytesOut++;
   d5e7a:	b2f6      	uxtb	r6, r6
    while(n--) {
   d5e7c:	e7e4      	b.n	d5e48 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d5e7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d5e82:	f001 bbce 	b.w	d7622 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5e86:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d5e8a:	4601      	mov	r1, r0
   d5e8c:	b298      	uxth	r0, r3
   d5e8e:	f001 ffe8 	bl	d7e62 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5e92:	42af      	cmp	r7, r5
   d5e94:	d022      	beq.n	d5edc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d5e96:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5e98:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5e9c:	b118      	cbz	r0, d5ea6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d5e9e:	4649      	mov	r1, r9
   d5ea0:	f000 fef2 	bl	d6c88 <_ZN8SPIClass8transferEh>
   d5ea4:	e7f5      	b.n	d5e92 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d5ea6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5ea8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5eac:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5eb0:	ea09 0108 	and.w	r1, r9, r8
   d5eb4:	b280      	uxth	r0, r0
   d5eb6:	f001 ffd4 	bl	d7e62 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5eba:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5ebe:	2101      	movs	r1, #1
   d5ec0:	b280      	uxth	r0, r0
   d5ec2:	f001 ffce 	bl	d7e62 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5ec6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5eca:	2100      	movs	r1, #0
   d5ecc:	b280      	uxth	r0, r0
   d5ece:	f001 ffc8 	bl	d7e62 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5ed2:	3e01      	subs	r6, #1
   d5ed4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5ed8:	d1e8      	bne.n	d5eac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d5eda:	e7da      	b.n	d5e92 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d5edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5ee0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d5ee0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5ee4:	1dda      	adds	r2, r3, #7
   d5ee6:	bf48      	it	mi
   d5ee8:	f103 020e 	addmi.w	r2, r3, #14
   d5eec:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5ef0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5ef2:	10d2      	asrs	r2, r2, #3
   d5ef4:	435a      	muls	r2, r3
   d5ef6:	2100      	movs	r1, #0
   d5ef8:	f002 be50 	b.w	d8b9c <memset>

000d5efc <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d5efc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5f00:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5f02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d5f04:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5f08:	4604      	mov	r4, r0
   d5f0a:	460f      	mov	r7, r1
   d5f0c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5f0e:	b1b3      	cbz	r3, d5f3e <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d5f10:	4620      	mov	r0, r4
   d5f12:	f7ff ffe5 	bl	d5ee0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d5f16:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d5f1a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d5f1e:	2820      	cmp	r0, #32
   d5f20:	dc1f      	bgt.n	d5f62 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d5f22:	2320      	movs	r3, #32
   d5f24:	2201      	movs	r2, #1
   d5f26:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d5f2a:	3820      	subs	r0, #32
   d5f2c:	2373      	movs	r3, #115	; 0x73
   d5f2e:	3973      	subs	r1, #115	; 0x73
   d5f30:	9300      	str	r3, [sp, #0]
   d5f32:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5f36:	4b89      	ldr	r3, [pc, #548]	; (d615c <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d5f38:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d5f3c:	e01f      	b.n	d5f7e <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5f3e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5f42:	1dd8      	adds	r0, r3, #7
   d5f44:	bf48      	it	mi
   d5f46:	f103 000e 	addmi.w	r0, r3, #14
   d5f4a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d5f4e:	10c0      	asrs	r0, r0, #3
   d5f50:	4358      	muls	r0, r3
   d5f52:	f000 fd83 	bl	d6a5c <malloc>
   d5f56:	62e0      	str	r0, [r4, #44]	; 0x2c
   d5f58:	2800      	cmp	r0, #0
   d5f5a:	d1d9      	bne.n	d5f10 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d5f5c:	b004      	add	sp, #16
   d5f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d5f62:	2340      	movs	r3, #64	; 0x40
   d5f64:	f04f 0c01 	mov.w	ip, #1
   d5f68:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d5f6c:	2352      	movs	r3, #82	; 0x52
   d5f6e:	3840      	subs	r0, #64	; 0x40
   d5f70:	3952      	subs	r1, #82	; 0x52
   d5f72:	9300      	str	r3, [sp, #0]
   d5f74:	4b7a      	ldr	r3, [pc, #488]	; (d6160 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d5f76:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5f7a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d5f7e:	f340 024f 	sbfx	r2, r0, #1, #16
   d5f82:	f341 014f 	sbfx	r1, r1, #1, #16
   d5f86:	4620      	mov	r0, r4
   d5f88:	f7ff f99e 	bl	d52c8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d5f8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d5f8e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d5f92:	2800      	cmp	r0, #0
   d5f94:	d078      	beq.n	d6088 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5f96:	2d00      	cmp	r5, #0
   d5f98:	d174      	bne.n	d6084 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d5f9a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5f9e:	2b20      	cmp	r3, #32
   d5fa0:	bf0c      	ite	eq
   d5fa2:	253c      	moveq	r5, #60	; 0x3c
   d5fa4:	253d      	movne	r5, #61	; 0x3d
   d5fa6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d5faa:	f1b8 0f00 	cmp.w	r8, #0
   d5fae:	d001      	beq.n	d5fb4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5fb0:	f001 fafa 	bl	d75a8 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d5fb4:	b1fe      	cbz	r6, d5ff6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d5fb6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5fba:	2800      	cmp	r0, #0
   d5fbc:	db1b      	blt.n	d5ff6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d5fbe:	2101      	movs	r1, #1
   d5fc0:	b280      	uxth	r0, r0
   d5fc2:	f001 ff3d 	bl	d7e40 <pinMode>
    digitalWrite(rstPin, HIGH);
   d5fc6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5fca:	2101      	movs	r1, #1
   d5fcc:	b280      	uxth	r0, r0
   d5fce:	f001 ff48 	bl	d7e62 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d5fd2:	2001      	movs	r0, #1
   d5fd4:	f001 f85e 	bl	d7094 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d5fd8:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5fdc:	2100      	movs	r1, #0
   d5fde:	b280      	uxth	r0, r0
   d5fe0:	f001 ff3f 	bl	d7e62 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d5fe4:	200a      	movs	r0, #10
   d5fe6:	f001 f855 	bl	d7094 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d5fea:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5fee:	2101      	movs	r1, #1
   d5ff0:	b280      	uxth	r0, r0
   d5ff2:	f001 ff36 	bl	d7e62 <digitalWrite>
  TRANSACTION_START
   d5ff6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5ff8:	2800      	cmp	r0, #0
   d5ffa:	d074      	beq.n	d60e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d5ffc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5ffe:	f001 facf 	bl	d75a0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d6002:	2204      	movs	r2, #4
   d6004:	4957      	ldr	r1, [pc, #348]	; (d6164 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d6006:	4620      	mov	r0, r4
   d6008:	f7ff ff0d 	bl	d5e26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d600c:	7aa1      	ldrb	r1, [r4, #10]
   d600e:	3901      	subs	r1, #1
   d6010:	b2c9      	uxtb	r1, r1
   d6012:	4620      	mov	r0, r4
   d6014:	f7ff fea0 	bl	d5d58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d6018:	4953      	ldr	r1, [pc, #332]	; (d6168 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d601a:	2204      	movs	r2, #4
   d601c:	4620      	mov	r0, r4
   d601e:	f7ff ff02 	bl	d5e26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d6022:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d6026:	2b01      	cmp	r3, #1
   d6028:	bf0c      	ite	eq
   d602a:	2110      	moveq	r1, #16
   d602c:	2114      	movne	r1, #20
   d602e:	4620      	mov	r0, r4
   d6030:	f7ff fe92 	bl	d5d58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d6034:	2204      	movs	r2, #4
   d6036:	494d      	ldr	r1, [pc, #308]	; (d616c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d6038:	4620      	mov	r0, r4
   d603a:	f7ff fef4 	bl	d5e26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d603e:	68a3      	ldr	r3, [r4, #8]
   d6040:	4a4b      	ldr	r2, [pc, #300]	; (d6170 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d6042:	4293      	cmp	r3, r2
   d6044:	d15c      	bne.n	d6100 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d6046:	494b      	ldr	r1, [pc, #300]	; (d6174 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d6048:	2204      	movs	r2, #4
   d604a:	4620      	mov	r0, r4
   d604c:	f7ff feeb 	bl	d5e26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d6050:	21d9      	movs	r1, #217	; 0xd9
   d6052:	4620      	mov	r0, r4
   d6054:	f7ff fe80 	bl	d5d58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d6058:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d605c:	2b01      	cmp	r3, #1
   d605e:	bf0c      	ite	eq
   d6060:	2122      	moveq	r1, #34	; 0x22
   d6062:	21f1      	movne	r1, #241	; 0xf1
   d6064:	4620      	mov	r0, r4
   d6066:	f7ff fe77 	bl	d5d58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d606a:	4620      	mov	r0, r4
   d606c:	4942      	ldr	r1, [pc, #264]	; (d6178 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d606e:	2206      	movs	r2, #6
   d6070:	f7ff fed9 	bl	d5e26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d6074:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6076:	2800      	cmp	r0, #0
   d6078:	d063      	beq.n	d6142 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d607a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d607c:	f001 fa90 	bl	d75a0 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d6080:	2001      	movs	r0, #1
   d6082:	e76b      	b.n	d5f5c <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d6084:	b26d      	sxtb	r5, r5
   d6086:	e78e      	b.n	d5fa6 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d6088:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d608c:	2101      	movs	r1, #1
   d608e:	b280      	uxth	r0, r0
   d6090:	f001 fed6 	bl	d7e40 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d6094:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d6098:	2101      	movs	r1, #1
   d609a:	b280      	uxth	r0, r0
   d609c:	f001 fed0 	bl	d7e40 <pinMode>
    SSD1306_DESELECT
   d60a0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d60a4:	2101      	movs	r1, #1
   d60a6:	b280      	uxth	r0, r0
   d60a8:	f001 fedb 	bl	d7e62 <digitalWrite>
    if(spi) { // Hardware SPI
   d60ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d60ae:	b13d      	cbz	r5, d60c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d60b0:	f1b8 0f00 	cmp.w	r8, #0
   d60b4:	f43f af7e 	beq.w	d5fb4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d60b8:	4628      	mov	r0, r5
   d60ba:	f000 fd4d 	bl	d6b58 <_ZN8SPIClass5beginEv>
   d60be:	e779      	b.n	d5fb4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d60c0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d60c4:	2101      	movs	r1, #1
   d60c6:	b280      	uxth	r0, r0
   d60c8:	f001 feba 	bl	d7e40 <pinMode>
      pinMode(clkPin , OUTPUT);
   d60cc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d60d0:	2101      	movs	r1, #1
   d60d2:	b280      	uxth	r0, r0
   d60d4:	f001 feb4 	bl	d7e40 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d60d8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d60dc:	4629      	mov	r1, r5
   d60de:	b280      	uxth	r0, r0
   d60e0:	f001 febf 	bl	d7e62 <digitalWrite>
   d60e4:	e766      	b.n	d5fb4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d60e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d60e8:	b118      	cbz	r0, d60f2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d60ea:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d60ee:	f000 fd5d 	bl	d6bac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d60f2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d60f6:	2100      	movs	r1, #0
   d60f8:	b280      	uxth	r0, r0
   d60fa:	f001 feb2 	bl	d7e62 <digitalWrite>
   d60fe:	e780      	b.n	d6002 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d6100:	4a1e      	ldr	r2, [pc, #120]	; (d617c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d6102:	4293      	cmp	r3, r2
   d6104:	d10e      	bne.n	d6124 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d6106:	491e      	ldr	r1, [pc, #120]	; (d6180 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d6108:	2203      	movs	r2, #3
   d610a:	4620      	mov	r0, r4
   d610c:	f7ff fe8b 	bl	d5e26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d6110:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d6114:	2b01      	cmp	r3, #1
   d6116:	bf0c      	ite	eq
   d6118:	219f      	moveq	r1, #159	; 0x9f
   d611a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d611c:	4620      	mov	r0, r4
   d611e:	f7ff fe1b 	bl	d5d58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d6122:	e795      	b.n	d6050 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d6124:	4a17      	ldr	r2, [pc, #92]	; (d6184 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d6126:	4293      	cmp	r3, r2
   d6128:	d192      	bne.n	d6050 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d612a:	4917      	ldr	r1, [pc, #92]	; (d6188 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d612c:	2203      	movs	r2, #3
   d612e:	4620      	mov	r0, r4
   d6130:	f7ff fe79 	bl	d5e26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d6134:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d6138:	2b01      	cmp	r3, #1
   d613a:	bf0c      	ite	eq
   d613c:	2110      	moveq	r1, #16
   d613e:	21af      	movne	r1, #175	; 0xaf
   d6140:	e7ec      	b.n	d611c <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d6142:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d6146:	2101      	movs	r1, #1
   d6148:	b280      	uxth	r0, r0
   d614a:	f001 fe8a 	bl	d7e62 <digitalWrite>
   d614e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6150:	2800      	cmp	r0, #0
   d6152:	d095      	beq.n	d6080 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d6154:	f000 fd11 	bl	d6b7a <_ZN8SPIClass14endTransactionEv>
   d6158:	e792      	b.n	d6080 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d615a:	bf00      	nop
   d615c:	000d96f8 	.word	0x000d96f8
   d6160:	000d9438 	.word	0x000d9438
   d6164:	000d9940 	.word	0x000d9940
   d6168:	000d9944 	.word	0x000d9944
   d616c:	000d9948 	.word	0x000d9948
   d6170:	00200080 	.word	0x00200080
   d6174:	000d9952 	.word	0x000d9952
   d6178:	000d994c 	.word	0x000d994c
   d617c:	00400080 	.word	0x00400080
   d6180:	000d9956 	.word	0x000d9956
   d6184:	00100060 	.word	0x00100060
   d6188:	000d9959 	.word	0x000d9959

000d618c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d618c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d618e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d6190:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d6194:	db3d      	blt.n	d6212 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d6196:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d619a:	4294      	cmp	r4, r2
   d619c:	dd39      	ble.n	d6212 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d619e:	2900      	cmp	r1, #0
      w += x;
   d61a0:	bfbe      	ittt	lt
   d61a2:	185b      	addlt	r3, r3, r1
   d61a4:	b21b      	sxthlt	r3, r3
      x  = 0;
   d61a6:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d61a8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d61ac:	18ce      	adds	r6, r1, r3
   d61ae:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d61b0:	bfc4      	itt	gt
   d61b2:	1a63      	subgt	r3, r4, r1
   d61b4:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d61b6:	2b00      	cmp	r3, #0
   d61b8:	dd2b      	ble.n	d6212 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d61ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d61bc:	10d6      	asrs	r6, r2, #3
   d61be:	fb14 1106 	smlabb	r1, r4, r6, r1
   d61c2:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d61c4:	f002 0007 	and.w	r0, r2, #7
   d61c8:	2201      	movs	r2, #1
   d61ca:	4082      	lsls	r2, r0
      switch(color) {
   d61cc:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d61ce:	b2d2      	uxtb	r2, r2
      switch(color) {
   d61d0:	d016      	beq.n	d6200 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d61d2:	2d02      	cmp	r5, #2
   d61d4:	d00b      	beq.n	d61ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d61d6:	b9e5      	cbnz	r5, d6212 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d61d8:	43d2      	mvns	r2, r2
   d61da:	b2d2      	uxtb	r2, r2
   d61dc:	440b      	add	r3, r1
   d61de:	4299      	cmp	r1, r3
   d61e0:	d017      	beq.n	d6212 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d61e2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d61e6:	4010      	ands	r0, r2
   d61e8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d61ec:	e7f7      	b.n	d61de <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d61ee:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d61f0:	4299      	cmp	r1, r3
   d61f2:	d00e      	beq.n	d6212 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d61f4:	f811 0b01 	ldrb.w	r0, [r1], #1
   d61f8:	4050      	eors	r0, r2
   d61fa:	f801 0c01 	strb.w	r0, [r1, #-1]
   d61fe:	e7f7      	b.n	d61f0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d6200:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d6202:	4299      	cmp	r1, r3
   d6204:	d005      	beq.n	d6212 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d6206:	f811 0b01 	ldrb.w	r0, [r1], #1
   d620a:	4310      	orrs	r0, r2
   d620c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d6210:	e7f7      	b.n	d6202 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d6212:	bd70      	pop	{r4, r5, r6, pc}

000d6214 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d6214:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d6216:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d6218:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d621c:	db76      	blt.n	d630c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d621e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d6222:	42a9      	cmp	r1, r5
   d6224:	da72      	bge.n	d630c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d6226:	2a00      	cmp	r2, #0
      __h += __y;
   d6228:	bfbc      	itt	lt
   d622a:	18d2      	addlt	r2, r2, r3
   d622c:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d622e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d6232:	bfb8      	it	lt
   d6234:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d6236:	18d7      	adds	r7, r2, r3
   d6238:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d623a:	bfc4      	itt	gt
   d623c:	1aa3      	subgt	r3, r4, r2
   d623e:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d6240:	2b00      	cmp	r3, #0
   d6242:	dd63      	ble.n	d630c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d6244:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d6248:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d624a:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d624e:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d6252:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d6254:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d6258:	d023      	beq.n	d62a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d625a:	f1c2 0208 	rsb	r2, r2, #8
   d625e:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d6260:	4d2c      	ldr	r5, [pc, #176]	; (d6314 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d6262:	4293      	cmp	r3, r2
   d6264:	bf3c      	itt	cc
   d6266:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d626a:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d626e:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d6270:	bf3c      	itt	cc
   d6272:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d6276:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d627a:	2e01      	cmp	r6, #1
   d627c:	d007      	beq.n	d628e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d627e:	2e02      	cmp	r6, #2
   d6280:	d02e      	beq.n	d62e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d6282:	b94e      	cbnz	r6, d6298 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d6284:	f817 c001 	ldrb.w	ip, [r7, r1]
   d6288:	ea2c 0505 	bic.w	r5, ip, r5
   d628c:	e003      	b.n	d6296 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d628e:	f817 c001 	ldrb.w	ip, [r7, r1]
   d6292:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d6296:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d6298:	4293      	cmp	r3, r2
   d629a:	d337      	bcc.n	d630c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d629c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d62a0:	440c      	add	r4, r1
        h -= mod;
   d62a2:	1a9a      	subs	r2, r3, r2
   d62a4:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d62a6:	2a07      	cmp	r2, #7
   d62a8:	d90e      	bls.n	d62c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d62aa:	2e02      	cmp	r6, #2
   d62ac:	d11d      	bne.n	d62ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d62ae:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d62b0:	7821      	ldrb	r1, [r4, #0]
   d62b2:	43c9      	mvns	r1, r1
   d62b4:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d62b6:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d62b8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d62bc:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d62be:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d62c0:	440c      	add	r4, r1
            } while(h >= 8);
   d62c2:	d8f5      	bhi.n	d62b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d62c4:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d62c8:	b302      	cbz	r2, d630c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d62ca:	4b13      	ldr	r3, [pc, #76]	; (d6318 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d62cc:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d62ce:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d62d0:	d019      	beq.n	d6306 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d62d2:	2e02      	cmp	r6, #2
   d62d4:	d01b      	beq.n	d630e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d62d6:	b9ce      	cbnz	r6, d630c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d62d8:	7822      	ldrb	r2, [r4, #0]
   d62da:	ea22 0303 	bic.w	r3, r2, r3
   d62de:	e014      	b.n	d630a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d62e0:	f817 c001 	ldrb.w	ip, [r7, r1]
   d62e4:	ea85 050c 	eor.w	r5, r5, ip
   d62e8:	e7d5      	b.n	d6296 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d62ea:	2e00      	cmp	r6, #0
   d62ec:	bf14      	ite	ne
   d62ee:	25ff      	movne	r5, #255	; 0xff
   d62f0:	2500      	moveq	r5, #0
   d62f2:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d62f4:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d62f6:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d62f8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d62fc:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d62fe:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d6300:	440c      	add	r4, r1
            } while(h >= 8);
   d6302:	d8f7      	bhi.n	d62f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d6304:	e7de      	b.n	d62c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d6306:	7822      	ldrb	r2, [r4, #0]
   d6308:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d630a:	7023      	strb	r3, [r4, #0]
}
   d630c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d630e:	7822      	ldrb	r2, [r4, #0]
   d6310:	4053      	eors	r3, r2
   d6312:	e7fa      	b.n	d630a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d6314:	000d9930 	.word	0x000d9930
   d6318:	000d9938 	.word	0x000d9938

000d631c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d631c:	b470      	push	{r4, r5, r6}
   d631e:	4614      	mov	r4, r2
  switch(rotation) {
   d6320:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d6322:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d6326:	2a02      	cmp	r2, #2
   d6328:	d00d      	beq.n	d6346 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d632a:	2a03      	cmp	r2, #3
   d632c:	d018      	beq.n	d6360 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d632e:	2a01      	cmp	r2, #1
   d6330:	d111      	bne.n	d6356 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d6332:	8902      	ldrh	r2, [r0, #8]
   d6334:	43e4      	mvns	r4, r4
   d6336:	4414      	add	r4, r2
   d6338:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d633a:	9603      	str	r6, [sp, #12]
   d633c:	460a      	mov	r2, r1
   d633e:	4621      	mov	r1, r4
}
   d6340:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d6342:	f7ff bf67 	b.w	d6214 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d6346:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d6348:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d634a:	43e4      	mvns	r4, r4
    x -= (w-1);
   d634c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d634e:	4414      	add	r4, r2
    x -= (w-1);
   d6350:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d6352:	b224      	sxth	r4, r4
    x -= (w-1);
   d6354:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d6356:	9603      	str	r6, [sp, #12]
   d6358:	4622      	mov	r2, r4
}
   d635a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d635c:	f7ff bf16 	b.w	d618c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d6360:	8945      	ldrh	r5, [r0, #10]
   d6362:	4419      	add	r1, r3
   d6364:	1a69      	subs	r1, r5, r1
   d6366:	b209      	sxth	r1, r1
    break;
   d6368:	e7e7      	b.n	d633a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d636a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d636a:	b430      	push	{r4, r5}
   d636c:	4614      	mov	r4, r2
  switch(rotation) {
   d636e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d6370:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d6374:	2a02      	cmp	r2, #2
   d6376:	d00d      	beq.n	d6394 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d6378:	2a03      	cmp	r2, #3
   d637a:	d018      	beq.n	d63ae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d637c:	2a01      	cmp	r2, #1
   d637e:	d111      	bne.n	d63a4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d6380:	18e2      	adds	r2, r4, r3
   d6382:	8904      	ldrh	r4, [r0, #8]
   d6384:	1aa4      	subs	r4, r4, r2
   d6386:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d6388:	9502      	str	r5, [sp, #8]
   d638a:	460a      	mov	r2, r1
   d638c:	4621      	mov	r1, r4
}
   d638e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d6390:	f7ff befc 	b.w	d618c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d6394:	8902      	ldrh	r2, [r0, #8]
   d6396:	43c9      	mvns	r1, r1
   d6398:	4411      	add	r1, r2
    y -= (h-1);
   d639a:	18e2      	adds	r2, r4, r3
   d639c:	8944      	ldrh	r4, [r0, #10]
   d639e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d63a0:	b209      	sxth	r1, r1
    y -= (h-1);
   d63a2:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d63a4:	9502      	str	r5, [sp, #8]
   d63a6:	4622      	mov	r2, r4
}
   d63a8:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d63aa:	f7ff bf33 	b.w	d6214 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d63ae:	8942      	ldrh	r2, [r0, #10]
   d63b0:	43c9      	mvns	r1, r1
   d63b2:	4411      	add	r1, r2
   d63b4:	b209      	sxth	r1, r1
    break;
   d63b6:	e7e7      	b.n	d6388 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d63b8 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d63b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d63bc:	4604      	mov	r4, r0
  TRANSACTION_START
   d63be:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d63c0:	2800      	cmp	r0, #0
   d63c2:	d042      	beq.n	d644a <_ZN16Adafruit_SSD13067displayEv+0x92>
   d63c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d63c6:	f001 f8eb 	bl	d75a0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d63ca:	4947      	ldr	r1, [pc, #284]	; (d64e8 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d63cc:	2205      	movs	r2, #5
   d63ce:	4620      	mov	r0, r4
   d63d0:	f7ff fd29 	bl	d5e26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d63d4:	7a21      	ldrb	r1, [r4, #8]
   d63d6:	3901      	subs	r1, #1
   d63d8:	4620      	mov	r0, r4
   d63da:	b2c9      	uxtb	r1, r1
   d63dc:	f7ff fcbc 	bl	d5d58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d63e0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d63e4:	1dde      	adds	r6, r3, #7
   d63e6:	bf48      	it	mi
   d63e8:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d63ec:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d63f0:	8923      	ldrh	r3, [r4, #8]
   d63f2:	10f6      	asrs	r6, r6, #3
   d63f4:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d63f8:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d63fc:	2800      	cmp	r0, #0
   d63fe:	d03a      	beq.n	d6476 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d6400:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d6404:	f001 f906 	bl	d7614 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d6408:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d640a:	6803      	ldr	r3, [r0, #0]
   d640c:	2140      	movs	r1, #64	; 0x40
   d640e:	689b      	ldr	r3, [r3, #8]
   d6410:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d6412:	2701      	movs	r7, #1
    while(count--) {
   d6414:	42b5      	cmp	r5, r6
   d6416:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6418:	d024      	beq.n	d6464 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d641a:	2f1f      	cmp	r7, #31
   d641c:	d90c      	bls.n	d6438 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d641e:	f001 f900 	bl	d7622 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d6422:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d6426:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6428:	f001 f8f4 	bl	d7614 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d642c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d642e:	6803      	ldr	r3, [r0, #0]
   d6430:	2140      	movs	r1, #64	; 0x40
   d6432:	689b      	ldr	r3, [r3, #8]
   d6434:	4798      	blx	r3
        bytesOut = 1;
   d6436:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d6438:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d643a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d643e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d6440:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d6442:	689b      	ldr	r3, [r3, #8]
   d6444:	4798      	blx	r3
      bytesOut++;
   d6446:	b2ff      	uxtb	r7, r7
    while(count--) {
   d6448:	e7e4      	b.n	d6414 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d644a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d644c:	b118      	cbz	r0, d6456 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d644e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d6452:	f000 fbab 	bl	d6bac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d6456:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d645a:	2100      	movs	r1, #0
   d645c:	b280      	uxth	r0, r0
   d645e:	f001 fd00 	bl	d7e62 <digitalWrite>
   d6462:	e7b2      	b.n	d63ca <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d6464:	f001 f8dd 	bl	d7622 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d6468:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d646a:	b378      	cbz	r0, d64cc <_ZN16Adafruit_SSD13067displayEv+0x114>
   d646c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d646e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6472:	f001 b895 	b.w	d75a0 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d6476:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d647a:	2101      	movs	r1, #1
   d647c:	b280      	uxth	r0, r0
   d647e:	f001 fcf0 	bl	d7e62 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d6482:	42b5      	cmp	r5, r6
   d6484:	d0f0      	beq.n	d6468 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d6486:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d6488:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d648c:	b118      	cbz	r0, d6496 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d648e:	4649      	mov	r1, r9
   d6490:	f000 fbfa 	bl	d6c88 <_ZN8SPIClass8transferEh>
   d6494:	e7f5      	b.n	d6482 <_ZN16Adafruit_SSD13067displayEv+0xca>
   d6496:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d6498:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d649c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d64a0:	ea09 0108 	and.w	r1, r9, r8
   d64a4:	b280      	uxth	r0, r0
   d64a6:	f001 fcdc 	bl	d7e62 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d64aa:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d64ae:	2101      	movs	r1, #1
   d64b0:	b280      	uxth	r0, r0
   d64b2:	f001 fcd6 	bl	d7e62 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d64b6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d64ba:	2100      	movs	r1, #0
   d64bc:	b280      	uxth	r0, r0
   d64be:	f001 fcd0 	bl	d7e62 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d64c2:	3f01      	subs	r7, #1
   d64c4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d64c8:	d1e8      	bne.n	d649c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d64ca:	e7da      	b.n	d6482 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d64cc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d64d0:	2101      	movs	r1, #1
   d64d2:	b280      	uxth	r0, r0
   d64d4:	f001 fcc5 	bl	d7e62 <digitalWrite>
   d64d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d64da:	b118      	cbz	r0, d64e4 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d64dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d64e0:	f000 bb4b 	b.w	d6b7a <_ZN8SPIClass14endTransactionEv>
}
   d64e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d64e8:	000d995c 	.word	0x000d995c

000d64ec <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d64ec:	f000 bdd2 	b.w	d7094 <delay>

000d64f0 <_Z11BlynkMillisv>:
   d64f0:	f000 b880 	b.w	d65f4 <HAL_Timer_Get_Milli_Seconds>

000d64f4 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d64f4:	4770      	bx	lr

000d64f6 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d64f6:	4770      	bx	lr

000d64f8 <BlynkNoOpCbk>:
{}
   d64f8:	4770      	bx	lr
	...

000d64fc <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d64fc:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d64fe:	bf5a      	itte	pl
   d6500:	4b02      	ldrpl	r3, [pc, #8]	; (d650c <GetReadHandler+0x10>)
   d6502:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d6506:	2000      	movmi	r0, #0
#endif
}
   d6508:	4770      	bx	lr
   d650a:	bf00      	nop
   d650c:	000d9964 	.word	0x000d9964

000d6510 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d6510:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d6512:	bf5a      	itte	pl
   d6514:	4b02      	ldrpl	r3, [pc, #8]	; (d6520 <GetWriteHandler+0x10>)
   d6516:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d651a:	2000      	movmi	r0, #0
#endif
}
   d651c:	4770      	bx	lr
   d651e:	bf00      	nop
   d6520:	000d9b64 	.word	0x000d9b64

000d6524 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6524:	b508      	push	{r3, lr}
   d6526:	4b02      	ldr	r3, [pc, #8]	; (d6530 <netdb_freeaddrinfo+0xc>)
   d6528:	681b      	ldr	r3, [r3, #0]
   d652a:	689b      	ldr	r3, [r3, #8]
   d652c:	9301      	str	r3, [sp, #4]
   d652e:	bd08      	pop	{r3, pc}
   d6530:	00030268 	.word	0x00030268

000d6534 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6534:	b508      	push	{r3, lr}
   d6536:	4b02      	ldr	r3, [pc, #8]	; (d6540 <netdb_getaddrinfo+0xc>)
   d6538:	681b      	ldr	r3, [r3, #0]
   d653a:	68db      	ldr	r3, [r3, #12]
   d653c:	9301      	str	r3, [sp, #4]
   d653e:	bd08      	pop	{r3, pc}
   d6540:	00030268 	.word	0x00030268

000d6544 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6544:	b508      	push	{r3, lr}
   d6546:	4b02      	ldr	r3, [pc, #8]	; (d6550 <HAL_Validate_Pin_Function+0xc>)
   d6548:	681b      	ldr	r3, [r3, #0]
   d654a:	685b      	ldr	r3, [r3, #4]
   d654c:	9301      	str	r3, [sp, #4]
   d654e:	bd08      	pop	{r3, pc}
   d6550:	0003022c 	.word	0x0003022c

000d6554 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6554:	b508      	push	{r3, lr}
   d6556:	4b02      	ldr	r3, [pc, #8]	; (d6560 <HAL_Pin_Mode+0xc>)
   d6558:	681b      	ldr	r3, [r3, #0]
   d655a:	689b      	ldr	r3, [r3, #8]
   d655c:	9301      	str	r3, [sp, #4]
   d655e:	bd08      	pop	{r3, pc}
   d6560:	0003022c 	.word	0x0003022c

000d6564 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6564:	b508      	push	{r3, lr}
   d6566:	4b02      	ldr	r3, [pc, #8]	; (d6570 <HAL_Get_Pin_Mode+0xc>)
   d6568:	681b      	ldr	r3, [r3, #0]
   d656a:	68db      	ldr	r3, [r3, #12]
   d656c:	9301      	str	r3, [sp, #4]
   d656e:	bd08      	pop	{r3, pc}
   d6570:	0003022c 	.word	0x0003022c

000d6574 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6574:	b508      	push	{r3, lr}
   d6576:	4b02      	ldr	r3, [pc, #8]	; (d6580 <HAL_GPIO_Write+0xc>)
   d6578:	681b      	ldr	r3, [r3, #0]
   d657a:	691b      	ldr	r3, [r3, #16]
   d657c:	9301      	str	r3, [sp, #4]
   d657e:	bd08      	pop	{r3, pc}
   d6580:	0003022c 	.word	0x0003022c

000d6584 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6584:	b508      	push	{r3, lr}
   d6586:	4b02      	ldr	r3, [pc, #8]	; (d6590 <HAL_GPIO_Read+0xc>)
   d6588:	681b      	ldr	r3, [r3, #0]
   d658a:	695b      	ldr	r3, [r3, #20]
   d658c:	9301      	str	r3, [sp, #4]
   d658e:	bd08      	pop	{r3, pc}
   d6590:	0003022c 	.word	0x0003022c

000d6594 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d6594:	b508      	push	{r3, lr}
   d6596:	4b02      	ldr	r3, [pc, #8]	; (d65a0 <HAL_DAC_Write+0xc>)
   d6598:	681b      	ldr	r3, [r3, #0]
   d659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d659c:	9301      	str	r3, [sp, #4]
   d659e:	bd08      	pop	{r3, pc}
   d65a0:	0003022c 	.word	0x0003022c

000d65a4 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d65a4:	b508      	push	{r3, lr}
   d65a6:	4b02      	ldr	r3, [pc, #8]	; (d65b0 <hal_adc_read+0xc>)
   d65a8:	681b      	ldr	r3, [r3, #0]
   d65aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d65ac:	9301      	str	r3, [sp, #4]
   d65ae:	bd08      	pop	{r3, pc}
   d65b0:	0003022c 	.word	0x0003022c

000d65b4 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d65b4:	b508      	push	{r3, lr}
   d65b6:	4b02      	ldr	r3, [pc, #8]	; (d65c0 <hal_pwm_write_ext+0xc>)
   d65b8:	681b      	ldr	r3, [r3, #0]
   d65ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d65bc:	9301      	str	r3, [sp, #4]
   d65be:	bd08      	pop	{r3, pc}
   d65c0:	0003022c 	.word	0x0003022c

000d65c4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d65c4:	b508      	push	{r3, lr}
   d65c6:	4b02      	ldr	r3, [pc, #8]	; (d65d0 <if_index_to_name+0xc>)
   d65c8:	681b      	ldr	r3, [r3, #0]
   d65ca:	695b      	ldr	r3, [r3, #20]
   d65cc:	9301      	str	r3, [sp, #4]
   d65ce:	bd08      	pop	{r3, pc}
   d65d0:	0003026c 	.word	0x0003026c

000d65d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d65d4:	b508      	push	{r3, lr}
   d65d6:	4b02      	ldr	r3, [pc, #8]	; (d65e0 <HAL_RNG_GetRandomNumber+0xc>)
   d65d8:	681b      	ldr	r3, [r3, #0]
   d65da:	685b      	ldr	r3, [r3, #4]
   d65dc:	9301      	str	r3, [sp, #4]
   d65de:	bd08      	pop	{r3, pc}
   d65e0:	00030218 	.word	0x00030218

000d65e4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d65e4:	b508      	push	{r3, lr}
   d65e6:	4b02      	ldr	r3, [pc, #8]	; (d65f0 <HAL_Delay_Microseconds+0xc>)
   d65e8:	681b      	ldr	r3, [r3, #0]
   d65ea:	68db      	ldr	r3, [r3, #12]
   d65ec:	9301      	str	r3, [sp, #4]
   d65ee:	bd08      	pop	{r3, pc}
   d65f0:	00030218 	.word	0x00030218

000d65f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d65f4:	b508      	push	{r3, lr}
   d65f6:	4b02      	ldr	r3, [pc, #8]	; (d6600 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d65f8:	681b      	ldr	r3, [r3, #0]
   d65fa:	695b      	ldr	r3, [r3, #20]
   d65fc:	9301      	str	r3, [sp, #4]
   d65fe:	bd08      	pop	{r3, pc}
   d6600:	00030218 	.word	0x00030218

000d6604 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6604:	b508      	push	{r3, lr}
   d6606:	4b02      	ldr	r3, [pc, #8]	; (d6610 <os_mutex_create+0xc>)
   d6608:	681b      	ldr	r3, [r3, #0]
   d660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d660c:	9301      	str	r3, [sp, #4]
   d660e:	bd08      	pop	{r3, pc}
   d6610:	00030248 	.word	0x00030248

000d6614 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d6614:	b508      	push	{r3, lr}
   d6616:	4b02      	ldr	r3, [pc, #8]	; (d6620 <os_mutex_destroy+0xc>)
   d6618:	681b      	ldr	r3, [r3, #0]
   d661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d661c:	9301      	str	r3, [sp, #4]
   d661e:	bd08      	pop	{r3, pc}
   d6620:	00030248 	.word	0x00030248

000d6624 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6624:	b508      	push	{r3, lr}
   d6626:	4b02      	ldr	r3, [pc, #8]	; (d6630 <os_mutex_recursive_create+0xc>)
   d6628:	681b      	ldr	r3, [r3, #0]
   d662a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d662c:	9301      	str	r3, [sp, #4]
   d662e:	bd08      	pop	{r3, pc}
   d6630:	00030248 	.word	0x00030248

000d6634 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6634:	b508      	push	{r3, lr}
   d6636:	4b02      	ldr	r3, [pc, #8]	; (d6640 <os_mutex_recursive_destroy+0xc>)
   d6638:	681b      	ldr	r3, [r3, #0]
   d663a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d663c:	9301      	str	r3, [sp, #4]
   d663e:	bd08      	pop	{r3, pc}
   d6640:	00030248 	.word	0x00030248

000d6644 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6644:	b508      	push	{r3, lr}
   d6646:	4b02      	ldr	r3, [pc, #8]	; (d6650 <inet_inet_ntop+0xc>)
   d6648:	681b      	ldr	r3, [r3, #0]
   d664a:	695b      	ldr	r3, [r3, #20]
   d664c:	9301      	str	r3, [sp, #4]
   d664e:	bd08      	pop	{r3, pc}
   d6650:	00030264 	.word	0x00030264

000d6654 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6654:	b508      	push	{r3, lr}
   d6656:	4b02      	ldr	r3, [pc, #8]	; (d6660 <inet_htonl+0xc>)
   d6658:	681b      	ldr	r3, [r3, #0]
   d665a:	6a1b      	ldr	r3, [r3, #32]
   d665c:	9301      	str	r3, [sp, #4]
   d665e:	bd08      	pop	{r3, pc}
   d6660:	00030264 	.word	0x00030264

000d6664 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6664:	b508      	push	{r3, lr}
   d6666:	4b02      	ldr	r3, [pc, #8]	; (d6670 <inet_htons+0xc>)
   d6668:	681b      	ldr	r3, [r3, #0]
   d666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d666c:	9301      	str	r3, [sp, #4]
   d666e:	bd08      	pop	{r3, pc}
   d6670:	00030264 	.word	0x00030264

000d6674 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6674:	b508      	push	{r3, lr}
   d6676:	4b02      	ldr	r3, [pc, #8]	; (d6680 <hal_usart_init+0xc>)
   d6678:	681b      	ldr	r3, [r3, #0]
   d667a:	681b      	ldr	r3, [r3, #0]
   d667c:	9301      	str	r3, [sp, #4]
   d667e:	bd08      	pop	{r3, pc}
   d6680:	0003023c 	.word	0x0003023c

000d6684 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6684:	b508      	push	{r3, lr}
   d6686:	4b02      	ldr	r3, [pc, #8]	; (d6690 <hal_usart_write+0xc>)
   d6688:	681b      	ldr	r3, [r3, #0]
   d668a:	68db      	ldr	r3, [r3, #12]
   d668c:	9301      	str	r3, [sp, #4]
   d668e:	bd08      	pop	{r3, pc}
   d6690:	0003023c 	.word	0x0003023c

000d6694 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6694:	b508      	push	{r3, lr}
   d6696:	4b02      	ldr	r3, [pc, #8]	; (d66a0 <hal_usart_available+0xc>)
   d6698:	681b      	ldr	r3, [r3, #0]
   d669a:	691b      	ldr	r3, [r3, #16]
   d669c:	9301      	str	r3, [sp, #4]
   d669e:	bd08      	pop	{r3, pc}
   d66a0:	0003023c 	.word	0x0003023c

000d66a4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d66a4:	b508      	push	{r3, lr}
   d66a6:	4b02      	ldr	r3, [pc, #8]	; (d66b0 <hal_usart_read+0xc>)
   d66a8:	681b      	ldr	r3, [r3, #0]
   d66aa:	695b      	ldr	r3, [r3, #20]
   d66ac:	9301      	str	r3, [sp, #4]
   d66ae:	bd08      	pop	{r3, pc}
   d66b0:	0003023c 	.word	0x0003023c

000d66b4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d66b4:	b508      	push	{r3, lr}
   d66b6:	4b02      	ldr	r3, [pc, #8]	; (d66c0 <hal_usart_peek+0xc>)
   d66b8:	681b      	ldr	r3, [r3, #0]
   d66ba:	699b      	ldr	r3, [r3, #24]
   d66bc:	9301      	str	r3, [sp, #4]
   d66be:	bd08      	pop	{r3, pc}
   d66c0:	0003023c 	.word	0x0003023c

000d66c4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d66c4:	b508      	push	{r3, lr}
   d66c6:	4b02      	ldr	r3, [pc, #8]	; (d66d0 <hal_usart_flush+0xc>)
   d66c8:	681b      	ldr	r3, [r3, #0]
   d66ca:	69db      	ldr	r3, [r3, #28]
   d66cc:	9301      	str	r3, [sp, #4]
   d66ce:	bd08      	pop	{r3, pc}
   d66d0:	0003023c 	.word	0x0003023c

000d66d4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d66d4:	b508      	push	{r3, lr}
   d66d6:	4b02      	ldr	r3, [pc, #8]	; (d66e0 <hal_usart_is_enabled+0xc>)
   d66d8:	681b      	ldr	r3, [r3, #0]
   d66da:	6a1b      	ldr	r3, [r3, #32]
   d66dc:	9301      	str	r3, [sp, #4]
   d66de:	bd08      	pop	{r3, pc}
   d66e0:	0003023c 	.word	0x0003023c

000d66e4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d66e4:	b508      	push	{r3, lr}
   d66e6:	4b02      	ldr	r3, [pc, #8]	; (d66f0 <hal_usart_available_data_for_write+0xc>)
   d66e8:	681b      	ldr	r3, [r3, #0]
   d66ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d66ec:	9301      	str	r3, [sp, #4]
   d66ee:	bd08      	pop	{r3, pc}
   d66f0:	0003023c 	.word	0x0003023c

000d66f4 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d66f4:	b508      	push	{r3, lr}
   d66f6:	4b02      	ldr	r3, [pc, #8]	; (d6700 <hal_i2c_set_speed+0xc>)
   d66f8:	681b      	ldr	r3, [r3, #0]
   d66fa:	681b      	ldr	r3, [r3, #0]
   d66fc:	9301      	str	r3, [sp, #4]
   d66fe:	bd08      	pop	{r3, pc}
   d6700:	00030228 	.word	0x00030228

000d6704 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6704:	b508      	push	{r3, lr}
   d6706:	4b02      	ldr	r3, [pc, #8]	; (d6710 <hal_i2c_begin+0xc>)
   d6708:	681b      	ldr	r3, [r3, #0]
   d670a:	68db      	ldr	r3, [r3, #12]
   d670c:	9301      	str	r3, [sp, #4]
   d670e:	bd08      	pop	{r3, pc}
   d6710:	00030228 	.word	0x00030228

000d6714 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6714:	b508      	push	{r3, lr}
   d6716:	4b02      	ldr	r3, [pc, #8]	; (d6720 <hal_i2c_begin_transmission+0xc>)
   d6718:	681b      	ldr	r3, [r3, #0]
   d671a:	699b      	ldr	r3, [r3, #24]
   d671c:	9301      	str	r3, [sp, #4]
   d671e:	bd08      	pop	{r3, pc}
   d6720:	00030228 	.word	0x00030228

000d6724 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6724:	b508      	push	{r3, lr}
   d6726:	4b02      	ldr	r3, [pc, #8]	; (d6730 <hal_i2c_end_transmission+0xc>)
   d6728:	681b      	ldr	r3, [r3, #0]
   d672a:	69db      	ldr	r3, [r3, #28]
   d672c:	9301      	str	r3, [sp, #4]
   d672e:	bd08      	pop	{r3, pc}
   d6730:	00030228 	.word	0x00030228

000d6734 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6734:	b508      	push	{r3, lr}
   d6736:	4b02      	ldr	r3, [pc, #8]	; (d6740 <hal_i2c_write+0xc>)
   d6738:	681b      	ldr	r3, [r3, #0]
   d673a:	6a1b      	ldr	r3, [r3, #32]
   d673c:	9301      	str	r3, [sp, #4]
   d673e:	bd08      	pop	{r3, pc}
   d6740:	00030228 	.word	0x00030228

000d6744 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6744:	b508      	push	{r3, lr}
   d6746:	4b02      	ldr	r3, [pc, #8]	; (d6750 <hal_i2c_available+0xc>)
   d6748:	681b      	ldr	r3, [r3, #0]
   d674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d674c:	9301      	str	r3, [sp, #4]
   d674e:	bd08      	pop	{r3, pc}
   d6750:	00030228 	.word	0x00030228

000d6754 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6754:	b508      	push	{r3, lr}
   d6756:	4b02      	ldr	r3, [pc, #8]	; (d6760 <hal_i2c_read+0xc>)
   d6758:	681b      	ldr	r3, [r3, #0]
   d675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d675c:	9301      	str	r3, [sp, #4]
   d675e:	bd08      	pop	{r3, pc}
   d6760:	00030228 	.word	0x00030228

000d6764 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6764:	b508      	push	{r3, lr}
   d6766:	4b02      	ldr	r3, [pc, #8]	; (d6770 <hal_i2c_peek+0xc>)
   d6768:	681b      	ldr	r3, [r3, #0]
   d676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d676c:	9301      	str	r3, [sp, #4]
   d676e:	bd08      	pop	{r3, pc}
   d6770:	00030228 	.word	0x00030228

000d6774 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6774:	b508      	push	{r3, lr}
   d6776:	4b02      	ldr	r3, [pc, #8]	; (d6780 <hal_i2c_flush+0xc>)
   d6778:	681b      	ldr	r3, [r3, #0]
   d677a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d677c:	9301      	str	r3, [sp, #4]
   d677e:	bd08      	pop	{r3, pc}
   d6780:	00030228 	.word	0x00030228

000d6784 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6784:	b508      	push	{r3, lr}
   d6786:	4b02      	ldr	r3, [pc, #8]	; (d6790 <hal_i2c_is_enabled+0xc>)
   d6788:	681b      	ldr	r3, [r3, #0]
   d678a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d678c:	9301      	str	r3, [sp, #4]
   d678e:	bd08      	pop	{r3, pc}
   d6790:	00030228 	.word	0x00030228

000d6794 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6794:	b508      	push	{r3, lr}
   d6796:	4b02      	ldr	r3, [pc, #8]	; (d67a0 <hal_i2c_init+0xc>)
   d6798:	681b      	ldr	r3, [r3, #0]
   d679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d679c:	9301      	str	r3, [sp, #4]
   d679e:	bd08      	pop	{r3, pc}
   d67a0:	00030228 	.word	0x00030228

000d67a4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d67a4:	b508      	push	{r3, lr}
   d67a6:	4b02      	ldr	r3, [pc, #8]	; (d67b0 <hal_i2c_request_ex+0xc>)
   d67a8:	681b      	ldr	r3, [r3, #0]
   d67aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d67ac:	9301      	str	r3, [sp, #4]
   d67ae:	bd08      	pop	{r3, pc}
   d67b0:	00030228 	.word	0x00030228

000d67b4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d67b4:	b508      	push	{r3, lr}
   d67b6:	4b02      	ldr	r3, [pc, #8]	; (d67c0 <sock_setsockopt+0xc>)
   d67b8:	681b      	ldr	r3, [r3, #0]
   d67ba:	699b      	ldr	r3, [r3, #24]
   d67bc:	9301      	str	r3, [sp, #4]
   d67be:	bd08      	pop	{r3, pc}
   d67c0:	00030238 	.word	0x00030238

000d67c4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d67c4:	b508      	push	{r3, lr}
   d67c6:	4b02      	ldr	r3, [pc, #8]	; (d67d0 <sock_close+0xc>)
   d67c8:	681b      	ldr	r3, [r3, #0]
   d67ca:	69db      	ldr	r3, [r3, #28]
   d67cc:	9301      	str	r3, [sp, #4]
   d67ce:	bd08      	pop	{r3, pc}
   d67d0:	00030238 	.word	0x00030238

000d67d4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d67d4:	b508      	push	{r3, lr}
   d67d6:	4b02      	ldr	r3, [pc, #8]	; (d67e0 <sock_connect+0xc>)
   d67d8:	681b      	ldr	r3, [r3, #0]
   d67da:	6a1b      	ldr	r3, [r3, #32]
   d67dc:	9301      	str	r3, [sp, #4]
   d67de:	bd08      	pop	{r3, pc}
   d67e0:	00030238 	.word	0x00030238

000d67e4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d67e4:	b508      	push	{r3, lr}
   d67e6:	4b02      	ldr	r3, [pc, #8]	; (d67f0 <sock_recv+0xc>)
   d67e8:	681b      	ldr	r3, [r3, #0]
   d67ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d67ec:	9301      	str	r3, [sp, #4]
   d67ee:	bd08      	pop	{r3, pc}
   d67f0:	00030238 	.word	0x00030238

000d67f4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d67f4:	b508      	push	{r3, lr}
   d67f6:	4b02      	ldr	r3, [pc, #8]	; (d6800 <sock_send+0xc>)
   d67f8:	681b      	ldr	r3, [r3, #0]
   d67fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d67fc:	9301      	str	r3, [sp, #4]
   d67fe:	bd08      	pop	{r3, pc}
   d6800:	00030238 	.word	0x00030238

000d6804 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6804:	b508      	push	{r3, lr}
   d6806:	4b02      	ldr	r3, [pc, #8]	; (d6810 <sock_socket+0xc>)
   d6808:	681b      	ldr	r3, [r3, #0]
   d680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d680c:	9301      	str	r3, [sp, #4]
   d680e:	bd08      	pop	{r3, pc}
   d6810:	00030238 	.word	0x00030238

000d6814 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d6814:	b508      	push	{r3, lr}
   d6816:	4b02      	ldr	r3, [pc, #8]	; (d6820 <hal_spi_begin+0xc>)
   d6818:	681b      	ldr	r3, [r3, #0]
   d681a:	681b      	ldr	r3, [r3, #0]
   d681c:	9301      	str	r3, [sp, #4]
   d681e:	bd08      	pop	{r3, pc}
   d6820:	00030230 	.word	0x00030230

000d6824 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d6824:	b508      	push	{r3, lr}
   d6826:	4b02      	ldr	r3, [pc, #8]	; (d6830 <hal_spi_transfer+0xc>)
   d6828:	681b      	ldr	r3, [r3, #0]
   d682a:	695b      	ldr	r3, [r3, #20]
   d682c:	9301      	str	r3, [sp, #4]
   d682e:	bd08      	pop	{r3, pc}
   d6830:	00030230 	.word	0x00030230

000d6834 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6834:	b508      	push	{r3, lr}
   d6836:	4b02      	ldr	r3, [pc, #8]	; (d6840 <hal_spi_init+0xc>)
   d6838:	681b      	ldr	r3, [r3, #0]
   d683a:	69db      	ldr	r3, [r3, #28]
   d683c:	9301      	str	r3, [sp, #4]
   d683e:	bd08      	pop	{r3, pc}
   d6840:	00030230 	.word	0x00030230

000d6844 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6844:	b508      	push	{r3, lr}
   d6846:	4b02      	ldr	r3, [pc, #8]	; (d6850 <hal_spi_is_enabled+0xc>)
   d6848:	681b      	ldr	r3, [r3, #0]
   d684a:	6a1b      	ldr	r3, [r3, #32]
   d684c:	9301      	str	r3, [sp, #4]
   d684e:	bd08      	pop	{r3, pc}
   d6850:	00030230 	.word	0x00030230

000d6854 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d6854:	b508      	push	{r3, lr}
   d6856:	4b02      	ldr	r3, [pc, #8]	; (d6860 <hal_spi_info+0xc>)
   d6858:	681b      	ldr	r3, [r3, #0]
   d685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d685c:	9301      	str	r3, [sp, #4]
   d685e:	bd08      	pop	{r3, pc}
   d6860:	00030230 	.word	0x00030230

000d6864 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6864:	b508      	push	{r3, lr}
   d6866:	4b02      	ldr	r3, [pc, #8]	; (d6870 <hal_spi_set_settings+0xc>)
   d6868:	681b      	ldr	r3, [r3, #0]
   d686a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d686c:	9301      	str	r3, [sp, #4]
   d686e:	bd08      	pop	{r3, pc}
   d6870:	00030230 	.word	0x00030230

000d6874 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d6874:	b508      	push	{r3, lr}
   d6876:	4b02      	ldr	r3, [pc, #8]	; (d6880 <hal_spi_acquire+0xc>)
   d6878:	681b      	ldr	r3, [r3, #0]
   d687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d687c:	9301      	str	r3, [sp, #4]
   d687e:	bd08      	pop	{r3, pc}
   d6880:	00030230 	.word	0x00030230

000d6884 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d6884:	b508      	push	{r3, lr}
   d6886:	4b02      	ldr	r3, [pc, #8]	; (d6890 <hal_spi_release+0xc>)
   d6888:	681b      	ldr	r3, [r3, #0]
   d688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d688c:	9301      	str	r3, [sp, #4]
   d688e:	bd08      	pop	{r3, pc}
   d6890:	00030230 	.word	0x00030230

000d6894 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6894:	b508      	push	{r3, lr}
   d6896:	4b02      	ldr	r3, [pc, #8]	; (d68a0 <HAL_USB_USART_Init+0xc>)
   d6898:	681b      	ldr	r3, [r3, #0]
   d689a:	681b      	ldr	r3, [r3, #0]
   d689c:	9301      	str	r3, [sp, #4]
   d689e:	bd08      	pop	{r3, pc}
   d68a0:	0003024c 	.word	0x0003024c

000d68a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d68a4:	b508      	push	{r3, lr}
   d68a6:	4b02      	ldr	r3, [pc, #8]	; (d68b0 <HAL_USB_USART_Begin+0xc>)
   d68a8:	681b      	ldr	r3, [r3, #0]
   d68aa:	685b      	ldr	r3, [r3, #4]
   d68ac:	9301      	str	r3, [sp, #4]
   d68ae:	bd08      	pop	{r3, pc}
   d68b0:	0003024c 	.word	0x0003024c

000d68b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d68b4:	b508      	push	{r3, lr}
   d68b6:	4b02      	ldr	r3, [pc, #8]	; (d68c0 <HAL_USB_USART_Available_Data+0xc>)
   d68b8:	681b      	ldr	r3, [r3, #0]
   d68ba:	691b      	ldr	r3, [r3, #16]
   d68bc:	9301      	str	r3, [sp, #4]
   d68be:	bd08      	pop	{r3, pc}
   d68c0:	0003024c 	.word	0x0003024c

000d68c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d68c4:	b508      	push	{r3, lr}
   d68c6:	4b02      	ldr	r3, [pc, #8]	; (d68d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d68c8:	681b      	ldr	r3, [r3, #0]
   d68ca:	695b      	ldr	r3, [r3, #20]
   d68cc:	9301      	str	r3, [sp, #4]
   d68ce:	bd08      	pop	{r3, pc}
   d68d0:	0003024c 	.word	0x0003024c

000d68d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d68d4:	b508      	push	{r3, lr}
   d68d6:	4b02      	ldr	r3, [pc, #8]	; (d68e0 <HAL_USB_USART_Receive_Data+0xc>)
   d68d8:	681b      	ldr	r3, [r3, #0]
   d68da:	699b      	ldr	r3, [r3, #24]
   d68dc:	9301      	str	r3, [sp, #4]
   d68de:	bd08      	pop	{r3, pc}
   d68e0:	0003024c 	.word	0x0003024c

000d68e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d68e4:	b508      	push	{r3, lr}
   d68e6:	4b02      	ldr	r3, [pc, #8]	; (d68f0 <HAL_USB_USART_Send_Data+0xc>)
   d68e8:	681b      	ldr	r3, [r3, #0]
   d68ea:	69db      	ldr	r3, [r3, #28]
   d68ec:	9301      	str	r3, [sp, #4]
   d68ee:	bd08      	pop	{r3, pc}
   d68f0:	0003024c 	.word	0x0003024c

000d68f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d68f4:	b508      	push	{r3, lr}
   d68f6:	4b02      	ldr	r3, [pc, #8]	; (d6900 <HAL_USB_USART_Flush_Data+0xc>)
   d68f8:	681b      	ldr	r3, [r3, #0]
   d68fa:	6a1b      	ldr	r3, [r3, #32]
   d68fc:	9301      	str	r3, [sp, #4]
   d68fe:	bd08      	pop	{r3, pc}
   d6900:	0003024c 	.word	0x0003024c

000d6904 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6904:	b508      	push	{r3, lr}
   d6906:	4b02      	ldr	r3, [pc, #8]	; (d6910 <panic_+0xc>)
   d6908:	681b      	ldr	r3, [r3, #0]
   d690a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d690c:	9301      	str	r3, [sp, #4]
   d690e:	bd08      	pop	{r3, pc}
   d6910:	00030260 	.word	0x00030260

000d6914 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6914:	b508      	push	{r3, lr}
   d6916:	4b02      	ldr	r3, [pc, #8]	; (d6920 <log_message+0xc>)
   d6918:	681b      	ldr	r3, [r3, #0]
   d691a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d691c:	9301      	str	r3, [sp, #4]
   d691e:	bd08      	pop	{r3, pc}
   d6920:	00030260 	.word	0x00030260

000d6924 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6924:	b508      	push	{r3, lr}
   d6926:	4b02      	ldr	r3, [pc, #8]	; (d6930 <set_system_mode+0xc>)
   d6928:	681b      	ldr	r3, [r3, #0]
   d692a:	685b      	ldr	r3, [r3, #4]
   d692c:	9301      	str	r3, [sp, #4]
   d692e:	bd08      	pop	{r3, pc}
   d6930:	00030220 	.word	0x00030220

000d6934 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6934:	b508      	push	{r3, lr}
   d6936:	4b02      	ldr	r3, [pc, #8]	; (d6940 <system_delay_ms+0xc>)
   d6938:	681b      	ldr	r3, [r3, #0]
   d693a:	695b      	ldr	r3, [r3, #20]
   d693c:	9301      	str	r3, [sp, #4]
   d693e:	bd08      	pop	{r3, pc}
   d6940:	00030220 	.word	0x00030220

000d6944 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6944:	b508      	push	{r3, lr}
   d6946:	4b02      	ldr	r3, [pc, #8]	; (d6950 <system_thread_set_state+0xc>)
   d6948:	681b      	ldr	r3, [r3, #0]
   d694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d694c:	9301      	str	r3, [sp, #4]
   d694e:	bd08      	pop	{r3, pc}
   d6950:	00030220 	.word	0x00030220

000d6954 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6954:	b508      	push	{r3, lr}
   d6956:	4b03      	ldr	r3, [pc, #12]	; (d6964 <system_ctrl_set_app_request_handler+0x10>)
   d6958:	681b      	ldr	r3, [r3, #0]
   d695a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d695e:	9301      	str	r3, [sp, #4]
   d6960:	bd08      	pop	{r3, pc}
   d6962:	0000      	.short	0x0000
   d6964:	00030220 	.word	0x00030220

000d6968 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6968:	b508      	push	{r3, lr}
   d696a:	4b03      	ldr	r3, [pc, #12]	; (d6978 <system_ctrl_set_result+0x10>)
   d696c:	681b      	ldr	r3, [r3, #0]
   d696e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6972:	9301      	str	r3, [sp, #4]
   d6974:	bd08      	pop	{r3, pc}
   d6976:	0000      	.short	0x0000
   d6978:	00030220 	.word	0x00030220

000d697c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d697c:	b508      	push	{r3, lr}
   d697e:	4b02      	ldr	r3, [pc, #8]	; (d6988 <network_connect+0xc>)
   d6980:	681b      	ldr	r3, [r3, #0]
   d6982:	685b      	ldr	r3, [r3, #4]
   d6984:	9301      	str	r3, [sp, #4]
   d6986:	bd08      	pop	{r3, pc}
   d6988:	00030240 	.word	0x00030240

000d698c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d698c:	b508      	push	{r3, lr}
   d698e:	4b02      	ldr	r3, [pc, #8]	; (d6998 <network_connecting+0xc>)
   d6990:	681b      	ldr	r3, [r3, #0]
   d6992:	689b      	ldr	r3, [r3, #8]
   d6994:	9301      	str	r3, [sp, #4]
   d6996:	bd08      	pop	{r3, pc}
   d6998:	00030240 	.word	0x00030240

000d699c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d699c:	b508      	push	{r3, lr}
   d699e:	4b02      	ldr	r3, [pc, #8]	; (d69a8 <network_disconnect+0xc>)
   d69a0:	681b      	ldr	r3, [r3, #0]
   d69a2:	68db      	ldr	r3, [r3, #12]
   d69a4:	9301      	str	r3, [sp, #4]
   d69a6:	bd08      	pop	{r3, pc}
   d69a8:	00030240 	.word	0x00030240

000d69ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d69ac:	b508      	push	{r3, lr}
   d69ae:	4b02      	ldr	r3, [pc, #8]	; (d69b8 <network_ready+0xc>)
   d69b0:	681b      	ldr	r3, [r3, #0]
   d69b2:	691b      	ldr	r3, [r3, #16]
   d69b4:	9301      	str	r3, [sp, #4]
   d69b6:	bd08      	pop	{r3, pc}
   d69b8:	00030240 	.word	0x00030240

000d69bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d69bc:	b508      	push	{r3, lr}
   d69be:	4b02      	ldr	r3, [pc, #8]	; (d69c8 <network_on+0xc>)
   d69c0:	681b      	ldr	r3, [r3, #0]
   d69c2:	695b      	ldr	r3, [r3, #20]
   d69c4:	9301      	str	r3, [sp, #4]
   d69c6:	bd08      	pop	{r3, pc}
   d69c8:	00030240 	.word	0x00030240

000d69cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d69cc:	b508      	push	{r3, lr}
   d69ce:	4b02      	ldr	r3, [pc, #8]	; (d69d8 <network_off+0xc>)
   d69d0:	681b      	ldr	r3, [r3, #0]
   d69d2:	699b      	ldr	r3, [r3, #24]
   d69d4:	9301      	str	r3, [sp, #4]
   d69d6:	bd08      	pop	{r3, pc}
   d69d8:	00030240 	.word	0x00030240

000d69dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d69dc:	b508      	push	{r3, lr}
   d69de:	4b02      	ldr	r3, [pc, #8]	; (d69e8 <network_listen+0xc>)
   d69e0:	681b      	ldr	r3, [r3, #0]
   d69e2:	69db      	ldr	r3, [r3, #28]
   d69e4:	9301      	str	r3, [sp, #4]
   d69e6:	bd08      	pop	{r3, pc}
   d69e8:	00030240 	.word	0x00030240

000d69ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d69ec:	b508      	push	{r3, lr}
   d69ee:	4b02      	ldr	r3, [pc, #8]	; (d69f8 <network_listening+0xc>)
   d69f0:	681b      	ldr	r3, [r3, #0]
   d69f2:	6a1b      	ldr	r3, [r3, #32]
   d69f4:	9301      	str	r3, [sp, #4]
   d69f6:	bd08      	pop	{r3, pc}
   d69f8:	00030240 	.word	0x00030240

000d69fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d69fc:	b508      	push	{r3, lr}
   d69fe:	4b02      	ldr	r3, [pc, #8]	; (d6a08 <network_set_listen_timeout+0xc>)
   d6a00:	681b      	ldr	r3, [r3, #0]
   d6a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a04:	9301      	str	r3, [sp, #4]
   d6a06:	bd08      	pop	{r3, pc}
   d6a08:	00030240 	.word	0x00030240

000d6a0c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6a0c:	b508      	push	{r3, lr}
   d6a0e:	4b02      	ldr	r3, [pc, #8]	; (d6a18 <network_get_listen_timeout+0xc>)
   d6a10:	681b      	ldr	r3, [r3, #0]
   d6a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6a14:	9301      	str	r3, [sp, #4]
   d6a16:	bd08      	pop	{r3, pc}
   d6a18:	00030240 	.word	0x00030240

000d6a1c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d6a1c:	b508      	push	{r3, lr}
   d6a1e:	4b02      	ldr	r3, [pc, #8]	; (d6a28 <network_is_on+0xc>)
   d6a20:	681b      	ldr	r3, [r3, #0]
   d6a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6a24:	9301      	str	r3, [sp, #4]
   d6a26:	bd08      	pop	{r3, pc}
   d6a28:	00030240 	.word	0x00030240

000d6a2c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d6a2c:	b508      	push	{r3, lr}
   d6a2e:	4b02      	ldr	r3, [pc, #8]	; (d6a38 <network_is_off+0xc>)
   d6a30:	681b      	ldr	r3, [r3, #0]
   d6a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a34:	9301      	str	r3, [sp, #4]
   d6a36:	bd08      	pop	{r3, pc}
   d6a38:	00030240 	.word	0x00030240

000d6a3c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6a3c:	b508      	push	{r3, lr}
   d6a3e:	4b02      	ldr	r3, [pc, #8]	; (d6a48 <spark_process+0xc>)
   d6a40:	681b      	ldr	r3, [r3, #0]
   d6a42:	689b      	ldr	r3, [r3, #8]
   d6a44:	9301      	str	r3, [sp, #4]
   d6a46:	bd08      	pop	{r3, pc}
   d6a48:	00030244 	.word	0x00030244

000d6a4c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6a4c:	b508      	push	{r3, lr}
   d6a4e:	4b02      	ldr	r3, [pc, #8]	; (d6a58 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6a50:	681b      	ldr	r3, [r3, #0]
   d6a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6a54:	9301      	str	r3, [sp, #4]
   d6a56:	bd08      	pop	{r3, pc}
   d6a58:	00030244 	.word	0x00030244

000d6a5c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6a5c:	b508      	push	{r3, lr}
   d6a5e:	4b02      	ldr	r3, [pc, #8]	; (d6a68 <malloc+0xc>)
   d6a60:	681b      	ldr	r3, [r3, #0]
   d6a62:	681b      	ldr	r3, [r3, #0]
   d6a64:	9301      	str	r3, [sp, #4]
   d6a66:	bd08      	pop	{r3, pc}
   d6a68:	0003021c 	.word	0x0003021c

000d6a6c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6a6c:	b508      	push	{r3, lr}
   d6a6e:	4b02      	ldr	r3, [pc, #8]	; (d6a78 <free+0xc>)
   d6a70:	681b      	ldr	r3, [r3, #0]
   d6a72:	685b      	ldr	r3, [r3, #4]
   d6a74:	9301      	str	r3, [sp, #4]
   d6a76:	bd08      	pop	{r3, pc}
   d6a78:	0003021c 	.word	0x0003021c

000d6a7c <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6a7c:	b508      	push	{r3, lr}
   d6a7e:	4b02      	ldr	r3, [pc, #8]	; (d6a88 <snprintf+0xc>)
   d6a80:	681b      	ldr	r3, [r3, #0]
   d6a82:	69db      	ldr	r3, [r3, #28]
   d6a84:	9301      	str	r3, [sp, #4]
   d6a86:	bd08      	pop	{r3, pc}
   d6a88:	0003021c 	.word	0x0003021c

000d6a8c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6a8c:	b508      	push	{r3, lr}
   d6a8e:	4b02      	ldr	r3, [pc, #8]	; (d6a98 <vsnprintf+0xc>)
   d6a90:	681b      	ldr	r3, [r3, #0]
   d6a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6a94:	9301      	str	r3, [sp, #4]
   d6a96:	bd08      	pop	{r3, pc}
   d6a98:	0003021c 	.word	0x0003021c

000d6a9c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6a9c:	b508      	push	{r3, lr}
   d6a9e:	4b02      	ldr	r3, [pc, #8]	; (d6aa8 <__errno+0xc>)
   d6aa0:	681b      	ldr	r3, [r3, #0]
   d6aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6aa4:	9301      	str	r3, [sp, #4]
   d6aa6:	bd08      	pop	{r3, pc}
   d6aa8:	0003021c 	.word	0x0003021c

000d6aac <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6aac:	b508      	push	{r3, lr}
   d6aae:	4b02      	ldr	r3, [pc, #8]	; (d6ab8 <newlib_impure_ptr_callback+0xc>)
   d6ab0:	681b      	ldr	r3, [r3, #0]
   d6ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6ab4:	9301      	str	r3, [sp, #4]
   d6ab6:	bd08      	pop	{r3, pc}
   d6ab8:	0003021c 	.word	0x0003021c

000d6abc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6abc:	2200      	movs	r2, #0
   d6abe:	6840      	ldr	r0, [r0, #4]
   d6ac0:	4611      	mov	r1, r2
   d6ac2:	f7ff bf93 	b.w	d69ec <network_listening>

000d6ac6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6ac6:	2200      	movs	r2, #0
   d6ac8:	6840      	ldr	r0, [r0, #4]
   d6aca:	4611      	mov	r1, r2
   d6acc:	f7ff bf9e 	b.w	d6a0c <network_get_listen_timeout>

000d6ad0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6ad0:	6840      	ldr	r0, [r0, #4]
   d6ad2:	2200      	movs	r2, #0
   d6ad4:	f7ff bf92 	b.w	d69fc <network_set_listen_timeout>

000d6ad8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ad8:	6840      	ldr	r0, [r0, #4]
   d6ada:	2200      	movs	r2, #0
   d6adc:	f081 0101 	eor.w	r1, r1, #1
   d6ae0:	f7ff bf7c 	b.w	d69dc <network_listen>

000d6ae4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6ae4:	2300      	movs	r3, #0
   d6ae6:	6840      	ldr	r0, [r0, #4]
   d6ae8:	461a      	mov	r2, r3
   d6aea:	4619      	mov	r1, r3
   d6aec:	f7ff bf6e 	b.w	d69cc <network_off>

000d6af0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6af0:	2300      	movs	r3, #0
   d6af2:	6840      	ldr	r0, [r0, #4]
   d6af4:	461a      	mov	r2, r3
   d6af6:	4619      	mov	r1, r3
   d6af8:	f7ff bf60 	b.w	d69bc <network_on>

000d6afc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6afc:	2200      	movs	r2, #0
   d6afe:	6840      	ldr	r0, [r0, #4]
   d6b00:	4611      	mov	r1, r2
   d6b02:	f7ff bf53 	b.w	d69ac <network_ready>

000d6b06 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6b06:	2200      	movs	r2, #0
   d6b08:	6840      	ldr	r0, [r0, #4]
   d6b0a:	4611      	mov	r1, r2
   d6b0c:	f7ff bf3e 	b.w	d698c <network_connecting>

000d6b10 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b10:	6840      	ldr	r0, [r0, #4]
   d6b12:	2200      	movs	r2, #0
   d6b14:	2102      	movs	r1, #2
   d6b16:	f7ff bf41 	b.w	d699c <network_disconnect>

000d6b1a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6b1a:	2300      	movs	r3, #0
   d6b1c:	6840      	ldr	r0, [r0, #4]
   d6b1e:	461a      	mov	r2, r3
   d6b20:	f7ff bf2c 	b.w	d697c <network_connect>

000d6b24 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6b24:	4b02      	ldr	r3, [pc, #8]	; (d6b30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6b26:	2203      	movs	r2, #3
   d6b28:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6b2a:	4a02      	ldr	r2, [pc, #8]	; (d6b34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6b2c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6b2e:	4770      	bx	lr
   d6b30:	2003e650 	.word	0x2003e650
   d6b34:	000d9d6c 	.word	0x000d9d6c

000d6b38 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d6b38:	2100      	movs	r1, #0
   d6b3a:	f7ff be9b 	b.w	d6874 <hal_spi_acquire>

000d6b3e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d6b3e:	2100      	movs	r1, #0
   d6b40:	f7ff bea0 	b.w	d6884 <hal_spi_release>

000d6b44 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6b44:	b510      	push	{r4, lr}
   d6b46:	4604      	mov	r4, r0
   d6b48:	4608      	mov	r0, r1
{
    _spi = spi;
   d6b4a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6b4c:	f7ff fe72 	bl	d6834 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6b50:	2300      	movs	r3, #0
   d6b52:	6063      	str	r3, [r4, #4]
}
   d6b54:	4620      	mov	r0, r4
   d6b56:	bd10      	pop	{r4, pc}

000d6b58 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6b58:	b510      	push	{r4, lr}
   d6b5a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6b5c:	7800      	ldrb	r0, [r0, #0]
   d6b5e:	f7ff ffeb 	bl	d6b38 <_ZN8SPIClass4lockEv.isra.0>
   d6b62:	b948      	cbnz	r0, d6b78 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d6b64:	7820      	ldrb	r0, [r4, #0]
   d6b66:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6b6a:	f7ff fe53 	bl	d6814 <hal_spi_begin>
        unlock();
   d6b6e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6b74:	f7ff bfe3 	b.w	d6b3e <_ZN8SPIClass6unlockEv.isra.0>
}
   d6b78:	bd10      	pop	{r4, pc}

000d6b7a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6b7a:	7800      	ldrb	r0, [r0, #0]
   d6b7c:	f7ff bfdf 	b.w	d6b3e <_ZN8SPIClass6unlockEv.isra.0>

000d6b80 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6b80:	0840      	lsrs	r0, r0, #1
{
   d6b82:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d6b84:	6018      	str	r0, [r3, #0]
   d6b86:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6b88:	6818      	ldr	r0, [r3, #0]
   d6b8a:	4288      	cmp	r0, r1
   d6b8c:	b2e5      	uxtb	r5, r4
   d6b8e:	d906      	bls.n	d6b9e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6b90:	3401      	adds	r4, #1
   d6b92:	2c08      	cmp	r4, #8
   d6b94:	d002      	beq.n	d6b9c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6b96:	0840      	lsrs	r0, r0, #1
   d6b98:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d6b9a:	e7f5      	b.n	d6b88 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6b9c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d6b9e:	4b02      	ldr	r3, [pc, #8]	; (d6ba8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6ba0:	5d5b      	ldrb	r3, [r3, r5]
   d6ba2:	7013      	strb	r3, [r2, #0]
}
   d6ba4:	bd30      	pop	{r4, r5, pc}
   d6ba6:	bf00      	nop
   d6ba8:	000d9da0 	.word	0x000d9da0

000d6bac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d6bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6bb0:	4606      	mov	r6, r0
   d6bb2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d6bb4:	7800      	ldrb	r0, [r0, #0]
{
   d6bb6:	460c      	mov	r4, r1
    CHECK(lock());
   d6bb8:	f7ff ffbe 	bl	d6b38 <_ZN8SPIClass4lockEv.isra.0>
   d6bbc:	2800      	cmp	r0, #0
   d6bbe:	db1b      	blt.n	d6bf8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d6bc0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d6bc2:	2214      	movs	r2, #20
   d6bc4:	2100      	movs	r1, #0
   d6bc6:	a809      	add	r0, sp, #36	; 0x24
   d6bc8:	f001 ffe8 	bl	d8b9c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6bcc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6bce:	2200      	movs	r2, #0
   d6bd0:	a909      	add	r1, sp, #36	; 0x24
   d6bd2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d6bd4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d6bd8:	f7ff fe3c 	bl	d6854 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d6bdc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d6be0:	b113      	cbz	r3, d6be8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d6be2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6be6:	b155      	cbz	r5, d6bfe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d6be8:	2700      	movs	r7, #0
   d6bea:	46b9      	mov	r9, r7
   d6bec:	46b8      	mov	r8, r7
   d6bee:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d6bf0:	7923      	ldrb	r3, [r4, #4]
   d6bf2:	b15d      	cbz	r5, d6c0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d6bf4:	b1c3      	cbz	r3, d6c28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d6bf6:	2000      	movs	r0, #0
}
   d6bf8:	b00f      	add	sp, #60	; 0x3c
   d6bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d6bfe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6c02:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6c06:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d6c0a:	e7f1      	b.n	d6bf0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d6c0c:	2b00      	cmp	r3, #0
   d6c0e:	d135      	bne.n	d6c7c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d6c10:	68a3      	ldr	r3, [r4, #8]
   d6c12:	4543      	cmp	r3, r8
   d6c14:	d108      	bne.n	d6c28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d6c16:	f88d 9020 	strb.w	r9, [sp, #32]
   d6c1a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6c1e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6c22:	89a3      	ldrh	r3, [r4, #12]
   d6c24:	429a      	cmp	r2, r3
   d6c26:	d0e6      	beq.n	d6bf6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d6c28:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6c2a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d6c2c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6c30:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6c32:	ab04      	add	r3, sp, #16
   d6c34:	f10d 020f 	add.w	r2, sp, #15
   d6c38:	f7ff ffa2 	bl	d6b80 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d6c3c:	7921      	ldrb	r1, [r4, #4]
   d6c3e:	b985      	cbnz	r5, d6c62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d6c40:	b989      	cbnz	r1, d6c66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6c42:	68a3      	ldr	r3, [r4, #8]
   d6c44:	4543      	cmp	r3, r8
   d6c46:	d30e      	bcc.n	d6c66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d6c48:	f88d 9020 	strb.w	r9, [sp, #32]
   d6c4c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6c50:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6c54:	89a3      	ldrh	r3, [r4, #12]
   d6c56:	429a      	cmp	r2, r3
   d6c58:	d105      	bne.n	d6c66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6c5a:	9b04      	ldr	r3, [sp, #16]
   d6c5c:	4543      	cmp	r3, r8
   d6c5e:	d102      	bne.n	d6c66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6c60:	e7c9      	b.n	d6bf6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d6c62:	2900      	cmp	r1, #0
   d6c64:	d1f9      	bne.n	d6c5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d6c66:	2300      	movs	r3, #0
   d6c68:	9301      	str	r3, [sp, #4]
   d6c6a:	7b63      	ldrb	r3, [r4, #13]
   d6c6c:	9300      	str	r3, [sp, #0]
   d6c6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6c72:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6c74:	7830      	ldrb	r0, [r6, #0]
   d6c76:	f7ff fdf5 	bl	d6864 <hal_spi_set_settings>
   d6c7a:	e7bc      	b.n	d6bf6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d6c7c:	e9cd 5500 	strd	r5, r5, [sp]
   d6c80:	462b      	mov	r3, r5
   d6c82:	462a      	mov	r2, r5
   d6c84:	2101      	movs	r1, #1
   d6c86:	e7f5      	b.n	d6c74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d6c88 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6c88:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d6c8a:	7800      	ldrb	r0, [r0, #0]
   d6c8c:	f7ff fdca 	bl	d6824 <hal_spi_transfer>
}
   d6c90:	b2c0      	uxtb	r0, r0
   d6c92:	bd08      	pop	{r3, pc}

000d6c94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6c94:	b510      	push	{r4, lr}
   d6c96:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6c98:	6800      	ldr	r0, [r0, #0]
   d6c9a:	b118      	cbz	r0, d6ca4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6c9c:	f7ff fee6 	bl	d6a6c <free>
            wakeupSource_ = nullptr;
   d6ca0:	2300      	movs	r3, #0
   d6ca2:	6023      	str	r3, [r4, #0]
        }
    }
   d6ca4:	bd10      	pop	{r4, pc}

000d6ca6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6ca6:	b510      	push	{r4, lr}
   d6ca8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6caa:	f7ff fff3 	bl	d6c94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d6cae:	4620      	mov	r0, r4
   d6cb0:	bd10      	pop	{r4, pc}
	...

000d6cb4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6cb4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6cb6:	4b09      	ldr	r3, [pc, #36]	; (d6cdc <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6cb8:	4c09      	ldr	r4, [pc, #36]	; (d6ce0 <_GLOBAL__sub_I_System+0x2c>)
   d6cba:	2202      	movs	r2, #2
   d6cbc:	2000      	movs	r0, #0
   d6cbe:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6cc0:	4b08      	ldr	r3, [pc, #32]	; (d6ce4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6cc2:	6020      	str	r0, [r4, #0]
   d6cc4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6cc6:	71a0      	strb	r0, [r4, #6]
   d6cc8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6cca:	f7ff fe2b 	bl	d6924 <set_system_mode>
SystemClass System;
   d6cce:	4620      	mov	r0, r4
   d6cd0:	4a05      	ldr	r2, [pc, #20]	; (d6ce8 <_GLOBAL__sub_I_System+0x34>)
   d6cd2:	4906      	ldr	r1, [pc, #24]	; (d6cec <_GLOBAL__sub_I_System+0x38>)
   d6cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6cd8:	f001 b96c 	b.w	d7fb4 <__aeabi_atexit>
   d6cdc:	2003e664 	.word	0x2003e664
   d6ce0:	2003e658 	.word	0x2003e658
   d6ce4:	ffff0000 	.word	0xffff0000
   d6ce8:	2003e564 	.word	0x2003e564
   d6cec:	000d6ca7 	.word	0x000d6ca7

000d6cf0 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d6cf0:	b570      	push	{r4, r5, r6, lr}
   d6cf2:	b086      	sub	sp, #24
   d6cf4:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d6cf6:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d6cf8:	4668      	mov	r0, sp
   d6cfa:	f000 faff 	bl	d72fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d00:	1d34      	adds	r4, r6, #4
   d6d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d04:	682b      	ldr	r3, [r5, #0]
   d6d06:	7023      	strb	r3, [r4, #0]
    }
   d6d08:	4630      	mov	r0, r6
   d6d0a:	b006      	add	sp, #24
   d6d0c:	bd70      	pop	{r4, r5, r6, pc}

000d6d0e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6d0e:	b510      	push	{r4, lr}
   d6d10:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6d12:	6800      	ldr	r0, [r0, #0]
   d6d14:	b108      	cbz	r0, d6d1a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6d16:	f7ff fc8d 	bl	d6634 <os_mutex_recursive_destroy>
    }
   d6d1a:	4620      	mov	r0, r4
   d6d1c:	bd10      	pop	{r4, pc}

000d6d1e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6d1e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6d20:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6d22:	4604      	mov	r4, r0
      if (_M_manager)
   d6d24:	b113      	cbz	r3, d6d2c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6d26:	2203      	movs	r2, #3
   d6d28:	4601      	mov	r1, r0
   d6d2a:	4798      	blx	r3
    }
   d6d2c:	4620      	mov	r0, r4
   d6d2e:	bd10      	pop	{r4, pc}

000d6d30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d6d30:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6d32:	4c06      	ldr	r4, [pc, #24]	; (d6d4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6d34:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6d36:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6d38:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6d3a:	f7ff fc73 	bl	d6624 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6d3e:	4620      	mov	r0, r4
   d6d40:	4a03      	ldr	r2, [pc, #12]	; (d6d50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6d42:	4904      	ldr	r1, [pc, #16]	; (d6d54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6d48:	f001 b934 	b.w	d7fb4 <__aeabi_atexit>
   d6d4c:	2003e668 	.word	0x2003e668
   d6d50:	2003e564 	.word	0x2003e564
   d6d54:	000d6d0f 	.word	0x000d6d0f

000d6d58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d5a:	4606      	mov	r6, r0
   d6d5c:	460d      	mov	r5, r1
  size_t n = 0;
   d6d5e:	188f      	adds	r7, r1, r2
   d6d60:	2400      	movs	r4, #0
  while (size--) {
   d6d62:	42bd      	cmp	r5, r7
   d6d64:	d00c      	beq.n	d6d80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6d66:	6833      	ldr	r3, [r6, #0]
   d6d68:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6d6c:	689b      	ldr	r3, [r3, #8]
   d6d6e:	4630      	mov	r0, r6
   d6d70:	4798      	blx	r3
     if (chunk>=0)
   d6d72:	1e03      	subs	r3, r0, #0
   d6d74:	db01      	blt.n	d6d7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6d76:	441c      	add	r4, r3
  while (size--) {
   d6d78:	e7f3      	b.n	d6d62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6d7a:	2c00      	cmp	r4, #0
   d6d7c:	bf08      	it	eq
   d6d7e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6d80:	4620      	mov	r0, r4
   d6d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d84 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6d84:	b513      	push	{r0, r1, r4, lr}
   d6d86:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d6d88:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6d8a:	b159      	cbz	r1, d6da4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6d8c:	9101      	str	r1, [sp, #4]
   d6d8e:	f001 ff3b 	bl	d8c08 <strlen>
   d6d92:	6823      	ldr	r3, [r4, #0]
   d6d94:	9901      	ldr	r1, [sp, #4]
   d6d96:	68db      	ldr	r3, [r3, #12]
   d6d98:	4602      	mov	r2, r0
   d6d9a:	4620      	mov	r0, r4
    }
   d6d9c:	b002      	add	sp, #8
   d6d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6da2:	4718      	bx	r3
    }
   d6da4:	b002      	add	sp, #8
   d6da6:	bd10      	pop	{r4, pc}

000d6da8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d6da8:	b508      	push	{r3, lr}
  return write(str);
   d6daa:	f7ff ffeb 	bl	d6d84 <_ZN5Print5writeEPKc>
}
   d6dae:	bd08      	pop	{r3, pc}

000d6db0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d6db0:	6803      	ldr	r3, [r0, #0]
   d6db2:	689b      	ldr	r3, [r3, #8]
   d6db4:	4718      	bx	r3

000d6db6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6db6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6db8:	210d      	movs	r1, #13
{
   d6dba:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6dbc:	f7ff fff8 	bl	d6db0 <_ZN5Print5printEc>
  n += print('\n');
   d6dc0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6dc2:	4604      	mov	r4, r0
  n += print('\n');
   d6dc4:	4628      	mov	r0, r5
   d6dc6:	f7ff fff3 	bl	d6db0 <_ZN5Print5printEc>
  return n;
}
   d6dca:	4420      	add	r0, r4
   d6dcc:	bd38      	pop	{r3, r4, r5, pc}

000d6dce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6dce:	b538      	push	{r3, r4, r5, lr}
   d6dd0:	4605      	mov	r5, r0
  return write(str);
   d6dd2:	f7ff ffd7 	bl	d6d84 <_ZN5Print5writeEPKc>
   d6dd6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6dd8:	4628      	mov	r0, r5
   d6dda:	f7ff ffec 	bl	d6db6 <_ZN5Print7printlnEv>
  return n;
}
   d6dde:	4420      	add	r0, r4
   d6de0:	bd38      	pop	{r3, r4, r5, pc}

000d6de2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6de2:	b530      	push	{r4, r5, lr}
   d6de4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6de6:	2300      	movs	r3, #0
   d6de8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6dec:	2a01      	cmp	r2, #1
   d6dee:	bf98      	it	ls
   d6df0:	220a      	movls	r2, #10
   d6df2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6df4:	460d      	mov	r5, r1
   d6df6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6dfa:	fb01 5312 	mls	r3, r1, r2, r5
   d6dfe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6e02:	2b09      	cmp	r3, #9
   d6e04:	bf94      	ite	ls
   d6e06:	3330      	addls	r3, #48	; 0x30
   d6e08:	3337      	addhi	r3, #55	; 0x37
   d6e0a:	b2db      	uxtb	r3, r3
  } while(n);
   d6e0c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6e0e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6e12:	d9ef      	bls.n	d6df4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6e14:	4621      	mov	r1, r4
   d6e16:	f7ff ffb5 	bl	d6d84 <_ZN5Print5writeEPKc>
}
   d6e1a:	b00b      	add	sp, #44	; 0x2c
   d6e1c:	bd30      	pop	{r4, r5, pc}
	...

000d6e20 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e24:	ec55 4b10 	vmov	r4, r5, d0
   d6e28:	4606      	mov	r6, r0
   d6e2a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6e2c:	ee10 2a10 	vmov	r2, s0
   d6e30:	ee10 0a10 	vmov	r0, s0
   d6e34:	462b      	mov	r3, r5
   d6e36:	4629      	mov	r1, r5
   d6e38:	f001 fe2e 	bl	d8a98 <__aeabi_dcmpun>
   d6e3c:	b140      	cbz	r0, d6e50 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d6e3e:	4953      	ldr	r1, [pc, #332]	; (d6f8c <_ZN5Print10printFloatEdh+0x16c>)
   d6e40:	4630      	mov	r0, r6
   d6e42:	f7ff ff9f 	bl	d6d84 <_ZN5Print5writeEPKc>
   d6e46:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d6e48:	4650      	mov	r0, sl
   d6e4a:	b003      	add	sp, #12
   d6e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d6e50:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d6e54:	4b4e      	ldr	r3, [pc, #312]	; (d6f90 <_ZN5Print10printFloatEdh+0x170>)
   d6e56:	f04f 32ff 	mov.w	r2, #4294967295
   d6e5a:	4620      	mov	r0, r4
   d6e5c:	4649      	mov	r1, r9
   d6e5e:	f001 fe1b 	bl	d8a98 <__aeabi_dcmpun>
   d6e62:	b948      	cbnz	r0, d6e78 <_ZN5Print10printFloatEdh+0x58>
   d6e64:	4b4a      	ldr	r3, [pc, #296]	; (d6f90 <_ZN5Print10printFloatEdh+0x170>)
   d6e66:	f04f 32ff 	mov.w	r2, #4294967295
   d6e6a:	4620      	mov	r0, r4
   d6e6c:	4649      	mov	r1, r9
   d6e6e:	f001 fdf5 	bl	d8a5c <__aeabi_dcmple>
   d6e72:	b908      	cbnz	r0, d6e78 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d6e74:	4947      	ldr	r1, [pc, #284]	; (d6f94 <_ZN5Print10printFloatEdh+0x174>)
   d6e76:	e7e3      	b.n	d6e40 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d6e78:	4b47      	ldr	r3, [pc, #284]	; (d6f98 <_ZN5Print10printFloatEdh+0x178>)
   d6e7a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6e7e:	4620      	mov	r0, r4
   d6e80:	4629      	mov	r1, r5
   d6e82:	f001 fdff 	bl	d8a84 <__aeabi_dcmpgt>
   d6e86:	b108      	cbz	r0, d6e8c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d6e88:	4944      	ldr	r1, [pc, #272]	; (d6f9c <_ZN5Print10printFloatEdh+0x17c>)
   d6e8a:	e7d9      	b.n	d6e40 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d6e8c:	4b44      	ldr	r3, [pc, #272]	; (d6fa0 <_ZN5Print10printFloatEdh+0x180>)
   d6e8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6e92:	4620      	mov	r0, r4
   d6e94:	4629      	mov	r1, r5
   d6e96:	f001 fdd7 	bl	d8a48 <__aeabi_dcmplt>
   d6e9a:	2800      	cmp	r0, #0
   d6e9c:	d1f4      	bne.n	d6e88 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d6e9e:	2200      	movs	r2, #0
   d6ea0:	2300      	movs	r3, #0
   d6ea2:	4620      	mov	r0, r4
   d6ea4:	4629      	mov	r1, r5
   d6ea6:	f001 fdcf 	bl	d8a48 <__aeabi_dcmplt>
   d6eaa:	b1d0      	cbz	r0, d6ee2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d6eac:	212d      	movs	r1, #45	; 0x2d
   d6eae:	4630      	mov	r0, r6
   d6eb0:	f7ff ff7e 	bl	d6db0 <_ZN5Print5printEc>
     number = -number;
   d6eb4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d6eb8:	4682      	mov	sl, r0
     number = -number;
   d6eba:	461d      	mov	r5, r3
  double rounding = 0.5;
   d6ebc:	4939      	ldr	r1, [pc, #228]	; (d6fa4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d6ebe:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d6fac <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d6ec2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d6ec6:	2000      	movs	r0, #0
    rounding /= 10.0;
   d6ec8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d6ecc:	fa5f f38b 	uxtb.w	r3, fp
   d6ed0:	429f      	cmp	r7, r3
   d6ed2:	d908      	bls.n	d6ee6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d6ed4:	4642      	mov	r2, r8
   d6ed6:	464b      	mov	r3, r9
   d6ed8:	f001 fc6e 	bl	d87b8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d6edc:	f10b 0b01 	add.w	fp, fp, #1
   d6ee0:	e7f4      	b.n	d6ecc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d6ee2:	4682      	mov	sl, r0
   d6ee4:	e7ea      	b.n	d6ebc <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d6ee6:	4622      	mov	r2, r4
   d6ee8:	462b      	mov	r3, r5
   d6eea:	f001 f985 	bl	d81f8 <__adddf3>
   d6eee:	460d      	mov	r5, r1
   d6ef0:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d6ef2:	f001 fe0f 	bl	d8b14 <__aeabi_d2uiz>
   d6ef6:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d6ef8:	f001 faba 	bl	d8470 <__aeabi_ui2d>
   d6efc:	4602      	mov	r2, r0
   d6efe:	460b      	mov	r3, r1
   d6f00:	4620      	mov	r0, r4
   d6f02:	4629      	mov	r1, r5
   d6f04:	f001 f976 	bl	d81f4 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6f08:	220a      	movs	r2, #10
   d6f0a:	4604      	mov	r4, r0
   d6f0c:	460d      	mov	r5, r1
   d6f0e:	4630      	mov	r0, r6
   d6f10:	4641      	mov	r1, r8
   d6f12:	f7ff ff66 	bl	d6de2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d6f16:	4482      	add	sl, r0
  if (digits > 0) {
   d6f18:	b127      	cbz	r7, d6f24 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d6f1a:	4923      	ldr	r1, [pc, #140]	; (d6fa8 <_ZN5Print10printFloatEdh+0x188>)
   d6f1c:	4630      	mov	r0, r6
   d6f1e:	f7ff ff31 	bl	d6d84 <_ZN5Print5writeEPKc>
    n += print(".");
   d6f22:	4482      	add	sl, r0
    remainder *= 10.0;
   d6f24:	f8df 9084 	ldr.w	r9, [pc, #132]	; d6fac <_ZN5Print10printFloatEdh+0x18c>
   d6f28:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d6f2c:	3f01      	subs	r7, #1
   d6f2e:	b2ff      	uxtb	r7, r7
   d6f30:	2fff      	cmp	r7, #255	; 0xff
   d6f32:	d089      	beq.n	d6e48 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d6f34:	4642      	mov	r2, r8
   d6f36:	464b      	mov	r3, r9
   d6f38:	4620      	mov	r0, r4
   d6f3a:	4629      	mov	r1, r5
   d6f3c:	f001 fb12 	bl	d8564 <__aeabi_dmul>
   d6f40:	4604      	mov	r4, r0
   d6f42:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d6f44:	f001 fdbe 	bl	d8ac4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d6f48:	f1b0 0b00 	subs.w	fp, r0, #0
   d6f4c:	da1a      	bge.n	d6f84 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d6f4e:	212d      	movs	r1, #45	; 0x2d
   d6f50:	4630      	mov	r0, r6
   d6f52:	f7ff ff2d 	bl	d6db0 <_ZN5Print5printEc>
            val = -n;
   d6f56:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d6f5a:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d6f5c:	220a      	movs	r2, #10
   d6f5e:	4630      	mov	r0, r6
   d6f60:	9301      	str	r3, [sp, #4]
   d6f62:	f7ff ff3e 	bl	d6de2 <_ZN5Print11printNumberEmh>
   d6f66:	9b01      	ldr	r3, [sp, #4]
   d6f68:	4418      	add	r0, r3
    n += print(toPrint);
   d6f6a:	4482      	add	sl, r0
    remainder -= toPrint;
   d6f6c:	4658      	mov	r0, fp
   d6f6e:	f001 fa8f 	bl	d8490 <__aeabi_i2d>
   d6f72:	4602      	mov	r2, r0
   d6f74:	460b      	mov	r3, r1
   d6f76:	4620      	mov	r0, r4
   d6f78:	4629      	mov	r1, r5
   d6f7a:	f001 f93b 	bl	d81f4 <__aeabi_dsub>
   d6f7e:	4604      	mov	r4, r0
   d6f80:	460d      	mov	r5, r1
  while (digits-- > 0)
   d6f82:	e7d3      	b.n	d6f2c <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d6f84:	4659      	mov	r1, fp
        size_t t = 0;
   d6f86:	2300      	movs	r3, #0
   d6f88:	e7e8      	b.n	d6f5c <_ZN5Print10printFloatEdh+0x13c>
   d6f8a:	bf00      	nop
   d6f8c:	000d9db0 	.word	0x000d9db0
   d6f90:	7fefffff 	.word	0x7fefffff
   d6f94:	000d9db4 	.word	0x000d9db4
   d6f98:	41efffff 	.word	0x41efffff
   d6f9c:	000d9db8 	.word	0x000d9db8
   d6fa0:	c1efffff 	.word	0xc1efffff
   d6fa4:	3fe00000 	.word	0x3fe00000
   d6fa8:	000d9dbc 	.word	0x000d9dbc
   d6fac:	40240000 	.word	0x40240000

000d6fb0 <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   d6fb0:	b2c9      	uxtb	r1, r1
   d6fb2:	f7ff bf35 	b.w	d6e20 <_ZN5Print10printFloatEdh>

000d6fb6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d6fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6fba:	b086      	sub	sp, #24
   d6fbc:	af00      	add	r7, sp, #0
   d6fbe:	4605      	mov	r5, r0
   d6fc0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d6fc2:	1d38      	adds	r0, r7, #4
   d6fc4:	2114      	movs	r1, #20
{
   d6fc6:	4614      	mov	r4, r2
    va_copy(args2, args);
   d6fc8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d6fca:	f7ff fd5f 	bl	d6a8c <vsnprintf>

    if (n<bufsize)
   d6fce:	2813      	cmp	r0, #19
   d6fd0:	d80e      	bhi.n	d6ff0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d6fd2:	1d39      	adds	r1, r7, #4
   d6fd4:	4628      	mov	r0, r5
   d6fd6:	f7ff fed5 	bl	d6d84 <_ZN5Print5writeEPKc>
   d6fda:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d6fdc:	b11e      	cbz	r6, d6fe6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d6fde:	4628      	mov	r0, r5
   d6fe0:	f7ff fee9 	bl	d6db6 <_ZN5Print7printlnEv>
   d6fe4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d6fe6:	4620      	mov	r0, r4
   d6fe8:	3718      	adds	r7, #24
   d6fea:	46bd      	mov	sp, r7
   d6fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6ff0:	f100 0308 	add.w	r3, r0, #8
   d6ff4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6ff8:	46e8      	mov	r8, sp
        char bigger[n+1];
   d6ffa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d6ffe:	4622      	mov	r2, r4
   d7000:	1c41      	adds	r1, r0, #1
   d7002:	683b      	ldr	r3, [r7, #0]
   d7004:	4668      	mov	r0, sp
   d7006:	f7ff fd41 	bl	d6a8c <vsnprintf>
  return write(str);
   d700a:	4669      	mov	r1, sp
   d700c:	4628      	mov	r0, r5
   d700e:	f7ff feb9 	bl	d6d84 <_ZN5Print5writeEPKc>
   d7012:	4604      	mov	r4, r0
   d7014:	46c5      	mov	sp, r8
   d7016:	e7e1      	b.n	d6fdc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7018 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d7018:	b510      	push	{r4, lr}
   d701a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d701c:	f7ff faea 	bl	d65f4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d7020:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d7022:	6823      	ldr	r3, [r4, #0]
   d7024:	4620      	mov	r0, r4
   d7026:	695b      	ldr	r3, [r3, #20]
   d7028:	4798      	blx	r3
    if (c >= 0) return c;
   d702a:	2800      	cmp	r0, #0
   d702c:	da08      	bge.n	d7040 <_ZN6Stream9timedReadEv+0x28>
   d702e:	f7ff fae1 	bl	d65f4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d7032:	68e3      	ldr	r3, [r4, #12]
   d7034:	1ac0      	subs	r0, r0, r3
   d7036:	68a3      	ldr	r3, [r4, #8]
   d7038:	4298      	cmp	r0, r3
   d703a:	d3f2      	bcc.n	d7022 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d703c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7040:	bd10      	pop	{r4, pc}

000d7042 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d7042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7044:	4606      	mov	r6, r0
   d7046:	460d      	mov	r5, r1
   d7048:	4617      	mov	r7, r2
  size_t count = 0;
   d704a:	2400      	movs	r4, #0
  while (count < length) {
   d704c:	42bc      	cmp	r4, r7
   d704e:	d007      	beq.n	d7060 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d7050:	4630      	mov	r0, r6
   d7052:	f7ff ffe1 	bl	d7018 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d7056:	1e03      	subs	r3, r0, #0
   d7058:	db02      	blt.n	d7060 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d705a:	552b      	strb	r3, [r5, r4]
    count++;
   d705c:	3401      	adds	r4, #1
  while (count < length) {
   d705e:	e7f5      	b.n	d704c <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d7060:	4620      	mov	r0, r4
   d7062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7064 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7064:	2300      	movs	r3, #0
   d7066:	6840      	ldr	r0, [r0, #4]
   d7068:	461a      	mov	r2, r3
   d706a:	4619      	mov	r1, r3
   d706c:	f7ff bca6 	b.w	d69bc <network_on>

000d7070 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7070:	4b01      	ldr	r3, [pc, #4]	; (d7078 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7072:	4a02      	ldr	r2, [pc, #8]	; (d707c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7074:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7076:	4770      	bx	lr
   d7078:	2003e66c 	.word	0x2003e66c
   d707c:	000d9dbe 	.word	0x000d9dbe

000d7080 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7080:	4b02      	ldr	r3, [pc, #8]	; (d708c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7082:	681a      	ldr	r2, [r3, #0]
   d7084:	4b02      	ldr	r3, [pc, #8]	; (d7090 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7086:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7088:	4770      	bx	lr
   d708a:	bf00      	nop
   d708c:	2003e4fc 	.word	0x2003e4fc
   d7090:	2003e670 	.word	0x2003e670

000d7094 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7094:	2100      	movs	r1, #0
   d7096:	f7ff bc4d 	b.w	d6934 <system_delay_ms>

000d709a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d709a:	b510      	push	{r4, lr}
   d709c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d709e:	f7ff fe3e 	bl	d6d1e <_ZNSt14_Function_baseD1Ev>
   d70a2:	4620      	mov	r0, r4
   d70a4:	bd10      	pop	{r4, pc}
	...

000d70a8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d70a8:	4803      	ldr	r0, [pc, #12]	; (d70b8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d70aa:	4a04      	ldr	r2, [pc, #16]	; (d70bc <_GLOBAL__sub_I_RGB+0x14>)
   d70ac:	4904      	ldr	r1, [pc, #16]	; (d70c0 <_GLOBAL__sub_I_RGB+0x18>)
   d70ae:	2300      	movs	r3, #0
   d70b0:	6083      	str	r3, [r0, #8]
   d70b2:	f000 bf7f 	b.w	d7fb4 <__aeabi_atexit>
   d70b6:	bf00      	nop
   d70b8:	2003e674 	.word	0x2003e674
   d70bc:	2003e564 	.word	0x2003e564
   d70c0:	000d709b 	.word	0x000d709b

000d70c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d70c4:	4b01      	ldr	r3, [pc, #4]	; (d70cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d70c6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d70c8:	4770      	bx	lr
   d70ca:	bf00      	nop
   d70cc:	2003e500 	.word	0x2003e500

000d70d0 <serialEventRun>:
{
   d70d0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d70d2:	4b0b      	ldr	r3, [pc, #44]	; (d7100 <serialEventRun+0x30>)
   d70d4:	b143      	cbz	r3, d70e8 <serialEventRun+0x18>
   d70d6:	f000 f97d 	bl	d73d4 <_Z16_fetch_usbserialv>
   d70da:	6803      	ldr	r3, [r0, #0]
   d70dc:	691b      	ldr	r3, [r3, #16]
   d70de:	4798      	blx	r3
   d70e0:	2800      	cmp	r0, #0
   d70e2:	dd01      	ble.n	d70e8 <serialEventRun+0x18>
        serialEvent();
   d70e4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d70e8:	4b06      	ldr	r3, [pc, #24]	; (d7104 <serialEventRun+0x34>)
   d70ea:	b143      	cbz	r3, d70fe <serialEventRun+0x2e>
   d70ec:	f000 f9f0 	bl	d74d0 <_Z22__fetch_global_Serial1v>
   d70f0:	6803      	ldr	r3, [r0, #0]
   d70f2:	691b      	ldr	r3, [r3, #16]
   d70f4:	4798      	blx	r3
   d70f6:	2800      	cmp	r0, #0
   d70f8:	dd01      	ble.n	d70fe <serialEventRun+0x2e>
        serialEvent1();
   d70fa:	f3af 8000 	nop.w
}
   d70fe:	bd08      	pop	{r3, pc}
	...

000d7108 <_post_loop>:
{
   d7108:	b508      	push	{r3, lr}
	serialEventRun();
   d710a:	f7ff ffe1 	bl	d70d0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d710e:	f7ff fa71 	bl	d65f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7112:	4b01      	ldr	r3, [pc, #4]	; (d7118 <_post_loop+0x10>)
   d7114:	6018      	str	r0, [r3, #0]
}
   d7116:	bd08      	pop	{r3, pc}
   d7118:	2003e7d4 	.word	0x2003e7d4

000d711c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d711c:	4802      	ldr	r0, [pc, #8]	; (d7128 <_Z33system_initialize_user_backup_ramv+0xc>)
   d711e:	4a03      	ldr	r2, [pc, #12]	; (d712c <_Z33system_initialize_user_backup_ramv+0x10>)
   d7120:	4903      	ldr	r1, [pc, #12]	; (d7130 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7122:	1a12      	subs	r2, r2, r0
   d7124:	f001 bd2c 	b.w	d8b80 <memcpy>
   d7128:	2003f400 	.word	0x2003f400
   d712c:	2003f404 	.word	0x2003f404
   d7130:	000da190 	.word	0x000da190

000d7134 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7134:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7136:	2300      	movs	r3, #0
   d7138:	9300      	str	r3, [sp, #0]
   d713a:	461a      	mov	r2, r3
   d713c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7140:	f7ff fc12 	bl	d6968 <system_ctrl_set_result>
}
   d7144:	b003      	add	sp, #12
   d7146:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d714c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d714c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d714e:	8843      	ldrh	r3, [r0, #2]
   d7150:	2b0a      	cmp	r3, #10
   d7152:	d008      	beq.n	d7166 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7154:	2b50      	cmp	r3, #80	; 0x50
   d7156:	d10b      	bne.n	d7170 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7158:	4b09      	ldr	r3, [pc, #36]	; (d7180 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d715a:	681b      	ldr	r3, [r3, #0]
   d715c:	b14b      	cbz	r3, d7172 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d715e:	b003      	add	sp, #12
   d7160:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7164:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7166:	f7ff ffe5 	bl	d7134 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d716a:	b003      	add	sp, #12
   d716c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7170:	2300      	movs	r3, #0
   d7172:	9300      	str	r3, [sp, #0]
   d7174:	461a      	mov	r2, r3
   d7176:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d717a:	f7ff fbf5 	bl	d6968 <system_ctrl_set_result>
}
   d717e:	e7f4      	b.n	d716a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7180:	2003e688 	.word	0x2003e688

000d7184 <module_user_init_hook>:
{
   d7184:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7186:	4c12      	ldr	r4, [pc, #72]	; (d71d0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7188:	4812      	ldr	r0, [pc, #72]	; (d71d4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d718a:	4d13      	ldr	r5, [pc, #76]	; (d71d8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d718c:	2100      	movs	r1, #0
   d718e:	f7ff fc8d 	bl	d6aac <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7192:	6823      	ldr	r3, [r4, #0]
   d7194:	42ab      	cmp	r3, r5
   d7196:	4b11      	ldr	r3, [pc, #68]	; (d71dc <module_user_init_hook+0x58>)
   d7198:	bf0c      	ite	eq
   d719a:	2201      	moveq	r2, #1
   d719c:	2200      	movne	r2, #0
   d719e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d71a0:	d002      	beq.n	d71a8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d71a2:	f7ff ffbb 	bl	d711c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d71a6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d71a8:	f7ff fa14 	bl	d65d4 <HAL_RNG_GetRandomNumber>
   d71ac:	4604      	mov	r4, r0
    srand(seed);
   d71ae:	f001 fcfd 	bl	d8bac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d71b2:	4b0b      	ldr	r3, [pc, #44]	; (d71e0 <module_user_init_hook+0x5c>)
   d71b4:	b113      	cbz	r3, d71bc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d71b6:	4620      	mov	r0, r4
   d71b8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d71bc:	2100      	movs	r1, #0
   d71be:	4808      	ldr	r0, [pc, #32]	; (d71e0 <module_user_init_hook+0x5c>)
   d71c0:	f7ff fc44 	bl	d6a4c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d71c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d71c8:	4806      	ldr	r0, [pc, #24]	; (d71e4 <module_user_init_hook+0x60>)
   d71ca:	2100      	movs	r1, #0
   d71cc:	f7ff bbc2 	b.w	d6954 <system_ctrl_set_app_request_handler>
   d71d0:	2003f400 	.word	0x2003f400
   d71d4:	000d70c5 	.word	0x000d70c5
   d71d8:	9a271c1e 	.word	0x9a271c1e
   d71dc:	2003e684 	.word	0x2003e684
   d71e0:	00000000 	.word	0x00000000
   d71e4:	000d714d 	.word	0x000d714d

000d71e8 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d71e8:	4770      	bx	lr

000d71ea <_ZN9IPAddressD0Ev>:
   d71ea:	b510      	push	{r4, lr}
   d71ec:	2118      	movs	r1, #24
   d71ee:	4604      	mov	r4, r0
   d71f0:	f000 fee5 	bl	d7fbe <_ZdlPvj>
   d71f4:	4620      	mov	r0, r4
   d71f6:	bd10      	pop	{r4, pc}

000d71f8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d71f8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d71fa:	7d03      	ldrb	r3, [r0, #20]
   d71fc:	2b06      	cmp	r3, #6
{
   d71fe:	b08d      	sub	sp, #52	; 0x34
   d7200:	460e      	mov	r6, r1
   d7202:	f100 0704 	add.w	r7, r0, #4
   d7206:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d720a:	d012      	beq.n	d7232 <_ZNK9IPAddress7printToER5Print+0x3a>
   d720c:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d7210:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7214:	220a      	movs	r2, #10
   d7216:	4630      	mov	r0, r6
   d7218:	f7ff fde3 	bl	d6de2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d721c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d721e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7220:	d019      	beq.n	d7256 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7222:	2c00      	cmp	r4, #0
   d7224:	d0f4      	beq.n	d7210 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7226:	212e      	movs	r1, #46	; 0x2e
   d7228:	4630      	mov	r0, r6
   d722a:	f7ff fdc1 	bl	d6db0 <_ZN5Print5printEc>
   d722e:	4404      	add	r4, r0
   d7230:	e7ee      	b.n	d7210 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7232:	232f      	movs	r3, #47	; 0x2f
   d7234:	466a      	mov	r2, sp
   d7236:	4639      	mov	r1, r7
   d7238:	200a      	movs	r0, #10
		buf[0] = 0;
   d723a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d723e:	f7ff fa01 	bl	d6644 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7242:	4668      	mov	r0, sp
   d7244:	f001 fce0 	bl	d8c08 <strlen>
   d7248:	6833      	ldr	r3, [r6, #0]
   d724a:	4602      	mov	r2, r0
   d724c:	68db      	ldr	r3, [r3, #12]
   d724e:	4669      	mov	r1, sp
   d7250:	4630      	mov	r0, r6
   d7252:	4798      	blx	r3
   d7254:	4604      	mov	r4, r0
    }
    return n;
}
   d7256:	4620      	mov	r0, r4
   d7258:	b00d      	add	sp, #52	; 0x34
   d725a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d725c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d725c:	b510      	push	{r4, lr}
   d725e:	4b05      	ldr	r3, [pc, #20]	; (d7274 <_ZN9IPAddressC1Ev+0x18>)
   d7260:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7262:	2211      	movs	r2, #17
   d7264:	f840 3b04 	str.w	r3, [r0], #4
   d7268:	2100      	movs	r1, #0
   d726a:	f001 fc97 	bl	d8b9c <memset>
}
   d726e:	4620      	mov	r0, r4
   d7270:	bd10      	pop	{r4, pc}
   d7272:	bf00      	nop
   d7274:	000d9de8 	.word	0x000d9de8

000d7278 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7278:	4603      	mov	r3, r0
   d727a:	4a07      	ldr	r2, [pc, #28]	; (d7298 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d727c:	b510      	push	{r4, lr}
   d727e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7282:	f101 0210 	add.w	r2, r1, #16
   d7286:	f851 4b04 	ldr.w	r4, [r1], #4
   d728a:	f843 4b04 	str.w	r4, [r3], #4
   d728e:	4291      	cmp	r1, r2
   d7290:	d1f9      	bne.n	d7286 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7292:	780a      	ldrb	r2, [r1, #0]
   d7294:	701a      	strb	r2, [r3, #0]
}
   d7296:	bd10      	pop	{r4, pc}
   d7298:	000d9de8 	.word	0x000d9de8

000d729c <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d729c:	7d03      	ldrb	r3, [r0, #20]
   d729e:	2b04      	cmp	r3, #4
   d72a0:	d104      	bne.n	d72ac <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d72a2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d72a4:	3800      	subs	r0, #0
   d72a6:	bf18      	it	ne
   d72a8:	2001      	movne	r0, #1
   d72aa:	4770      	bx	lr
    } else if (version() == 6) {
   d72ac:	2b06      	cmp	r3, #6
   d72ae:	d107      	bne.n	d72c0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d72b0:	6843      	ldr	r3, [r0, #4]
   d72b2:	b93b      	cbnz	r3, d72c4 <_ZNK9IPAddresscvbEv+0x28>
   d72b4:	6883      	ldr	r3, [r0, #8]
   d72b6:	b92b      	cbnz	r3, d72c4 <_ZNK9IPAddresscvbEv+0x28>
   d72b8:	68c3      	ldr	r3, [r0, #12]
   d72ba:	b91b      	cbnz	r3, d72c4 <_ZNK9IPAddresscvbEv+0x28>
   d72bc:	6900      	ldr	r0, [r0, #16]
   d72be:	e7f1      	b.n	d72a4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d72c0:	2000      	movs	r0, #0
   d72c2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d72c4:	2001      	movs	r0, #1
}
   d72c6:	4770      	bx	lr

000d72c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d72c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d72ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d72ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d72d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d72d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d72da:	2304      	movs	r3, #4
   d72dc:	6041      	str	r1, [r0, #4]
   d72de:	7503      	strb	r3, [r0, #20]
}
   d72e0:	bd10      	pop	{r4, pc}
	...

000d72e4 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d72e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d72e6:	4d04      	ldr	r5, [pc, #16]	; (d72f8 <_ZN9IPAddressC1Ehhhh+0x14>)
   d72e8:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d72ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d72ee:	9500      	str	r5, [sp, #0]
   d72f0:	f7ff ffea 	bl	d72c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d72f4:	b003      	add	sp, #12
   d72f6:	bd30      	pop	{r4, r5, pc}
   d72f8:	000d9de8 	.word	0x000d9de8

000d72fc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d72fc:	b513      	push	{r0, r1, r4, lr}
   d72fe:	4b05      	ldr	r3, [pc, #20]	; (d7314 <_ZN9IPAddressC1EPKh+0x18>)
   d7300:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7302:	78cb      	ldrb	r3, [r1, #3]
   d7304:	9300      	str	r3, [sp, #0]
   d7306:	788b      	ldrb	r3, [r1, #2]
   d7308:	784a      	ldrb	r2, [r1, #1]
   d730a:	7809      	ldrb	r1, [r1, #0]
   d730c:	f7ff ffdc 	bl	d72c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7310:	b002      	add	sp, #8
   d7312:	bd10      	pop	{r4, pc}
   d7314:	000d9de8 	.word	0x000d9de8

000d7318 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7318:	7441      	strb	r1, [r0, #17]
}
   d731a:	4770      	bx	lr

000d731c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d731c:	4770      	bx	lr

000d731e <_ZN9USBSerial4readEv>:
{
   d731e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7320:	2100      	movs	r1, #0
   d7322:	7c00      	ldrb	r0, [r0, #16]
   d7324:	f7ff fad6 	bl	d68d4 <HAL_USB_USART_Receive_Data>
}
   d7328:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d732c:	bd08      	pop	{r3, pc}

000d732e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d732e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7330:	2101      	movs	r1, #1
   d7332:	7c00      	ldrb	r0, [r0, #16]
   d7334:	f7ff face 	bl	d68d4 <HAL_USB_USART_Receive_Data>
}
   d7338:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d733c:	bd08      	pop	{r3, pc}

000d733e <_ZN9USBSerial17availableForWriteEv>:
{
   d733e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7340:	7c00      	ldrb	r0, [r0, #16]
   d7342:	f7ff fabf 	bl	d68c4 <HAL_USB_USART_Available_Data_For_Write>
}
   d7346:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d734a:	bd08      	pop	{r3, pc}

000d734c <_ZN9USBSerial9availableEv>:
{
   d734c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d734e:	7c00      	ldrb	r0, [r0, #16]
   d7350:	f7ff fab0 	bl	d68b4 <HAL_USB_USART_Available_Data>
}
   d7354:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7358:	bd08      	pop	{r3, pc}

000d735a <_ZN9USBSerial5writeEh>:
{
   d735a:	b513      	push	{r0, r1, r4, lr}
   d735c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d735e:	7c00      	ldrb	r0, [r0, #16]
{
   d7360:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7362:	f7ff faaf 	bl	d68c4 <HAL_USB_USART_Available_Data_For_Write>
   d7366:	2800      	cmp	r0, #0
   d7368:	9901      	ldr	r1, [sp, #4]
   d736a:	dc01      	bgt.n	d7370 <_ZN9USBSerial5writeEh+0x16>
   d736c:	7c60      	ldrb	r0, [r4, #17]
   d736e:	b120      	cbz	r0, d737a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7370:	7c20      	ldrb	r0, [r4, #16]
   d7372:	f7ff fab7 	bl	d68e4 <HAL_USB_USART_Send_Data>
   d7376:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d737a:	b002      	add	sp, #8
   d737c:	bd10      	pop	{r4, pc}

000d737e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d737e:	7c00      	ldrb	r0, [r0, #16]
   d7380:	f7ff bab8 	b.w	d68f4 <HAL_USB_USART_Flush_Data>

000d7384 <_ZN9USBSerialD0Ev>:
   d7384:	b510      	push	{r4, lr}
   d7386:	2114      	movs	r1, #20
   d7388:	4604      	mov	r4, r0
   d738a:	f000 fe18 	bl	d7fbe <_ZdlPvj>
   d738e:	4620      	mov	r0, r4
   d7390:	bd10      	pop	{r4, pc}
	...

000d7394 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7394:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d739a:	4604      	mov	r4, r0
   d739c:	4608      	mov	r0, r1
   d739e:	2100      	movs	r1, #0
   d73a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d73a4:	4b04      	ldr	r3, [pc, #16]	; (d73b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d73a6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d73a8:	2301      	movs	r3, #1
  _serial = serial;
   d73aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d73ac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d73ae:	4611      	mov	r1, r2
   d73b0:	f7ff fa70 	bl	d6894 <HAL_USB_USART_Init>
}
   d73b4:	4620      	mov	r0, r4
   d73b6:	bd10      	pop	{r4, pc}
   d73b8:	000d9dfc 	.word	0x000d9dfc

000d73bc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d73bc:	7c00      	ldrb	r0, [r0, #16]
   d73be:	2200      	movs	r2, #0
   d73c0:	f7ff ba70 	b.w	d68a4 <HAL_USB_USART_Begin>

000d73c4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d73c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d73c6:	2214      	movs	r2, #20
{
   d73c8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d73ca:	2100      	movs	r1, #0
   d73cc:	f001 fbe6 	bl	d8b9c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d73d0:	4620      	mov	r0, r4
   d73d2:	bd10      	pop	{r4, pc}

000d73d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d73d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d73d6:	4c10      	ldr	r4, [pc, #64]	; (d7418 <_Z16_fetch_usbserialv+0x44>)
{
   d73d8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d73da:	a803      	add	r0, sp, #12
   d73dc:	f7ff fff2 	bl	d73c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d73e0:	7821      	ldrb	r1, [r4, #0]
   d73e2:	f3bf 8f5b 	dmb	ish
   d73e6:	f011 0101 	ands.w	r1, r1, #1
   d73ea:	d111      	bne.n	d7410 <_Z16_fetch_usbserialv+0x3c>
   d73ec:	4620      	mov	r0, r4
   d73ee:	9101      	str	r1, [sp, #4]
   d73f0:	f7fc fe62 	bl	d40b8 <__cxa_guard_acquire>
   d73f4:	9901      	ldr	r1, [sp, #4]
   d73f6:	b158      	cbz	r0, d7410 <_Z16_fetch_usbserialv+0x3c>
   d73f8:	aa03      	add	r2, sp, #12
   d73fa:	4808      	ldr	r0, [pc, #32]	; (d741c <_Z16_fetch_usbserialv+0x48>)
   d73fc:	f7ff ffca 	bl	d7394 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7400:	4620      	mov	r0, r4
   d7402:	f7fc fe5e 	bl	d40c2 <__cxa_guard_release>
   d7406:	4a06      	ldr	r2, [pc, #24]	; (d7420 <_Z16_fetch_usbserialv+0x4c>)
   d7408:	4906      	ldr	r1, [pc, #24]	; (d7424 <_Z16_fetch_usbserialv+0x50>)
   d740a:	4804      	ldr	r0, [pc, #16]	; (d741c <_Z16_fetch_usbserialv+0x48>)
   d740c:	f000 fdd2 	bl	d7fb4 <__aeabi_atexit>
	return _usbserial;
}
   d7410:	4802      	ldr	r0, [pc, #8]	; (d741c <_Z16_fetch_usbserialv+0x48>)
   d7412:	b008      	add	sp, #32
   d7414:	bd10      	pop	{r4, pc}
   d7416:	bf00      	nop
   d7418:	2003e68c 	.word	0x2003e68c
   d741c:	2003e690 	.word	0x2003e690
   d7420:	2003e564 	.word	0x2003e564
   d7424:	000d731d 	.word	0x000d731d

000d7428 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7428:	4770      	bx	lr

000d742a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d742a:	7441      	strb	r1, [r0, #17]
}
   d742c:	4770      	bx	lr

000d742e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d742e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7430:	7c00      	ldrb	r0, [r0, #16]
   d7432:	f7ff f957 	bl	d66e4 <hal_usart_available_data_for_write>
}
   d7436:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d743a:	bd08      	pop	{r3, pc}

000d743c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d743c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d743e:	7c00      	ldrb	r0, [r0, #16]
   d7440:	f7ff f928 	bl	d6694 <hal_usart_available>
}
   d7444:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7448:	bd08      	pop	{r3, pc}

000d744a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d744a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d744c:	7c00      	ldrb	r0, [r0, #16]
   d744e:	f7ff f931 	bl	d66b4 <hal_usart_peek>
}
   d7452:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7456:	bd08      	pop	{r3, pc}

000d7458 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7458:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d745a:	7c00      	ldrb	r0, [r0, #16]
   d745c:	f7ff f922 	bl	d66a4 <hal_usart_read>
}
   d7460:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7464:	bd08      	pop	{r3, pc}

000d7466 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7466:	7c00      	ldrb	r0, [r0, #16]
   d7468:	f7ff b92c 	b.w	d66c4 <hal_usart_flush>

000d746c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d746c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d746e:	7c45      	ldrb	r5, [r0, #17]
{
   d7470:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7472:	b12d      	cbz	r5, d7480 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7474:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7476:	b003      	add	sp, #12
   d7478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d747c:	f7ff b902 	b.w	d6684 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7480:	7c00      	ldrb	r0, [r0, #16]
   d7482:	9101      	str	r1, [sp, #4]
   d7484:	f7ff f92e 	bl	d66e4 <hal_usart_available_data_for_write>
   d7488:	2800      	cmp	r0, #0
   d748a:	9901      	ldr	r1, [sp, #4]
   d748c:	dcf2      	bgt.n	d7474 <_ZN11USARTSerial5writeEh+0x8>
}
   d748e:	4628      	mov	r0, r5
   d7490:	b003      	add	sp, #12
   d7492:	bd30      	pop	{r4, r5, pc}

000d7494 <_ZN11USARTSerialD0Ev>:
   d7494:	b510      	push	{r4, lr}
   d7496:	2114      	movs	r1, #20
   d7498:	4604      	mov	r4, r0
   d749a:	f000 fd90 	bl	d7fbe <_ZdlPvj>
   d749e:	4620      	mov	r0, r4
   d74a0:	bd10      	pop	{r4, pc}
	...

000d74a4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d74a4:	b510      	push	{r4, lr}
   d74a6:	f04f 0c00 	mov.w	ip, #0
   d74aa:	4604      	mov	r4, r0
   d74ac:	4608      	mov	r0, r1
   d74ae:	4611      	mov	r1, r2
   d74b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d74b4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d74b8:	4a04      	ldr	r2, [pc, #16]	; (d74cc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d74ba:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d74bc:	2201      	movs	r2, #1
  _serial = serial;
   d74be:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d74c0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d74c2:	461a      	mov	r2, r3
   d74c4:	f7ff f8d6 	bl	d6674 <hal_usart_init>
}
   d74c8:	4620      	mov	r0, r4
   d74ca:	bd10      	pop	{r4, pc}
   d74cc:	000d9e2c 	.word	0x000d9e2c

000d74d0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d74d0:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d74d2:	4c0e      	ldr	r4, [pc, #56]	; (d750c <_Z22__fetch_global_Serial1v+0x3c>)
   d74d4:	7821      	ldrb	r1, [r4, #0]
   d74d6:	f3bf 8f5b 	dmb	ish
   d74da:	f011 0101 	ands.w	r1, r1, #1
   d74de:	d112      	bne.n	d7506 <_Z22__fetch_global_Serial1v+0x36>
   d74e0:	4620      	mov	r0, r4
   d74e2:	9101      	str	r1, [sp, #4]
   d74e4:	f7fc fde8 	bl	d40b8 <__cxa_guard_acquire>
   d74e8:	9901      	ldr	r1, [sp, #4]
   d74ea:	b160      	cbz	r0, d7506 <_Z22__fetch_global_Serial1v+0x36>
   d74ec:	4a08      	ldr	r2, [pc, #32]	; (d7510 <_Z22__fetch_global_Serial1v+0x40>)
   d74ee:	4b09      	ldr	r3, [pc, #36]	; (d7514 <_Z22__fetch_global_Serial1v+0x44>)
   d74f0:	4809      	ldr	r0, [pc, #36]	; (d7518 <_Z22__fetch_global_Serial1v+0x48>)
   d74f2:	f7ff ffd7 	bl	d74a4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d74f6:	4620      	mov	r0, r4
   d74f8:	f7fc fde3 	bl	d40c2 <__cxa_guard_release>
   d74fc:	4a07      	ldr	r2, [pc, #28]	; (d751c <_Z22__fetch_global_Serial1v+0x4c>)
   d74fe:	4908      	ldr	r1, [pc, #32]	; (d7520 <_Z22__fetch_global_Serial1v+0x50>)
   d7500:	4805      	ldr	r0, [pc, #20]	; (d7518 <_Z22__fetch_global_Serial1v+0x48>)
   d7502:	f000 fd57 	bl	d7fb4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7506:	4804      	ldr	r0, [pc, #16]	; (d7518 <_Z22__fetch_global_Serial1v+0x48>)
   d7508:	b002      	add	sp, #8
   d750a:	bd10      	pop	{r4, pc}
   d750c:	2003e6a4 	.word	0x2003e6a4
   d7510:	2003e6a8 	.word	0x2003e6a8
   d7514:	2003e72c 	.word	0x2003e72c
   d7518:	2003e7b0 	.word	0x2003e7b0
   d751c:	2003e564 	.word	0x2003e564
   d7520:	000d7429 	.word	0x000d7429

000d7524 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7524:	4770      	bx	lr

000d7526 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7528:	4606      	mov	r6, r0
   d752a:	4615      	mov	r5, r2
   d752c:	460c      	mov	r4, r1
   d752e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7530:	42bc      	cmp	r4, r7
   d7532:	d006      	beq.n	d7542 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7534:	6833      	ldr	r3, [r6, #0]
   d7536:	f814 1b01 	ldrb.w	r1, [r4], #1
   d753a:	689b      	ldr	r3, [r3, #8]
   d753c:	4630      	mov	r0, r6
   d753e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7540:	e7f6      	b.n	d7530 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7542:	4628      	mov	r0, r5
   d7544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7546 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7546:	7c00      	ldrb	r0, [r0, #16]
   d7548:	2200      	movs	r2, #0
   d754a:	f7ff b8f3 	b.w	d6734 <hal_i2c_write>

000d754e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d754e:	7c00      	ldrb	r0, [r0, #16]
   d7550:	2100      	movs	r1, #0
   d7552:	f7ff b8f7 	b.w	d6744 <hal_i2c_available>

000d7556 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7556:	7c00      	ldrb	r0, [r0, #16]
   d7558:	2100      	movs	r1, #0
   d755a:	f7ff b8fb 	b.w	d6754 <hal_i2c_read>

000d755e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d755e:	7c00      	ldrb	r0, [r0, #16]
   d7560:	2100      	movs	r1, #0
   d7562:	f7ff b8ff 	b.w	d6764 <hal_i2c_peek>

000d7566 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7566:	7c00      	ldrb	r0, [r0, #16]
   d7568:	2100      	movs	r1, #0
   d756a:	f7ff b903 	b.w	d6774 <hal_i2c_flush>

000d756e <_ZN7TwoWireD0Ev>:
   d756e:	b510      	push	{r4, lr}
   d7570:	2114      	movs	r1, #20
   d7572:	4604      	mov	r4, r0
   d7574:	f000 fd23 	bl	d7fbe <_ZdlPvj>
   d7578:	4620      	mov	r0, r4
   d757a:	bd10      	pop	{r4, pc}

000d757c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d757c:	b510      	push	{r4, lr}
   d757e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7582:	4604      	mov	r4, r0
   d7584:	4608      	mov	r0, r1
   d7586:	2100      	movs	r1, #0
   d7588:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d758c:	4b03      	ldr	r3, [pc, #12]	; (d759c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d758e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7590:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7592:	4611      	mov	r1, r2
   d7594:	f7ff f8fe 	bl	d6794 <hal_i2c_init>
}
   d7598:	4620      	mov	r0, r4
   d759a:	bd10      	pop	{r4, pc}
   d759c:	000d9e5c 	.word	0x000d9e5c

000d75a0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d75a0:	7c00      	ldrb	r0, [r0, #16]
   d75a2:	2200      	movs	r2, #0
   d75a4:	f7ff b8a6 	b.w	d66f4 <hal_i2c_set_speed>

000d75a8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d75a8:	2300      	movs	r3, #0
   d75aa:	7c00      	ldrb	r0, [r0, #16]
   d75ac:	461a      	mov	r2, r3
   d75ae:	4619      	mov	r1, r3
   d75b0:	f7ff b8a8 	b.w	d6704 <hal_i2c_begin>

000d75b4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d75b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d75b6:	2200      	movs	r2, #0
   d75b8:	2314      	movs	r3, #20
   d75ba:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d75be:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d75c2:	780b      	ldrb	r3, [r1, #0]
   d75c4:	f88d 3008 	strb.w	r3, [sp, #8]
   d75c8:	684b      	ldr	r3, [r1, #4]
   d75ca:	9303      	str	r3, [sp, #12]
   d75cc:	68cb      	ldr	r3, [r1, #12]
   d75ce:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d75d0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d75d2:	7a0b      	ldrb	r3, [r1, #8]
   d75d4:	9305      	str	r3, [sp, #20]
   d75d6:	a901      	add	r1, sp, #4
   d75d8:	f7ff f8e4 	bl	d67a4 <hal_i2c_request_ex>
}
   d75dc:	b007      	add	sp, #28
   d75de:	f85d fb04 	ldr.w	pc, [sp], #4

000d75e2 <_ZN7TwoWire11requestFromEhjh>:
{
   d75e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d75e4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d75e6:	f88d 1000 	strb.w	r1, [sp]
   d75ea:	f04f 0164 	mov.w	r1, #100	; 0x64
   d75ee:	9103      	str	r1, [sp, #12]
   d75f0:	bf18      	it	ne
   d75f2:	2301      	movne	r3, #1
   d75f4:	4669      	mov	r1, sp
    size_ = size;
   d75f6:	9201      	str	r2, [sp, #4]
   d75f8:	f88d 3008 	strb.w	r3, [sp, #8]
   d75fc:	f7ff ffda 	bl	d75b4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7600:	b005      	add	sp, #20
   d7602:	f85d fb04 	ldr.w	pc, [sp], #4

000d7606 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d7606:	2301      	movs	r3, #1
   d7608:	f7ff bfeb 	b.w	d75e2 <_ZN7TwoWire11requestFromEhjh>

000d760c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d760c:	7c00      	ldrb	r0, [r0, #16]
   d760e:	2200      	movs	r2, #0
   d7610:	f7ff b880 	b.w	d6714 <hal_i2c_begin_transmission>

000d7614 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7614:	b2c9      	uxtb	r1, r1
   d7616:	f7ff bff9 	b.w	d760c <_ZN7TwoWire17beginTransmissionEh>

000d761a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d761a:	7c00      	ldrb	r0, [r0, #16]
   d761c:	2200      	movs	r2, #0
   d761e:	f7ff b881 	b.w	d6724 <hal_i2c_end_transmission>

000d7622 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7622:	2101      	movs	r1, #1
   d7624:	f7ff bff9 	b.w	d761a <_ZN7TwoWire15endTransmissionEh>

000d7628 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7628:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d762a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d762c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7630:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7632:	2201      	movs	r2, #1
   d7634:	f04f 33ff 	mov.w	r3, #4294967295
   d7638:	f10d 0107 	add.w	r1, sp, #7
   d763c:	47a0      	blx	r4
}
   d763e:	b002      	add	sp, #8
   d7640:	bd10      	pop	{r4, pc}

000d7642 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7642:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7644:	6803      	ldr	r3, [r0, #0]
   d7646:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7648:	f04f 33ff 	mov.w	r3, #4294967295
   d764c:	46a4      	mov	ip, r4
}
   d764e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7652:	4760      	bx	ip

000d7654 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7654:	b513      	push	{r0, r1, r4, lr}
   d7656:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d7658:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d765a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d765e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d7660:	f10d 0107 	add.w	r1, sp, #7
   d7664:	2201      	movs	r2, #1
   d7666:	47a0      	blx	r4
}
   d7668:	b002      	add	sp, #8
   d766a:	bd10      	pop	{r4, pc}

000d766c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d766c:	4770      	bx	lr

000d766e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d766e:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7670:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7672:	681a      	ldr	r2, [r3, #0]
   d7674:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d7676:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d7678:	da10      	bge.n	d769c <_ZN9TCPClient9connectedEv+0x2e>
   d767a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d767e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7682:	429a      	cmp	r2, r3
   d7684:	d10a      	bne.n	d769c <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d7686:	6803      	ldr	r3, [r0, #0]
   d7688:	691b      	ldr	r3, [r3, #16]
   d768a:	4798      	blx	r3
        if (!rv) {
   d768c:	4604      	mov	r4, r0
   d768e:	b928      	cbnz	r0, d769c <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d7690:	682b      	ldr	r3, [r5, #0]
   d7692:	4628      	mov	r0, r5
   d7694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7696:	4798      	blx	r3
        rv = available();
   d7698:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d769a:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d769c:	2001      	movs	r0, #1
   d769e:	e7fc      	b.n	d769a <_ZN9TCPClient9connectedEv+0x2c>

000d76a0 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d76a0:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d76a2:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d76a4:	43c0      	mvns	r0, r0
   d76a6:	0fc0      	lsrs	r0, r0, #31
   d76a8:	4770      	bx	lr

000d76aa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d76aa:	4770      	bx	lr

000d76ac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d76ac:	4b06      	ldr	r3, [pc, #24]	; (d76c8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d76ae:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d76b0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d76b2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d76b6:	d005      	beq.n	d76c4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d76b8:	4608      	mov	r0, r1
   d76ba:	f000 fc85 	bl	d7fc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d76be:	2800      	cmp	r0, #0
	return nullptr;
   d76c0:	bf08      	it	eq
   d76c2:	2400      	moveq	r4, #0
      }
   d76c4:	4620      	mov	r0, r4
   d76c6:	bd10      	pop	{r4, pc}
   d76c8:	000d9da8 	.word	0x000d9da8

000d76cc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d76cc:	b510      	push	{r4, lr}
   d76ce:	21ac      	movs	r1, #172	; 0xac
   d76d0:	4604      	mov	r4, r0
   d76d2:	f000 fc74 	bl	d7fbe <_ZdlPvj>
   d76d6:	4620      	mov	r0, r4
   d76d8:	bd10      	pop	{r4, pc}

000d76da <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d76da:	f7fc bce0 	b.w	d409e <_ZdlPv>

000d76de <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d76de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d76e2:	f04f 0800 	mov.w	r8, #0
   d76e6:	b086      	sub	sp, #24
   d76e8:	461d      	mov	r5, r3
   d76ea:	f8c0 8004 	str.w	r8, [r0, #4]
   d76ee:	4604      	mov	r4, r0
   d76f0:	460e      	mov	r6, r1
   d76f2:	4617      	mov	r7, r2
    struct timeval tv = {};
   d76f4:	4641      	mov	r1, r8
   d76f6:	2210      	movs	r2, #16
   d76f8:	a802      	add	r0, sp, #8
   d76fa:	f001 fa4f 	bl	d8b9c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d76fe:	1c6b      	adds	r3, r5, #1
   d7700:	d009      	beq.n	d7716 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d7702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7706:	fbb5 f3f0 	udiv	r3, r5, r0
   d770a:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d770e:	fb00 5313 	mls	r3, r0, r3, r5
   d7712:	4358      	muls	r0, r3
   d7714:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7716:	6960      	ldr	r0, [r4, #20]
   d7718:	2310      	movs	r3, #16
   d771a:	9300      	str	r3, [sp, #0]
   d771c:	6800      	ldr	r0, [r0, #0]
   d771e:	ab02      	add	r3, sp, #8
   d7720:	f241 0205 	movw	r2, #4101	; 0x1005
   d7724:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7728:	f7ff f844 	bl	d67b4 <sock_setsockopt>
    if (ret < 0) {
   d772c:	2800      	cmp	r0, #0
   d772e:	da07      	bge.n	d7740 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d7730:	f7ff f9b4 	bl	d6a9c <__errno>
   d7734:	6803      	ldr	r3, [r0, #0]
   d7736:	6063      	str	r3, [r4, #4]
        return 0;
   d7738:	2000      	movs	r0, #0
}
   d773a:	b006      	add	sp, #24
   d773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d7740:	6960      	ldr	r0, [r4, #20]
   d7742:	2300      	movs	r3, #0
   d7744:	6800      	ldr	r0, [r0, #0]
   d7746:	463a      	mov	r2, r7
   d7748:	4631      	mov	r1, r6
   d774a:	f7ff f853 	bl	d67f4 <sock_send>
    if (ret < 0) {
   d774e:	1e03      	subs	r3, r0, #0
   d7750:	dbee      	blt.n	d7730 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d7752:	4618      	mov	r0, r3
   d7754:	e7f1      	b.n	d773a <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d7758 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d7758:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d775a:	6984      	ldr	r4, [r0, #24]
   d775c:	4b0a      	ldr	r3, [pc, #40]	; (d7788 <_ZN9TCPClientD1Ev+0x30>)
   d775e:	6003      	str	r3, [r0, #0]
   d7760:	4605      	mov	r5, r0
   d7762:	b17c      	cbz	r4, d7784 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d7764:	6863      	ldr	r3, [r4, #4]
   d7766:	3b01      	subs	r3, #1
   d7768:	6063      	str	r3, [r4, #4]
   d776a:	b95b      	cbnz	r3, d7784 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d776c:	6823      	ldr	r3, [r4, #0]
   d776e:	4620      	mov	r0, r4
   d7770:	689b      	ldr	r3, [r3, #8]
   d7772:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7774:	68a3      	ldr	r3, [r4, #8]
   d7776:	3b01      	subs	r3, #1
   d7778:	60a3      	str	r3, [r4, #8]
   d777a:	b91b      	cbnz	r3, d7784 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d777c:	6823      	ldr	r3, [r4, #0]
   d777e:	4620      	mov	r0, r4
   d7780:	68db      	ldr	r3, [r3, #12]
   d7782:	4798      	blx	r3
   d7784:	4628      	mov	r0, r5
   d7786:	bd38      	pop	{r3, r4, r5, pc}
   d7788:	000d9eb8 	.word	0x000d9eb8

000d778c <_ZN9TCPClientD0Ev>:
   d778c:	b510      	push	{r4, lr}
   d778e:	4604      	mov	r4, r0
   d7790:	f7ff ffe2 	bl	d7758 <_ZN9TCPClientD1Ev>
   d7794:	4620      	mov	r0, r4
   d7796:	211c      	movs	r1, #28
   d7798:	f000 fc11 	bl	d7fbe <_ZdlPvj>
   d779c:	4620      	mov	r0, r4
   d779e:	bd10      	pop	{r4, pc}

000d77a0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d77a0:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d77a2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d77a4:	4b05      	ldr	r3, [pc, #20]	; (d77bc <_ZN9TCPClient8remoteIPEv+0x1c>)
   d77a6:	4604      	mov	r4, r0
   d77a8:	358c      	adds	r5, #140	; 0x8c
   d77aa:	f844 3b04 	str.w	r3, [r4], #4
   d77ae:	4606      	mov	r6, r0
   d77b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d77b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d77b4:	682b      	ldr	r3, [r5, #0]
   d77b6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d77b8:	4630      	mov	r0, r6
   d77ba:	bd70      	pop	{r4, r5, r6, pc}
   d77bc:	000d9de8 	.word	0x000d9de8

000d77c0 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d77c0:	b510      	push	{r4, lr}
   d77c2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d77c4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d77c8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d77cc:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d77ce:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d77d0:	d005      	beq.n	d77de <_ZN9TCPClient4peekEv+0x1e>
   d77d2:	6963      	ldr	r3, [r4, #20]
   d77d4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d77d8:	4413      	add	r3, r2
   d77da:	7918      	ldrb	r0, [r3, #4]
}
   d77dc:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d77de:	6803      	ldr	r3, [r0, #0]
   d77e0:	691b      	ldr	r3, [r3, #16]
   d77e2:	4798      	blx	r3
   d77e4:	2800      	cmp	r0, #0
   d77e6:	d1f4      	bne.n	d77d2 <_ZN9TCPClient4peekEv+0x12>
   d77e8:	f04f 30ff 	mov.w	r0, #4294967295
   d77ec:	e7f6      	b.n	d77dc <_ZN9TCPClient4peekEv+0x1c>

000d77ee <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d77ee:	b510      	push	{r4, lr}
   d77f0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d77f2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d77f6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d77fa:	429a      	cmp	r2, r3
int TCPClient::read() {
   d77fc:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d77fe:	d008      	beq.n	d7812 <_ZN9TCPClient4readEv+0x24>
   d7800:	6963      	ldr	r3, [r4, #20]
   d7802:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7806:	1c51      	adds	r1, r2, #1
   d7808:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d780c:	4413      	add	r3, r2
   d780e:	7918      	ldrb	r0, [r3, #4]
}
   d7810:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7812:	6803      	ldr	r3, [r0, #0]
   d7814:	691b      	ldr	r3, [r3, #16]
   d7816:	4798      	blx	r3
   d7818:	2800      	cmp	r0, #0
   d781a:	d1f1      	bne.n	d7800 <_ZN9TCPClient4readEv+0x12>
   d781c:	f04f 30ff 	mov.w	r0, #4294967295
   d7820:	e7f6      	b.n	d7810 <_ZN9TCPClient4readEv+0x22>

000d7822 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7824:	6943      	ldr	r3, [r0, #20]
   d7826:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d7828:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d782c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7830:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7832:	4605      	mov	r5, r0
   d7834:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d7836:	d016      	beq.n	d7866 <_ZN9TCPClient4readEPhj+0x44>
   d7838:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d783a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d783e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7842:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7844:	42bc      	cmp	r4, r7
   d7846:	bf28      	it	cs
   d7848:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d784a:	3304      	adds	r3, #4
   d784c:	4622      	mov	r2, r4
   d784e:	4419      	add	r1, r3
   d7850:	4630      	mov	r0, r6
   d7852:	f001 f995 	bl	d8b80 <memcpy>
   d7856:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7858:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d785c:	4423      	add	r3, r4
   d785e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d7862:	4620      	mov	r0, r4
   d7864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d7866:	6803      	ldr	r3, [r0, #0]
   d7868:	691b      	ldr	r3, [r3, #16]
   d786a:	4798      	blx	r3
   d786c:	2800      	cmp	r0, #0
   d786e:	d1e3      	bne.n	d7838 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d7870:	f04f 34ff 	mov.w	r4, #4294967295
   d7874:	e7f5      	b.n	d7862 <_ZN9TCPClient4readEPhj+0x40>

000d7876 <_ZN9TCPClient12flush_bufferEv>:
   d7876:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7878:	2300      	movs	r3, #0
   d787a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d787e:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7880:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d7884:	4770      	bx	lr

000d7886 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d788a:	461f      	mov	r7, r3
    stop();
   d788c:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d788e:	460c      	mov	r4, r1
    stop();
   d7890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7892:	b08a      	sub	sp, #40	; 0x28
   d7894:	4605      	mov	r5, r0
   d7896:	4616      	mov	r6, r2
    stop();
   d7898:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d789a:	7d23      	ldrb	r3, [r4, #20]
   d789c:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d78a0:	2b04      	cmp	r3, #4
   d78a2:	bf0c      	ite	eq
   d78a4:	2002      	moveq	r0, #2
   d78a6:	200a      	movne	r0, #10
   d78a8:	2206      	movs	r2, #6
   d78aa:	2101      	movs	r1, #1
   d78ac:	f7fe ffaa 	bl	d6804 <sock_socket>
   d78b0:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d78b4:	696b      	ldr	r3, [r5, #20]
   d78b6:	681b      	ldr	r3, [r3, #0]
   d78b8:	2b00      	cmp	r3, #0
   d78ba:	da08      	bge.n	d78ce <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d78bc:	682b      	ldr	r3, [r5, #0]
   d78be:	4628      	mov	r0, r5
   d78c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d78c2:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d78c4:	4798      	blx	r3
}
   d78c6:	4620      	mov	r0, r4
   d78c8:	b00a      	add	sp, #40	; 0x28
   d78ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d78ce:	4628      	mov	r0, r5
   d78d0:	f7ff ffd1 	bl	d7876 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d78d4:	b1b7      	cbz	r7, d7904 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d78d6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d78d8:	a903      	add	r1, sp, #12
   d78da:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d78dc:	9303      	str	r3, [sp, #12]
   d78de:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d78e2:	f7fe fe6f 	bl	d65c4 <if_index_to_name>
   d78e6:	2800      	cmp	r0, #0
   d78e8:	d1e8      	bne.n	d78bc <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d78ea:	6968      	ldr	r0, [r5, #20]
   d78ec:	2306      	movs	r3, #6
   d78ee:	9300      	str	r3, [sp, #0]
   d78f0:	6800      	ldr	r0, [r0, #0]
   d78f2:	ab03      	add	r3, sp, #12
   d78f4:	f241 020b 	movw	r2, #4107	; 0x100b
   d78f8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d78fc:	f7fe ff5a 	bl	d67b4 <sock_setsockopt>
   d7900:	2800      	cmp	r0, #0
   d7902:	d1db      	bne.n	d78bc <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d7904:	221c      	movs	r2, #28
   d7906:	2100      	movs	r1, #0
   d7908:	a803      	add	r0, sp, #12
   d790a:	f001 f947 	bl	d8b9c <memset>
    if (ip.version() == 4) {
   d790e:	7d23      	ldrb	r3, [r4, #20]
   d7910:	2b04      	cmp	r3, #4
   d7912:	d11d      	bne.n	d7950 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d7914:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d7918:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d791a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d791e:	f7fe fea1 	bl	d6664 <inet_htons>
   d7922:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7926:	6860      	ldr	r0, [r4, #4]
   d7928:	f7fe fe94 	bl	d6654 <inet_htonl>
   d792c:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d792e:	696b      	ldr	r3, [r5, #20]
   d7930:	221c      	movs	r2, #28
   d7932:	6818      	ldr	r0, [r3, #0]
   d7934:	a903      	add	r1, sp, #12
   d7936:	f7fe ff4d 	bl	d67d4 <sock_connect>
   d793a:	2800      	cmp	r0, #0
   d793c:	d1be      	bne.n	d78bc <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d793e:	3404      	adds	r4, #4
   d7940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7942:	696d      	ldr	r5, [r5, #20]
   d7944:	358c      	adds	r5, #140	; 0x8c
   d7946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7948:	6823      	ldr	r3, [r4, #0]
   d794a:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d794c:	2401      	movs	r4, #1
   d794e:	e7ba      	b.n	d78c6 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d7950:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d7954:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d7956:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d795a:	f7fe fe83 	bl	d6664 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d795e:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d7960:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7964:	1d23      	adds	r3, r4, #4
   d7966:	f104 0714 	add.w	r7, r4, #20
   d796a:	6818      	ldr	r0, [r3, #0]
   d796c:	6859      	ldr	r1, [r3, #4]
   d796e:	4632      	mov	r2, r6
   d7970:	c203      	stmia	r2!, {r0, r1}
   d7972:	3308      	adds	r3, #8
   d7974:	42bb      	cmp	r3, r7
   d7976:	4616      	mov	r6, r2
   d7978:	d1f7      	bne.n	d796a <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d797a:	e7d8      	b.n	d792e <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d797c <_ZN9TCPClient9availableEv>:
{
   d797c:	b530      	push	{r4, r5, lr}
   d797e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d7980:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d7984:	b08b      	sub	sp, #44	; 0x2c
   d7986:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d7988:	b12b      	cbz	r3, d7996 <_ZN9TCPClient9availableEv+0x1a>
   d798a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d798e:	429a      	cmp	r2, r3
   d7990:	d101      	bne.n	d7996 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d7992:	f7ff ff70 	bl	d7876 <_ZN9TCPClient12flush_bufferEv>
   d7996:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d7998:	6808      	ldr	r0, [r1, #0]
   d799a:	2800      	cmp	r0, #0
   d799c:	db18      	blt.n	d79d0 <_ZN9TCPClient9availableEv+0x54>
   d799e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d79a2:	2d7f      	cmp	r5, #127	; 0x7f
   d79a4:	d814      	bhi.n	d79d0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d79a6:	3104      	adds	r1, #4
   d79a8:	2308      	movs	r3, #8
   d79aa:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d79ae:	4429      	add	r1, r5
   d79b0:	f7fe ff18 	bl	d67e4 <sock_recv>
            if (ret > 0) {
   d79b4:	2800      	cmp	r0, #0
   d79b6:	dd13      	ble.n	d79e0 <_ZN9TCPClient9availableEv+0x64>
   d79b8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d79ba:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d79be:	b90a      	cbnz	r2, d79c4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d79c0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d79c4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d79c6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d79ca:	4410      	add	r0, r2
   d79cc:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d79d0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d79d2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d79d6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d79da:	1ac0      	subs	r0, r0, r3
   d79dc:	b00b      	add	sp, #44	; 0x2c
   d79de:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d79e0:	f7ff f85c 	bl	d6a9c <__errno>
   d79e4:	6803      	ldr	r3, [r0, #0]
   d79e6:	2b0b      	cmp	r3, #11
   d79e8:	d0f2      	beq.n	d79d0 <_ZN9TCPClient9availableEv+0x54>
   d79ea:	f7ff f857 	bl	d6a9c <__errno>
   d79ee:	6803      	ldr	r3, [r0, #0]
   d79f0:	2b0b      	cmp	r3, #11
   d79f2:	d0ed      	beq.n	d79d0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d79f4:	2320      	movs	r3, #32
   d79f6:	2500      	movs	r5, #0
   d79f8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d79fc:	f7ff f84e 	bl	d6a9c <__errno>
   d7a00:	6803      	ldr	r3, [r0, #0]
   d7a02:	9301      	str	r3, [sp, #4]
   d7a04:	4b08      	ldr	r3, [pc, #32]	; (d7a28 <_ZN9TCPClient9availableEv+0xac>)
   d7a06:	4909      	ldr	r1, [pc, #36]	; (d7a2c <_ZN9TCPClient9availableEv+0xb0>)
   d7a08:	9300      	str	r3, [sp, #0]
   d7a0a:	aa02      	add	r2, sp, #8
   d7a0c:	462b      	mov	r3, r5
   d7a0e:	2032      	movs	r0, #50	; 0x32
   d7a10:	f7fe ff80 	bl	d6914 <log_message>
                    sock_close(d_->sock);
   d7a14:	6963      	ldr	r3, [r4, #20]
   d7a16:	6818      	ldr	r0, [r3, #0]
   d7a18:	f7fe fed4 	bl	d67c4 <sock_close>
   d7a1c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7a1e:	f04f 32ff 	mov.w	r2, #4294967295
   d7a22:	601a      	str	r2, [r3, #0]
   d7a24:	e7d4      	b.n	d79d0 <_ZN9TCPClient9availableEv+0x54>
   d7a26:	bf00      	nop
   d7a28:	000d9e83 	.word	0x000d9e83
   d7a2c:	000d9e7c 	.word	0x000d9e7c

000d7a30 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d7a30:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7a32:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d7a34:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7a36:	6818      	ldr	r0, [r3, #0]
   d7a38:	2800      	cmp	r0, #0
   d7a3a:	db01      	blt.n	d7a40 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7a3c:	f7fe fec2 	bl	d67c4 <sock_close>
   d7a40:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d7a42:	f04f 32ff 	mov.w	r2, #4294967295
   d7a46:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d7a48:	6960      	ldr	r0, [r4, #20]
   d7a4a:	2211      	movs	r2, #17
   d7a4c:	2100      	movs	r1, #0
   d7a4e:	308c      	adds	r0, #140	; 0x8c
   d7a50:	f001 f8a4 	bl	d8b9c <memset>
    flush_buffer();
   d7a54:	4620      	mov	r0, r4
}
   d7a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d7a5a:	f7ff bf0c 	b.w	d7876 <_ZN9TCPClient12flush_bufferEv>

000d7a5e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d7a5e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7a60:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d7a62:	4604      	mov	r4, r0
          total(0) {
   d7a64:	6001      	str	r1, [r0, #0]
   d7a66:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d7a6a:	3088      	adds	r0, #136	; 0x88
   d7a6c:	f7ff fbf6 	bl	d725c <_ZN9IPAddressC1Ev>
}
   d7a70:	4620      	mov	r0, r4
   d7a72:	bd10      	pop	{r4, pc}

000d7a74 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d7a74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7a76:	2300      	movs	r3, #0
   d7a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7a7c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d7a80:	4a0e      	ldr	r2, [pc, #56]	; (d7abc <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d7a82:	6103      	str	r3, [r0, #16]
   d7a84:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7a86:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d7a88:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7a8a:	20ac      	movs	r0, #172	; 0xac
   d7a8c:	9101      	str	r1, [sp, #4]
   d7a8e:	f7fc fb02 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d7a92:	1e05      	subs	r5, r0, #0
   d7a94:	f105 060c 	add.w	r6, r5, #12
   d7a98:	d008      	beq.n	d7aac <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d7a9a:	2301      	movs	r3, #1
   d7a9c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d7aa0:	4b07      	ldr	r3, [pc, #28]	; (d7ac0 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7aa2:	9901      	ldr	r1, [sp, #4]
   d7aa4:	602b      	str	r3, [r5, #0]
   d7aa6:	4630      	mov	r0, r6
   d7aa8:	f7ff ffd9 	bl	d7a5e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d7aac:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d7aae:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d7ab2:	f7ff fee0 	bl	d7876 <_ZN9TCPClient12flush_bufferEv>
}
   d7ab6:	b002      	add	sp, #8
   d7ab8:	bd70      	pop	{r4, r5, r6, pc}
   d7aba:	bf00      	nop
   d7abc:	000d9eb8 	.word	0x000d9eb8
   d7ac0:	000d9e9c 	.word	0x000d9e9c

000d7ac4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d7ac4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7ac6:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d7aca:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7acc:	f7ff ffd2 	bl	d7a74 <_ZN9TCPClientC1Ei>
}
   d7ad0:	4620      	mov	r0, r4
   d7ad2:	bd10      	pop	{r4, pc}

000d7ad4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d7ad4:	b510      	push	{r4, lr}
   d7ad6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7ad8:	6800      	ldr	r0, [r0, #0]
   d7ada:	2800      	cmp	r0, #0
   d7adc:	db01      	blt.n	d7ae2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7ade:	f7fe fe71 	bl	d67c4 <sock_close>
    }
}
   d7ae2:	4620      	mov	r0, r4
   d7ae4:	bd10      	pop	{r4, pc}

000d7ae6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d7ae6:	300c      	adds	r0, #12
   d7ae8:	f7ff bff4 	b.w	d7ad4 <_ZN9TCPClient4DataD1Ev>

000d7aec <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7af0:	4698      	mov	r8, r3
    stop();
   d7af2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7af4:	b093      	sub	sp, #76	; 0x4c
   d7af6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d7af8:	2400      	movs	r4, #0
    stop();
   d7afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7afc:	4606      	mov	r6, r0
   d7afe:	4617      	mov	r7, r2
    stop();
   d7b00:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7b02:	4628      	mov	r0, r5
   d7b04:	466b      	mov	r3, sp
   d7b06:	4622      	mov	r2, r4
   d7b08:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d7b0a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7b0c:	f7fe fd12 	bl	d6534 <netdb_getaddrinfo>
   d7b10:	4605      	mov	r5, r0
   d7b12:	2800      	cmp	r0, #0
   d7b14:	d163      	bne.n	d7bde <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d7b16:	9b00      	ldr	r3, [sp, #0]
   d7b18:	2b00      	cmp	r3, #0
   d7b1a:	d04b      	beq.n	d7bb4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7b1c:	695b      	ldr	r3, [r3, #20]
   d7b1e:	2b00      	cmp	r3, #0
   d7b20:	d048      	beq.n	d7bb4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d7b22:	a806      	add	r0, sp, #24
   d7b24:	f7ff fb9a 	bl	d725c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7b28:	9b00      	ldr	r3, [sp, #0]
   d7b2a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7b2c:	7863      	ldrb	r3, [r4, #1]
   d7b2e:	2b02      	cmp	r3, #2
   d7b30:	d104      	bne.n	d7b3c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7b32:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7b34:	a806      	add	r0, sp, #24
   d7b36:	f7ff f8db 	bl	d6cf0 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d7b3a:	e026      	b.n	d7b8a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d7b3c:	2b0a      	cmp	r3, #10
   d7b3e:	d124      	bne.n	d7b8a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d7b40:	2211      	movs	r2, #17
   d7b42:	4629      	mov	r1, r5
   d7b44:	a801      	add	r0, sp, #4
   d7b46:	f001 f829 	bl	d8b9c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7b4a:	68a3      	ldr	r3, [r4, #8]
   d7b4c:	2b00      	cmp	r3, #0
   d7b4e:	d038      	beq.n	d7bc2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7b50:	f104 0308 	add.w	r3, r4, #8
   d7b54:	f10d 0c04 	add.w	ip, sp, #4
   d7b58:	3418      	adds	r4, #24
   d7b5a:	6818      	ldr	r0, [r3, #0]
   d7b5c:	6859      	ldr	r1, [r3, #4]
   d7b5e:	4662      	mov	r2, ip
   d7b60:	c203      	stmia	r2!, {r0, r1}
   d7b62:	3308      	adds	r3, #8
   d7b64:	42a3      	cmp	r3, r4
   d7b66:	4694      	mov	ip, r2
   d7b68:	d1f7      	bne.n	d7b5a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d7b6a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7b6c:	a901      	add	r1, sp, #4
   d7b6e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d7b70:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7b74:	f7ff fb80 	bl	d7278 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d7b78:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d7b7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7b80:	ac07      	add	r4, sp, #28
   d7b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b84:	f8dc 3000 	ldr.w	r3, [ip]
   d7b88:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d7b8a:	a806      	add	r0, sp, #24
   d7b8c:	f7ff fb86 	bl	d729c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7b90:	b180      	cbz	r0, d7bb4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d7b92:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d7b94:	ad07      	add	r5, sp, #28
   d7b96:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7b9a:	4b12      	ldr	r3, [pc, #72]	; (d7be4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d7b9c:	930c      	str	r3, [sp, #48]	; 0x30
   d7b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ba0:	ac0d      	add	r4, sp, #52	; 0x34
   d7ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ba4:	682b      	ldr	r3, [r5, #0]
   d7ba6:	7023      	strb	r3, [r4, #0]
   d7ba8:	463a      	mov	r2, r7
   d7baa:	4643      	mov	r3, r8
   d7bac:	a90c      	add	r1, sp, #48	; 0x30
   d7bae:	4630      	mov	r0, r6
   d7bb0:	47c8      	blx	r9
   d7bb2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d7bb4:	9800      	ldr	r0, [sp, #0]
   d7bb6:	f7fe fcb5 	bl	d6524 <netdb_freeaddrinfo>
}
   d7bba:	4628      	mov	r0, r5
   d7bbc:	b013      	add	sp, #76	; 0x4c
   d7bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7bc2:	68e3      	ldr	r3, [r4, #12]
   d7bc4:	2b00      	cmp	r3, #0
   d7bc6:	d1c3      	bne.n	d7b50 <_ZN9TCPClient7connectEPKctm+0x64>
   d7bc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7bcc:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7bd0:	f7fe fd40 	bl	d6654 <inet_htonl>
   d7bd4:	4581      	cmp	r9, r0
   d7bd6:	d1bb      	bne.n	d7b50 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d7bd8:	f104 0114 	add.w	r1, r4, #20
   d7bdc:	e7aa      	b.n	d7b34 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7bde:	4625      	mov	r5, r4
   d7be0:	e7e8      	b.n	d7bb4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7be2:	bf00      	nop
   d7be4:	000d9de8 	.word	0x000d9de8

000d7be8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7be8:	2200      	movs	r2, #0
   d7bea:	6840      	ldr	r0, [r0, #4]
   d7bec:	4611      	mov	r1, r2
   d7bee:	f7fe bedd 	b.w	d69ac <network_ready>

000d7bf2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7bf2:	2200      	movs	r2, #0
   d7bf4:	6840      	ldr	r0, [r0, #4]
   d7bf6:	4611      	mov	r1, r2
   d7bf8:	f7fe bef8 	b.w	d69ec <network_listening>

000d7bfc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7bfc:	2200      	movs	r2, #0
   d7bfe:	6840      	ldr	r0, [r0, #4]
   d7c00:	4611      	mov	r1, r2
   d7c02:	f7fe bf03 	b.w	d6a0c <network_get_listen_timeout>

000d7c06 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7c06:	6840      	ldr	r0, [r0, #4]
   d7c08:	2200      	movs	r2, #0
   d7c0a:	f7fe bef7 	b.w	d69fc <network_set_listen_timeout>

000d7c0e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7c0e:	6840      	ldr	r0, [r0, #4]
   d7c10:	2200      	movs	r2, #0
   d7c12:	f081 0101 	eor.w	r1, r1, #1
   d7c16:	f7fe bee1 	b.w	d69dc <network_listen>

000d7c1a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7c1a:	2300      	movs	r3, #0
   d7c1c:	6840      	ldr	r0, [r0, #4]
   d7c1e:	461a      	mov	r2, r3
   d7c20:	4619      	mov	r1, r3
   d7c22:	f7fe bed3 	b.w	d69cc <network_off>

000d7c26 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7c26:	2200      	movs	r2, #0
   d7c28:	6840      	ldr	r0, [r0, #4]
   d7c2a:	4611      	mov	r1, r2
   d7c2c:	f7fe beae 	b.w	d698c <network_connecting>

000d7c30 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7c30:	6840      	ldr	r0, [r0, #4]
   d7c32:	2200      	movs	r2, #0
   d7c34:	2102      	movs	r1, #2
   d7c36:	f7fe beb1 	b.w	d699c <network_disconnect>

000d7c3a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7c3a:	2300      	movs	r3, #0
   d7c3c:	6840      	ldr	r0, [r0, #4]
   d7c3e:	461a      	mov	r2, r3
   d7c40:	f7fe be9c 	b.w	d697c <network_connect>

000d7c44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7c44:	4b02      	ldr	r3, [pc, #8]	; (d7c50 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7c46:	2204      	movs	r2, #4
   d7c48:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7c4a:	4a02      	ldr	r2, [pc, #8]	; (d7c54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7c4c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7c4e:	4770      	bx	lr
   d7c50:	2003e7c4 	.word	0x2003e7c4
   d7c54:	000d9f04 	.word	0x000d9f04

000d7c58 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7c58:	2300      	movs	r3, #0
   d7c5a:	6840      	ldr	r0, [r0, #4]
   d7c5c:	461a      	mov	r2, r3
   d7c5e:	f7fe be8d 	b.w	d697c <network_connect>

000d7c62 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7c62:	6840      	ldr	r0, [r0, #4]
   d7c64:	2200      	movs	r2, #0
   d7c66:	2102      	movs	r1, #2
   d7c68:	f7fe be98 	b.w	d699c <network_disconnect>

000d7c6c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7c6c:	2200      	movs	r2, #0
   d7c6e:	6840      	ldr	r0, [r0, #4]
   d7c70:	4611      	mov	r1, r2
   d7c72:	f7fe be8b 	b.w	d698c <network_connecting>

000d7c76 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7c76:	2200      	movs	r2, #0
   d7c78:	6840      	ldr	r0, [r0, #4]
   d7c7a:	4611      	mov	r1, r2
   d7c7c:	f7fe be96 	b.w	d69ac <network_ready>

000d7c80 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7c80:	2300      	movs	r3, #0
   d7c82:	6840      	ldr	r0, [r0, #4]
   d7c84:	461a      	mov	r2, r3
   d7c86:	4619      	mov	r1, r3
   d7c88:	f7fe be98 	b.w	d69bc <network_on>

000d7c8c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7c8c:	2300      	movs	r3, #0
   d7c8e:	6840      	ldr	r0, [r0, #4]
   d7c90:	461a      	mov	r2, r3
   d7c92:	4619      	mov	r1, r3
   d7c94:	f7fe be9a 	b.w	d69cc <network_off>

000d7c98 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7c98:	6840      	ldr	r0, [r0, #4]
   d7c9a:	2100      	movs	r1, #0
   d7c9c:	f7fe bebe 	b.w	d6a1c <network_is_on>

000d7ca0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7ca0:	6840      	ldr	r0, [r0, #4]
   d7ca2:	2100      	movs	r1, #0
   d7ca4:	f7fe bec2 	b.w	d6a2c <network_is_off>

000d7ca8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7ca8:	6840      	ldr	r0, [r0, #4]
   d7caa:	2200      	movs	r2, #0
   d7cac:	f081 0101 	eor.w	r1, r1, #1
   d7cb0:	f7fe be94 	b.w	d69dc <network_listen>

000d7cb4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7cb4:	6840      	ldr	r0, [r0, #4]
   d7cb6:	2200      	movs	r2, #0
   d7cb8:	f7fe bea0 	b.w	d69fc <network_set_listen_timeout>

000d7cbc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7cbc:	2200      	movs	r2, #0
   d7cbe:	6840      	ldr	r0, [r0, #4]
   d7cc0:	4611      	mov	r1, r2
   d7cc2:	f7fe bea3 	b.w	d6a0c <network_get_listen_timeout>

000d7cc6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7cc6:	2200      	movs	r2, #0
   d7cc8:	6840      	ldr	r0, [r0, #4]
   d7cca:	4611      	mov	r1, r2
   d7ccc:	f7fe be8e 	b.w	d69ec <network_listening>

000d7cd0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7cd4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7cd6:	b095      	sub	sp, #84	; 0x54
   d7cd8:	4616      	mov	r6, r2
   d7cda:	460d      	mov	r5, r1
   d7cdc:	4607      	mov	r7, r0
    IPAddress addr;
   d7cde:	f7ff fabd 	bl	d725c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7ce2:	4621      	mov	r1, r4
   d7ce4:	2218      	movs	r2, #24
   d7ce6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7ce8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7cea:	f000 ff57 	bl	d8b9c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7cee:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7cf0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7cf4:	4621      	mov	r1, r4
   d7cf6:	466b      	mov	r3, sp
   d7cf8:	aa0c      	add	r2, sp, #48	; 0x30
   d7cfa:	4630      	mov	r0, r6
   d7cfc:	f7fe fc1a 	bl	d6534 <netdb_getaddrinfo>
    if (!r) {
   d7d00:	4604      	mov	r4, r0
   d7d02:	2800      	cmp	r0, #0
   d7d04:	d14c      	bne.n	d7da0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7d06:	4602      	mov	r2, r0
   d7d08:	2101      	movs	r1, #1
   d7d0a:	6868      	ldr	r0, [r5, #4]
   d7d0c:	f7fe fe4e 	bl	d69ac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7d10:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7d12:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7d14:	4622      	mov	r2, r4
   d7d16:	6868      	ldr	r0, [r5, #4]
   d7d18:	f7fe fe48 	bl	d69ac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7d1c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7d1e:	4681      	mov	r9, r0
        bool ok = false;
   d7d20:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7d22:	2e00      	cmp	r6, #0
   d7d24:	d03c      	beq.n	d7da0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d7d26:	2900      	cmp	r1, #0
   d7d28:	d13a      	bne.n	d7da0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7d2a:	6873      	ldr	r3, [r6, #4]
   d7d2c:	2b02      	cmp	r3, #2
   d7d2e:	d003      	beq.n	d7d38 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7d30:	2b0a      	cmp	r3, #10
   d7d32:	d011      	beq.n	d7d58 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7d34:	69f6      	ldr	r6, [r6, #28]
   d7d36:	e7f4      	b.n	d7d22 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7d38:	f1b8 0f00 	cmp.w	r8, #0
   d7d3c:	d00a      	beq.n	d7d54 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7d3e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7d40:	a806      	add	r0, sp, #24
   d7d42:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7d44:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d7d46:	f7ff fad9 	bl	d72fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d4c:	1d3c      	adds	r4, r7, #4
   d7d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7d50:	682b      	ldr	r3, [r5, #0]
   d7d52:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7d54:	4641      	mov	r1, r8
   d7d56:	e7ed      	b.n	d7d34 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7d58:	f1b9 0f00 	cmp.w	r9, #0
   d7d5c:	d101      	bne.n	d7d62 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7d5e:	4649      	mov	r1, r9
   d7d60:	e7e8      	b.n	d7d34 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7d62:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7d64:	2210      	movs	r2, #16
   d7d66:	a801      	add	r0, sp, #4
   d7d68:	f000 ff18 	bl	d8b9c <memset>
                    a.v = 6;
   d7d6c:	2306      	movs	r3, #6
   d7d6e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7d72:	ad01      	add	r5, sp, #4
   d7d74:	f104 0308 	add.w	r3, r4, #8
   d7d78:	3418      	adds	r4, #24
   d7d7a:	6818      	ldr	r0, [r3, #0]
   d7d7c:	6859      	ldr	r1, [r3, #4]
   d7d7e:	462a      	mov	r2, r5
   d7d80:	c203      	stmia	r2!, {r0, r1}
   d7d82:	3308      	adds	r3, #8
   d7d84:	42a3      	cmp	r3, r4
   d7d86:	4615      	mov	r5, r2
   d7d88:	d1f7      	bne.n	d7d7a <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7d8a:	a901      	add	r1, sp, #4
   d7d8c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7d8e:	ad07      	add	r5, sp, #28
   d7d90:	f7ff fa72 	bl	d7278 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d96:	1d3c      	adds	r4, r7, #4
   d7d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7d9a:	682b      	ldr	r3, [r5, #0]
   d7d9c:	7023      	strb	r3, [r4, #0]
   d7d9e:	e7de      	b.n	d7d5e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7da0:	9800      	ldr	r0, [sp, #0]
   d7da2:	f7fe fbbf 	bl	d6524 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7da6:	4638      	mov	r0, r7
   d7da8:	b015      	add	sp, #84	; 0x54
   d7daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7db0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7db0:	4b02      	ldr	r3, [pc, #8]	; (d7dbc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7db2:	4a03      	ldr	r2, [pc, #12]	; (d7dc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7db4:	601a      	str	r2, [r3, #0]
   d7db6:	2200      	movs	r2, #0
   d7db8:	605a      	str	r2, [r3, #4]

} // spark
   d7dba:	4770      	bx	lr
   d7dbc:	2003e7cc 	.word	0x2003e7cc
   d7dc0:	000d9f40 	.word	0x000d9f40

000d7dc4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7dc4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7dc6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7dc8:	d902      	bls.n	d7dd0 <pinAvailable+0xc>
    return false;
   d7dca:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7dcc:	b002      	add	sp, #8
   d7dce:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7dd0:	f1a0 030b 	sub.w	r3, r0, #11
   d7dd4:	2b02      	cmp	r3, #2
   d7dd6:	d81a      	bhi.n	d7e0e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7dd8:	4c17      	ldr	r4, [pc, #92]	; (d7e38 <pinAvailable+0x74>)
   d7dda:	7821      	ldrb	r1, [r4, #0]
   d7ddc:	f3bf 8f5b 	dmb	ish
   d7de0:	f011 0101 	ands.w	r1, r1, #1
   d7de4:	d10b      	bne.n	d7dfe <pinAvailable+0x3a>
   d7de6:	4620      	mov	r0, r4
   d7de8:	9101      	str	r1, [sp, #4]
   d7dea:	f7fc f965 	bl	d40b8 <__cxa_guard_acquire>
   d7dee:	9901      	ldr	r1, [sp, #4]
   d7df0:	b128      	cbz	r0, d7dfe <pinAvailable+0x3a>
   d7df2:	4812      	ldr	r0, [pc, #72]	; (d7e3c <pinAvailable+0x78>)
   d7df4:	f7fe fea6 	bl	d6b44 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7df8:	4620      	mov	r0, r4
   d7dfa:	f7fc f962 	bl	d40c2 <__cxa_guard_release>
   d7dfe:	4b0f      	ldr	r3, [pc, #60]	; (d7e3c <pinAvailable+0x78>)
   d7e00:	7818      	ldrb	r0, [r3, #0]
   d7e02:	f7fe fd1f 	bl	d6844 <hal_spi_is_enabled>
   d7e06:	2800      	cmp	r0, #0
   d7e08:	d1df      	bne.n	d7dca <pinAvailable+0x6>
  return true; // 'pin' is available
   d7e0a:	2001      	movs	r0, #1
   d7e0c:	e7de      	b.n	d7dcc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7e0e:	2801      	cmp	r0, #1
   d7e10:	d809      	bhi.n	d7e26 <pinAvailable+0x62>
   d7e12:	f000 f8a7 	bl	d7f64 <_Z19__fetch_global_Wirev>
   d7e16:	2100      	movs	r1, #0
   d7e18:	7c00      	ldrb	r0, [r0, #16]
   d7e1a:	f7fe fcb3 	bl	d6784 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7e1e:	f080 0001 	eor.w	r0, r0, #1
   d7e22:	b2c0      	uxtb	r0, r0
   d7e24:	e7d2      	b.n	d7dcc <pinAvailable+0x8>
   d7e26:	3809      	subs	r0, #9
   d7e28:	2801      	cmp	r0, #1
   d7e2a:	d8ee      	bhi.n	d7e0a <pinAvailable+0x46>
   d7e2c:	f7ff fb50 	bl	d74d0 <_Z22__fetch_global_Serial1v>
   d7e30:	7c00      	ldrb	r0, [r0, #16]
   d7e32:	f7fe fc4f 	bl	d66d4 <hal_usart_is_enabled>
   d7e36:	e7f2      	b.n	d7e1e <pinAvailable+0x5a>
   d7e38:	2003e644 	.word	0x2003e644
   d7e3c:	2003e648 	.word	0x2003e648

000d7e40 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7e40:	2823      	cmp	r0, #35	; 0x23
{
   d7e42:	b538      	push	{r3, r4, r5, lr}
   d7e44:	4604      	mov	r4, r0
   d7e46:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7e48:	d80a      	bhi.n	d7e60 <pinMode+0x20>
   d7e4a:	29ff      	cmp	r1, #255	; 0xff
   d7e4c:	d008      	beq.n	d7e60 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7e4e:	f7ff ffb9 	bl	d7dc4 <pinAvailable>
   d7e52:	b128      	cbz	r0, d7e60 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7e54:	4629      	mov	r1, r5
   d7e56:	4620      	mov	r0, r4
}
   d7e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7e5c:	f7fe bb7a 	b.w	d6554 <HAL_Pin_Mode>
}
   d7e60:	bd38      	pop	{r3, r4, r5, pc}

000d7e62 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7e62:	b538      	push	{r3, r4, r5, lr}
   d7e64:	4604      	mov	r4, r0
   d7e66:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7e68:	f7fe fb7c 	bl	d6564 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7e6c:	28ff      	cmp	r0, #255	; 0xff
   d7e6e:	d010      	beq.n	d7e92 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7e70:	2806      	cmp	r0, #6
   d7e72:	d804      	bhi.n	d7e7e <digitalWrite+0x1c>
   d7e74:	234d      	movs	r3, #77	; 0x4d
   d7e76:	fa23 f000 	lsr.w	r0, r3, r0
   d7e7a:	07c3      	lsls	r3, r0, #31
   d7e7c:	d409      	bmi.n	d7e92 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7e7e:	4620      	mov	r0, r4
   d7e80:	f7ff ffa0 	bl	d7dc4 <pinAvailable>
   d7e84:	b128      	cbz	r0, d7e92 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7e86:	4629      	mov	r1, r5
   d7e88:	4620      	mov	r0, r4
}
   d7e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7e8e:	f7fe bb71 	b.w	d6574 <HAL_GPIO_Write>
}
   d7e92:	bd38      	pop	{r3, r4, r5, pc}

000d7e94 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7e94:	b510      	push	{r4, lr}
   d7e96:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7e98:	f7fe fb64 	bl	d6564 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7e9c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7e9e:	b2db      	uxtb	r3, r3
   d7ea0:	2b01      	cmp	r3, #1
   d7ea2:	d908      	bls.n	d7eb6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7ea4:	4620      	mov	r0, r4
   d7ea6:	f7ff ff8d 	bl	d7dc4 <pinAvailable>
   d7eaa:	b120      	cbz	r0, d7eb6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7eac:	4620      	mov	r0, r4
}
   d7eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7eb2:	f7fe bb67 	b.w	d6584 <HAL_GPIO_Read>
}
   d7eb6:	2000      	movs	r0, #0
   d7eb8:	bd10      	pop	{r4, pc}

000d7eba <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7eba:	280d      	cmp	r0, #13
{
   d7ebc:	b510      	push	{r4, lr}
   d7ebe:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7ec0:	bf9c      	itt	ls
   d7ec2:	340e      	addls	r4, #14
   d7ec4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7ec6:	4620      	mov	r0, r4
   d7ec8:	f7ff ff7c 	bl	d7dc4 <pinAvailable>
   d7ecc:	b150      	cbz	r0, d7ee4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7ece:	2103      	movs	r1, #3
   d7ed0:	4620      	mov	r0, r4
   d7ed2:	f7fe fb37 	bl	d6544 <HAL_Validate_Pin_Function>
   d7ed6:	2803      	cmp	r0, #3
   d7ed8:	d104      	bne.n	d7ee4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7eda:	4620      	mov	r0, r4
}
   d7edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7ee0:	f7fe bb60 	b.w	d65a4 <hal_adc_read>
}
   d7ee4:	2000      	movs	r0, #0
   d7ee6:	bd10      	pop	{r4, pc}

000d7ee8 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d7ee8:	b538      	push	{r3, r4, r5, lr}
   d7eea:	4604      	mov	r4, r0
   d7eec:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d7eee:	f7ff ff69 	bl	d7dc4 <pinAvailable>
   d7ef2:	b1f0      	cbz	r0, d7f32 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d7ef4:	2104      	movs	r1, #4
   d7ef6:	4620      	mov	r0, r4
   d7ef8:	f7fe fb24 	bl	d6544 <HAL_Validate_Pin_Function>
   d7efc:	2804      	cmp	r0, #4
   d7efe:	d105      	bne.n	d7f0c <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d7f00:	b2a9      	uxth	r1, r5
   d7f02:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d7f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d7f08:	f7fe bb44 	b.w	d6594 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d7f0c:	2102      	movs	r1, #2
   d7f0e:	4620      	mov	r0, r4
   d7f10:	f7fe fb18 	bl	d6544 <HAL_Validate_Pin_Function>
   d7f14:	2802      	cmp	r0, #2
   d7f16:	d10c      	bne.n	d7f32 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d7f18:	4620      	mov	r0, r4
   d7f1a:	f7fe fb23 	bl	d6564 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d7f1e:	2801      	cmp	r0, #1
   d7f20:	d001      	beq.n	d7f26 <_Z11analogWritetm+0x3e>
   d7f22:	2804      	cmp	r0, #4
   d7f24:	d105      	bne.n	d7f32 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d7f26:	4629      	mov	r1, r5
   d7f28:	4620      	mov	r0, r4
}
   d7f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d7f2e:	f7fe bb41 	b.w	d65b4 <hal_pwm_write_ext>
}
   d7f32:	bd38      	pop	{r3, r4, r5, pc}

000d7f34 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7f34:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7f36:	2300      	movs	r3, #0
   d7f38:	2520      	movs	r5, #32
   d7f3a:	8043      	strh	r3, [r0, #2]
   d7f3c:	2314      	movs	r3, #20
{
   d7f3e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7f40:	8003      	strh	r3, [r0, #0]
   d7f42:	6085      	str	r5, [r0, #8]
   d7f44:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7f46:	4906      	ldr	r1, [pc, #24]	; (d7f60 <_Z17acquireWireBufferv+0x2c>)
   d7f48:	4628      	mov	r0, r5
   d7f4a:	f000 f83a 	bl	d7fc2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7f4e:	4904      	ldr	r1, [pc, #16]	; (d7f60 <_Z17acquireWireBufferv+0x2c>)
	};
   d7f50:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7f52:	4628      	mov	r0, r5
   d7f54:	f000 f835 	bl	d7fc2 <_ZnajRKSt9nothrow_t>
	};
   d7f58:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7f5a:	4620      	mov	r0, r4
   d7f5c:	bd38      	pop	{r3, r4, r5, pc}
   d7f5e:	bf00      	nop
   d7f60:	000d9f74 	.word	0x000d9f74

000d7f64 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7f64:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7f66:	4d0f      	ldr	r5, [pc, #60]	; (d7fa4 <_Z19__fetch_global_Wirev+0x40>)
   d7f68:	7829      	ldrb	r1, [r5, #0]
   d7f6a:	f3bf 8f5b 	dmb	ish
   d7f6e:	f011 0401 	ands.w	r4, r1, #1
{
   d7f72:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7f74:	d113      	bne.n	d7f9e <_Z19__fetch_global_Wirev+0x3a>
   d7f76:	4628      	mov	r0, r5
   d7f78:	f7fc f89e 	bl	d40b8 <__cxa_guard_acquire>
   d7f7c:	b178      	cbz	r0, d7f9e <_Z19__fetch_global_Wirev+0x3a>
   d7f7e:	a801      	add	r0, sp, #4
   d7f80:	f7ff ffd8 	bl	d7f34 <_Z17acquireWireBufferv>
   d7f84:	aa01      	add	r2, sp, #4
   d7f86:	4621      	mov	r1, r4
   d7f88:	4807      	ldr	r0, [pc, #28]	; (d7fa8 <_Z19__fetch_global_Wirev+0x44>)
   d7f8a:	f7ff faf7 	bl	d757c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7f8e:	4628      	mov	r0, r5
   d7f90:	f7fc f897 	bl	d40c2 <__cxa_guard_release>
   d7f94:	4a05      	ldr	r2, [pc, #20]	; (d7fac <_Z19__fetch_global_Wirev+0x48>)
   d7f96:	4906      	ldr	r1, [pc, #24]	; (d7fb0 <_Z19__fetch_global_Wirev+0x4c>)
   d7f98:	4803      	ldr	r0, [pc, #12]	; (d7fa8 <_Z19__fetch_global_Wirev+0x44>)
   d7f9a:	f000 f80b 	bl	d7fb4 <__aeabi_atexit>
	return wire;
}
   d7f9e:	4802      	ldr	r0, [pc, #8]	; (d7fa8 <_Z19__fetch_global_Wirev+0x44>)
   d7fa0:	b007      	add	sp, #28
   d7fa2:	bd30      	pop	{r4, r5, pc}
   d7fa4:	2003e7d8 	.word	0x2003e7d8
   d7fa8:	2003e7dc 	.word	0x2003e7dc
   d7fac:	2003e564 	.word	0x2003e564
   d7fb0:	000d7525 	.word	0x000d7525

000d7fb4 <__aeabi_atexit>:
   d7fb4:	460b      	mov	r3, r1
   d7fb6:	4601      	mov	r1, r0
   d7fb8:	4618      	mov	r0, r3
   d7fba:	f000 bdd3 	b.w	d8b64 <__cxa_atexit>

000d7fbe <_ZdlPvj>:
   d7fbe:	f7fc b86e 	b.w	d409e <_ZdlPv>

000d7fc2 <_ZnajRKSt9nothrow_t>:
   d7fc2:	f7fc b86a 	b.w	d409a <_Znaj>
	...

000d7fc8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d7fc8:	4901      	ldr	r1, [pc, #4]	; (d7fd0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d7fca:	f000 b8f9 	b.w	d81c0 <_ZNKSt9type_infoeqERKS_>
   d7fce:	bf00      	nop
   d7fd0:	000d9f90 	.word	0x000d9f90

000d7fd4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7fd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7fd6:	2400      	movs	r4, #0
   d7fd8:	2310      	movs	r3, #16
   d7fda:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d7fde:	6803      	ldr	r3, [r0, #0]
   d7fe0:	9400      	str	r4, [sp, #0]
   d7fe2:	699e      	ldr	r6, [r3, #24]
   d7fe4:	f88d 4004 	strb.w	r4, [sp, #4]
   d7fe8:	4615      	mov	r5, r2
   d7fea:	466b      	mov	r3, sp
   d7fec:	6812      	ldr	r2, [r2, #0]
   d7fee:	47b0      	blx	r6
   d7ff0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d7ff4:	f003 0306 	and.w	r3, r3, #6
   d7ff8:	2b06      	cmp	r3, #6
   d7ffa:	bf03      	ittte	eq
   d7ffc:	9b00      	ldreq	r3, [sp, #0]
   d7ffe:	602b      	streq	r3, [r5, #0]
   d8000:	2001      	moveq	r0, #1
   d8002:	4620      	movne	r0, r4
   d8004:	b004      	add	sp, #16
   d8006:	bd70      	pop	{r4, r5, r6, pc}

000d8008 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d8008:	9800      	ldr	r0, [sp, #0]
   d800a:	4290      	cmp	r0, r2
   d800c:	bf14      	ite	ne
   d800e:	2001      	movne	r0, #1
   d8010:	2006      	moveq	r0, #6
   d8012:	4770      	bx	lr

000d8014 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d8014:	b510      	push	{r4, lr}
   d8016:	4b03      	ldr	r3, [pc, #12]	; (d8024 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d8018:	6003      	str	r3, [r0, #0]
   d801a:	4604      	mov	r4, r0
   d801c:	f000 f8cd 	bl	d81ba <_ZNSt9type_infoD1Ev>
   d8020:	4620      	mov	r0, r4
   d8022:	bd10      	pop	{r4, pc}
   d8024:	000d9fd0 	.word	0x000d9fd0

000d8028 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8028:	b510      	push	{r4, lr}
   d802a:	4604      	mov	r4, r0
   d802c:	f7ff fff2 	bl	d8014 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8030:	4620      	mov	r0, r4
   d8032:	2108      	movs	r1, #8
   d8034:	f7ff ffc3 	bl	d7fbe <_ZdlPvj>
   d8038:	4620      	mov	r0, r4
   d803a:	bd10      	pop	{r4, pc}

000d803c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8040:	461f      	mov	r7, r3
   d8042:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d8046:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d804a:	4598      	cmp	r8, r3
   d804c:	4606      	mov	r6, r0
   d804e:	4615      	mov	r5, r2
   d8050:	d107      	bne.n	d8062 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8052:	9907      	ldr	r1, [sp, #28]
   d8054:	f000 f8b4 	bl	d81c0 <_ZNKSt9type_infoeqERKS_>
   d8058:	b118      	cbz	r0, d8062 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d805a:	7165      	strb	r5, [r4, #5]
   d805c:	2000      	movs	r0, #0
   d805e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8062:	4639      	mov	r1, r7
   d8064:	4630      	mov	r0, r6
   d8066:	f000 f8ab 	bl	d81c0 <_ZNKSt9type_infoeqERKS_>
   d806a:	2800      	cmp	r0, #0
   d806c:	d0f6      	beq.n	d805c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d806e:	2301      	movs	r3, #1
   d8070:	f8c4 8000 	str.w	r8, [r4]
   d8074:	7125      	strb	r5, [r4, #4]
   d8076:	71a3      	strb	r3, [r4, #6]
   d8078:	e7f0      	b.n	d805c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d807a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d807a:	b538      	push	{r3, r4, r5, lr}
   d807c:	4615      	mov	r5, r2
   d807e:	461c      	mov	r4, r3
   d8080:	f000 f89e 	bl	d81c0 <_ZNKSt9type_infoeqERKS_>
   d8084:	b120      	cbz	r0, d8090 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d8086:	2308      	movs	r3, #8
   d8088:	60e3      	str	r3, [r4, #12]
   d808a:	2306      	movs	r3, #6
   d808c:	6025      	str	r5, [r4, #0]
   d808e:	7123      	strb	r3, [r4, #4]
   d8090:	bd38      	pop	{r3, r4, r5, pc}

000d8092 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d8092:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8094:	4605      	mov	r5, r0
   d8096:	460c      	mov	r4, r1
   d8098:	9201      	str	r2, [sp, #4]
   d809a:	461e      	mov	r6, r3
   d809c:	f000 f890 	bl	d81c0 <_ZNKSt9type_infoeqERKS_>
   d80a0:	b950      	cbnz	r0, d80b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d80a2:	2e03      	cmp	r6, #3
   d80a4:	d808      	bhi.n	d80b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d80a6:	6823      	ldr	r3, [r4, #0]
   d80a8:	9a01      	ldr	r2, [sp, #4]
   d80aa:	695b      	ldr	r3, [r3, #20]
   d80ac:	4629      	mov	r1, r5
   d80ae:	4620      	mov	r0, r4
   d80b0:	b002      	add	sp, #8
   d80b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d80b6:	4718      	bx	r3
   d80b8:	b002      	add	sp, #8
   d80ba:	bd70      	pop	{r4, r5, r6, pc}

000d80bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d80bc:	b510      	push	{r4, lr}
   d80be:	4b03      	ldr	r3, [pc, #12]	; (d80cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d80c0:	6003      	str	r3, [r0, #0]
   d80c2:	4604      	mov	r4, r0
   d80c4:	f7ff ffa6 	bl	d8014 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d80c8:	4620      	mov	r0, r4
   d80ca:	bd10      	pop	{r4, pc}
   d80cc:	000da030 	.word	0x000da030

000d80d0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d80d0:	b510      	push	{r4, lr}
   d80d2:	4604      	mov	r4, r0
   d80d4:	f7ff fff2 	bl	d80bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d80d8:	4620      	mov	r0, r4
   d80da:	210c      	movs	r1, #12
   d80dc:	f7ff ff6f 	bl	d7fbe <_ZdlPvj>
   d80e0:	4620      	mov	r0, r4
   d80e2:	bd10      	pop	{r4, pc}

000d80e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d80e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d80e6:	9f08      	ldr	r7, [sp, #32]
   d80e8:	4297      	cmp	r7, r2
   d80ea:	4605      	mov	r5, r0
   d80ec:	460e      	mov	r6, r1
   d80ee:	4614      	mov	r4, r2
   d80f0:	d00a      	beq.n	d8108 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d80f2:	68a8      	ldr	r0, [r5, #8]
   d80f4:	6802      	ldr	r2, [r0, #0]
   d80f6:	9708      	str	r7, [sp, #32]
   d80f8:	6a15      	ldr	r5, [r2, #32]
   d80fa:	4631      	mov	r1, r6
   d80fc:	4622      	mov	r2, r4
   d80fe:	46ac      	mov	ip, r5
   d8100:	b003      	add	sp, #12
   d8102:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8106:	4760      	bx	ip
   d8108:	4619      	mov	r1, r3
   d810a:	9301      	str	r3, [sp, #4]
   d810c:	f000 f858 	bl	d81c0 <_ZNKSt9type_infoeqERKS_>
   d8110:	9b01      	ldr	r3, [sp, #4]
   d8112:	2800      	cmp	r0, #0
   d8114:	d0ed      	beq.n	d80f2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d8116:	2006      	movs	r0, #6
   d8118:	b003      	add	sp, #12
   d811a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d811c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d811c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8120:	460d      	mov	r5, r1
   d8122:	4619      	mov	r1, r3
   d8124:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8128:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d812c:	4681      	mov	r9, r0
   d812e:	4617      	mov	r7, r2
   d8130:	4698      	mov	r8, r3
   d8132:	f000 f845 	bl	d81c0 <_ZNKSt9type_infoeqERKS_>
   d8136:	b190      	cbz	r0, d815e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d8138:	2d00      	cmp	r5, #0
   d813a:	6034      	str	r4, [r6, #0]
   d813c:	7137      	strb	r7, [r6, #4]
   d813e:	db09      	blt.n	d8154 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d8140:	1961      	adds	r1, r4, r5
   d8142:	458a      	cmp	sl, r1
   d8144:	bf0c      	ite	eq
   d8146:	2106      	moveq	r1, #6
   d8148:	2101      	movne	r1, #1
   d814a:	71b1      	strb	r1, [r6, #6]
   d814c:	2000      	movs	r0, #0
   d814e:	b001      	add	sp, #4
   d8150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8154:	3502      	adds	r5, #2
   d8156:	d1f9      	bne.n	d814c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8158:	2301      	movs	r3, #1
   d815a:	71b3      	strb	r3, [r6, #6]
   d815c:	e7f6      	b.n	d814c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d815e:	4554      	cmp	r4, sl
   d8160:	d106      	bne.n	d8170 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8162:	4659      	mov	r1, fp
   d8164:	4648      	mov	r0, r9
   d8166:	f000 f82b 	bl	d81c0 <_ZNKSt9type_infoeqERKS_>
   d816a:	b108      	cbz	r0, d8170 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d816c:	7177      	strb	r7, [r6, #5]
   d816e:	e7ed      	b.n	d814c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8170:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d8174:	6803      	ldr	r3, [r0, #0]
   d8176:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d817a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d817e:	69dc      	ldr	r4, [r3, #28]
   d8180:	463a      	mov	r2, r7
   d8182:	4643      	mov	r3, r8
   d8184:	4629      	mov	r1, r5
   d8186:	46a4      	mov	ip, r4
   d8188:	b001      	add	sp, #4
   d818a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d818e:	4760      	bx	ip

000d8190 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d8190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8194:	4607      	mov	r7, r0
   d8196:	460c      	mov	r4, r1
   d8198:	4615      	mov	r5, r2
   d819a:	461e      	mov	r6, r3
   d819c:	f7ff ff6d 	bl	d807a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d81a0:	b948      	cbnz	r0, d81b6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d81a2:	68b8      	ldr	r0, [r7, #8]
   d81a4:	6803      	ldr	r3, [r0, #0]
   d81a6:	699f      	ldr	r7, [r3, #24]
   d81a8:	462a      	mov	r2, r5
   d81aa:	4633      	mov	r3, r6
   d81ac:	4621      	mov	r1, r4
   d81ae:	46bc      	mov	ip, r7
   d81b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d81b4:	4760      	bx	ip
   d81b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d81ba <_ZNSt9type_infoD1Ev>:
   d81ba:	4770      	bx	lr

000d81bc <_ZNKSt9type_info14__is_pointer_pEv>:
   d81bc:	2000      	movs	r0, #0
   d81be:	4770      	bx	lr

000d81c0 <_ZNKSt9type_infoeqERKS_>:
   d81c0:	4281      	cmp	r1, r0
   d81c2:	b508      	push	{r3, lr}
   d81c4:	d00e      	beq.n	d81e4 <_ZNKSt9type_infoeqERKS_+0x24>
   d81c6:	6840      	ldr	r0, [r0, #4]
   d81c8:	7803      	ldrb	r3, [r0, #0]
   d81ca:	2b2a      	cmp	r3, #42	; 0x2a
   d81cc:	d00c      	beq.n	d81e8 <_ZNKSt9type_infoeqERKS_+0x28>
   d81ce:	6849      	ldr	r1, [r1, #4]
   d81d0:	780b      	ldrb	r3, [r1, #0]
   d81d2:	2b2a      	cmp	r3, #42	; 0x2a
   d81d4:	bf08      	it	eq
   d81d6:	3101      	addeq	r1, #1
   d81d8:	f000 fd0c 	bl	d8bf4 <strcmp>
   d81dc:	fab0 f080 	clz	r0, r0
   d81e0:	0940      	lsrs	r0, r0, #5
   d81e2:	bd08      	pop	{r3, pc}
   d81e4:	2001      	movs	r0, #1
   d81e6:	e7fc      	b.n	d81e2 <_ZNKSt9type_infoeqERKS_+0x22>
   d81e8:	2000      	movs	r0, #0
   d81ea:	e7fa      	b.n	d81e2 <_ZNKSt9type_infoeqERKS_+0x22>

000d81ec <__aeabi_drsub>:
   d81ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d81f0:	e002      	b.n	d81f8 <__adddf3>
   d81f2:	bf00      	nop

000d81f4 <__aeabi_dsub>:
   d81f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d81f8 <__adddf3>:
   d81f8:	b530      	push	{r4, r5, lr}
   d81fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d81fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8202:	ea94 0f05 	teq	r4, r5
   d8206:	bf08      	it	eq
   d8208:	ea90 0f02 	teqeq	r0, r2
   d820c:	bf1f      	itttt	ne
   d820e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8212:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d821a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d821e:	f000 80e2 	beq.w	d83e6 <__adddf3+0x1ee>
   d8222:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d822a:	bfb8      	it	lt
   d822c:	426d      	neglt	r5, r5
   d822e:	dd0c      	ble.n	d824a <__adddf3+0x52>
   d8230:	442c      	add	r4, r5
   d8232:	ea80 0202 	eor.w	r2, r0, r2
   d8236:	ea81 0303 	eor.w	r3, r1, r3
   d823a:	ea82 0000 	eor.w	r0, r2, r0
   d823e:	ea83 0101 	eor.w	r1, r3, r1
   d8242:	ea80 0202 	eor.w	r2, r0, r2
   d8246:	ea81 0303 	eor.w	r3, r1, r3
   d824a:	2d36      	cmp	r5, #54	; 0x36
   d824c:	bf88      	it	hi
   d824e:	bd30      	pophi	{r4, r5, pc}
   d8250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8254:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d825c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8260:	d002      	beq.n	d8268 <__adddf3+0x70>
   d8262:	4240      	negs	r0, r0
   d8264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d826c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8274:	d002      	beq.n	d827c <__adddf3+0x84>
   d8276:	4252      	negs	r2, r2
   d8278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d827c:	ea94 0f05 	teq	r4, r5
   d8280:	f000 80a7 	beq.w	d83d2 <__adddf3+0x1da>
   d8284:	f1a4 0401 	sub.w	r4, r4, #1
   d8288:	f1d5 0e20 	rsbs	lr, r5, #32
   d828c:	db0d      	blt.n	d82aa <__adddf3+0xb2>
   d828e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8292:	fa22 f205 	lsr.w	r2, r2, r5
   d8296:	1880      	adds	r0, r0, r2
   d8298:	f141 0100 	adc.w	r1, r1, #0
   d829c:	fa03 f20e 	lsl.w	r2, r3, lr
   d82a0:	1880      	adds	r0, r0, r2
   d82a2:	fa43 f305 	asr.w	r3, r3, r5
   d82a6:	4159      	adcs	r1, r3
   d82a8:	e00e      	b.n	d82c8 <__adddf3+0xd0>
   d82aa:	f1a5 0520 	sub.w	r5, r5, #32
   d82ae:	f10e 0e20 	add.w	lr, lr, #32
   d82b2:	2a01      	cmp	r2, #1
   d82b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d82b8:	bf28      	it	cs
   d82ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   d82be:	fa43 f305 	asr.w	r3, r3, r5
   d82c2:	18c0      	adds	r0, r0, r3
   d82c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d82c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d82cc:	d507      	bpl.n	d82de <__adddf3+0xe6>
   d82ce:	f04f 0e00 	mov.w	lr, #0
   d82d2:	f1dc 0c00 	rsbs	ip, ip, #0
   d82d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d82da:	eb6e 0101 	sbc.w	r1, lr, r1
   d82de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d82e2:	d31b      	bcc.n	d831c <__adddf3+0x124>
   d82e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d82e8:	d30c      	bcc.n	d8304 <__adddf3+0x10c>
   d82ea:	0849      	lsrs	r1, r1, #1
   d82ec:	ea5f 0030 	movs.w	r0, r0, rrx
   d82f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d82f4:	f104 0401 	add.w	r4, r4, #1
   d82f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d82fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8300:	f080 809a 	bcs.w	d8438 <__adddf3+0x240>
   d8304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8308:	bf08      	it	eq
   d830a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d830e:	f150 0000 	adcs.w	r0, r0, #0
   d8312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8316:	ea41 0105 	orr.w	r1, r1, r5
   d831a:	bd30      	pop	{r4, r5, pc}
   d831c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8320:	4140      	adcs	r0, r0
   d8322:	eb41 0101 	adc.w	r1, r1, r1
   d8326:	3c01      	subs	r4, #1
   d8328:	bf28      	it	cs
   d832a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d832e:	d2e9      	bcs.n	d8304 <__adddf3+0x10c>
   d8330:	f091 0f00 	teq	r1, #0
   d8334:	bf04      	itt	eq
   d8336:	4601      	moveq	r1, r0
   d8338:	2000      	moveq	r0, #0
   d833a:	fab1 f381 	clz	r3, r1
   d833e:	bf08      	it	eq
   d8340:	3320      	addeq	r3, #32
   d8342:	f1a3 030b 	sub.w	r3, r3, #11
   d8346:	f1b3 0220 	subs.w	r2, r3, #32
   d834a:	da0c      	bge.n	d8366 <__adddf3+0x16e>
   d834c:	320c      	adds	r2, #12
   d834e:	dd08      	ble.n	d8362 <__adddf3+0x16a>
   d8350:	f102 0c14 	add.w	ip, r2, #20
   d8354:	f1c2 020c 	rsb	r2, r2, #12
   d8358:	fa01 f00c 	lsl.w	r0, r1, ip
   d835c:	fa21 f102 	lsr.w	r1, r1, r2
   d8360:	e00c      	b.n	d837c <__adddf3+0x184>
   d8362:	f102 0214 	add.w	r2, r2, #20
   d8366:	bfd8      	it	le
   d8368:	f1c2 0c20 	rsble	ip, r2, #32
   d836c:	fa01 f102 	lsl.w	r1, r1, r2
   d8370:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8374:	bfdc      	itt	le
   d8376:	ea41 010c 	orrle.w	r1, r1, ip
   d837a:	4090      	lslle	r0, r2
   d837c:	1ae4      	subs	r4, r4, r3
   d837e:	bfa2      	ittt	ge
   d8380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8384:	4329      	orrge	r1, r5
   d8386:	bd30      	popge	{r4, r5, pc}
   d8388:	ea6f 0404 	mvn.w	r4, r4
   d838c:	3c1f      	subs	r4, #31
   d838e:	da1c      	bge.n	d83ca <__adddf3+0x1d2>
   d8390:	340c      	adds	r4, #12
   d8392:	dc0e      	bgt.n	d83b2 <__adddf3+0x1ba>
   d8394:	f104 0414 	add.w	r4, r4, #20
   d8398:	f1c4 0220 	rsb	r2, r4, #32
   d839c:	fa20 f004 	lsr.w	r0, r0, r4
   d83a0:	fa01 f302 	lsl.w	r3, r1, r2
   d83a4:	ea40 0003 	orr.w	r0, r0, r3
   d83a8:	fa21 f304 	lsr.w	r3, r1, r4
   d83ac:	ea45 0103 	orr.w	r1, r5, r3
   d83b0:	bd30      	pop	{r4, r5, pc}
   d83b2:	f1c4 040c 	rsb	r4, r4, #12
   d83b6:	f1c4 0220 	rsb	r2, r4, #32
   d83ba:	fa20 f002 	lsr.w	r0, r0, r2
   d83be:	fa01 f304 	lsl.w	r3, r1, r4
   d83c2:	ea40 0003 	orr.w	r0, r0, r3
   d83c6:	4629      	mov	r1, r5
   d83c8:	bd30      	pop	{r4, r5, pc}
   d83ca:	fa21 f004 	lsr.w	r0, r1, r4
   d83ce:	4629      	mov	r1, r5
   d83d0:	bd30      	pop	{r4, r5, pc}
   d83d2:	f094 0f00 	teq	r4, #0
   d83d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d83da:	bf06      	itte	eq
   d83dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d83e0:	3401      	addeq	r4, #1
   d83e2:	3d01      	subne	r5, #1
   d83e4:	e74e      	b.n	d8284 <__adddf3+0x8c>
   d83e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d83ea:	bf18      	it	ne
   d83ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d83f0:	d029      	beq.n	d8446 <__adddf3+0x24e>
   d83f2:	ea94 0f05 	teq	r4, r5
   d83f6:	bf08      	it	eq
   d83f8:	ea90 0f02 	teqeq	r0, r2
   d83fc:	d005      	beq.n	d840a <__adddf3+0x212>
   d83fe:	ea54 0c00 	orrs.w	ip, r4, r0
   d8402:	bf04      	itt	eq
   d8404:	4619      	moveq	r1, r3
   d8406:	4610      	moveq	r0, r2
   d8408:	bd30      	pop	{r4, r5, pc}
   d840a:	ea91 0f03 	teq	r1, r3
   d840e:	bf1e      	ittt	ne
   d8410:	2100      	movne	r1, #0
   d8412:	2000      	movne	r0, #0
   d8414:	bd30      	popne	{r4, r5, pc}
   d8416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d841a:	d105      	bne.n	d8428 <__adddf3+0x230>
   d841c:	0040      	lsls	r0, r0, #1
   d841e:	4149      	adcs	r1, r1
   d8420:	bf28      	it	cs
   d8422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8426:	bd30      	pop	{r4, r5, pc}
   d8428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d842c:	bf3c      	itt	cc
   d842e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8432:	bd30      	popcc	{r4, r5, pc}
   d8434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d843c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8440:	f04f 0000 	mov.w	r0, #0
   d8444:	bd30      	pop	{r4, r5, pc}
   d8446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d844a:	bf1a      	itte	ne
   d844c:	4619      	movne	r1, r3
   d844e:	4610      	movne	r0, r2
   d8450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8454:	bf1c      	itt	ne
   d8456:	460b      	movne	r3, r1
   d8458:	4602      	movne	r2, r0
   d845a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d845e:	bf06      	itte	eq
   d8460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8464:	ea91 0f03 	teqeq	r1, r3
   d8468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d846c:	bd30      	pop	{r4, r5, pc}
   d846e:	bf00      	nop

000d8470 <__aeabi_ui2d>:
   d8470:	f090 0f00 	teq	r0, #0
   d8474:	bf04      	itt	eq
   d8476:	2100      	moveq	r1, #0
   d8478:	4770      	bxeq	lr
   d847a:	b530      	push	{r4, r5, lr}
   d847c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8480:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8484:	f04f 0500 	mov.w	r5, #0
   d8488:	f04f 0100 	mov.w	r1, #0
   d848c:	e750      	b.n	d8330 <__adddf3+0x138>
   d848e:	bf00      	nop

000d8490 <__aeabi_i2d>:
   d8490:	f090 0f00 	teq	r0, #0
   d8494:	bf04      	itt	eq
   d8496:	2100      	moveq	r1, #0
   d8498:	4770      	bxeq	lr
   d849a:	b530      	push	{r4, r5, lr}
   d849c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d84a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d84a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d84a8:	bf48      	it	mi
   d84aa:	4240      	negmi	r0, r0
   d84ac:	f04f 0100 	mov.w	r1, #0
   d84b0:	e73e      	b.n	d8330 <__adddf3+0x138>
   d84b2:	bf00      	nop

000d84b4 <__aeabi_f2d>:
   d84b4:	0042      	lsls	r2, r0, #1
   d84b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d84ba:	ea4f 0131 	mov.w	r1, r1, rrx
   d84be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d84c2:	bf1f      	itttt	ne
   d84c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d84c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d84cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d84d0:	4770      	bxne	lr
   d84d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d84d6:	bf08      	it	eq
   d84d8:	4770      	bxeq	lr
   d84da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d84de:	bf04      	itt	eq
   d84e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d84e4:	4770      	bxeq	lr
   d84e6:	b530      	push	{r4, r5, lr}
   d84e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d84ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d84f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d84f4:	e71c      	b.n	d8330 <__adddf3+0x138>
   d84f6:	bf00      	nop

000d84f8 <__aeabi_ul2d>:
   d84f8:	ea50 0201 	orrs.w	r2, r0, r1
   d84fc:	bf08      	it	eq
   d84fe:	4770      	bxeq	lr
   d8500:	b530      	push	{r4, r5, lr}
   d8502:	f04f 0500 	mov.w	r5, #0
   d8506:	e00a      	b.n	d851e <__aeabi_l2d+0x16>

000d8508 <__aeabi_l2d>:
   d8508:	ea50 0201 	orrs.w	r2, r0, r1
   d850c:	bf08      	it	eq
   d850e:	4770      	bxeq	lr
   d8510:	b530      	push	{r4, r5, lr}
   d8512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8516:	d502      	bpl.n	d851e <__aeabi_l2d+0x16>
   d8518:	4240      	negs	r0, r0
   d851a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d851e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8522:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d852a:	f43f aed8 	beq.w	d82de <__adddf3+0xe6>
   d852e:	f04f 0203 	mov.w	r2, #3
   d8532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8536:	bf18      	it	ne
   d8538:	3203      	addne	r2, #3
   d853a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d853e:	bf18      	it	ne
   d8540:	3203      	addne	r2, #3
   d8542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8546:	f1c2 0320 	rsb	r3, r2, #32
   d854a:	fa00 fc03 	lsl.w	ip, r0, r3
   d854e:	fa20 f002 	lsr.w	r0, r0, r2
   d8552:	fa01 fe03 	lsl.w	lr, r1, r3
   d8556:	ea40 000e 	orr.w	r0, r0, lr
   d855a:	fa21 f102 	lsr.w	r1, r1, r2
   d855e:	4414      	add	r4, r2
   d8560:	e6bd      	b.n	d82de <__adddf3+0xe6>
   d8562:	bf00      	nop

000d8564 <__aeabi_dmul>:
   d8564:	b570      	push	{r4, r5, r6, lr}
   d8566:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d856a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d856e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8572:	bf1d      	ittte	ne
   d8574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8578:	ea94 0f0c 	teqne	r4, ip
   d857c:	ea95 0f0c 	teqne	r5, ip
   d8580:	f000 f8de 	bleq	d8740 <__aeabi_dmul+0x1dc>
   d8584:	442c      	add	r4, r5
   d8586:	ea81 0603 	eor.w	r6, r1, r3
   d858a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d858e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8596:	bf18      	it	ne
   d8598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d859c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d85a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d85a4:	d038      	beq.n	d8618 <__aeabi_dmul+0xb4>
   d85a6:	fba0 ce02 	umull	ip, lr, r0, r2
   d85aa:	f04f 0500 	mov.w	r5, #0
   d85ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   d85b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d85b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d85ba:	f04f 0600 	mov.w	r6, #0
   d85be:	fbe1 5603 	umlal	r5, r6, r1, r3
   d85c2:	f09c 0f00 	teq	ip, #0
   d85c6:	bf18      	it	ne
   d85c8:	f04e 0e01 	orrne.w	lr, lr, #1
   d85cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d85d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d85d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d85d8:	d204      	bcs.n	d85e4 <__aeabi_dmul+0x80>
   d85da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d85de:	416d      	adcs	r5, r5
   d85e0:	eb46 0606 	adc.w	r6, r6, r6
   d85e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d85e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d85ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d85f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d85f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d85f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d85fc:	bf88      	it	hi
   d85fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8602:	d81e      	bhi.n	d8642 <__aeabi_dmul+0xde>
   d8604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8608:	bf08      	it	eq
   d860a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d860e:	f150 0000 	adcs.w	r0, r0, #0
   d8612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8616:	bd70      	pop	{r4, r5, r6, pc}
   d8618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d861c:	ea46 0101 	orr.w	r1, r6, r1
   d8620:	ea40 0002 	orr.w	r0, r0, r2
   d8624:	ea81 0103 	eor.w	r1, r1, r3
   d8628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d862c:	bfc2      	ittt	gt
   d862e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8636:	bd70      	popgt	{r4, r5, r6, pc}
   d8638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d863c:	f04f 0e00 	mov.w	lr, #0
   d8640:	3c01      	subs	r4, #1
   d8642:	f300 80ab 	bgt.w	d879c <__aeabi_dmul+0x238>
   d8646:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d864a:	bfde      	ittt	le
   d864c:	2000      	movle	r0, #0
   d864e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8652:	bd70      	pople	{r4, r5, r6, pc}
   d8654:	f1c4 0400 	rsb	r4, r4, #0
   d8658:	3c20      	subs	r4, #32
   d865a:	da35      	bge.n	d86c8 <__aeabi_dmul+0x164>
   d865c:	340c      	adds	r4, #12
   d865e:	dc1b      	bgt.n	d8698 <__aeabi_dmul+0x134>
   d8660:	f104 0414 	add.w	r4, r4, #20
   d8664:	f1c4 0520 	rsb	r5, r4, #32
   d8668:	fa00 f305 	lsl.w	r3, r0, r5
   d866c:	fa20 f004 	lsr.w	r0, r0, r4
   d8670:	fa01 f205 	lsl.w	r2, r1, r5
   d8674:	ea40 0002 	orr.w	r0, r0, r2
   d8678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d867c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8684:	fa21 f604 	lsr.w	r6, r1, r4
   d8688:	eb42 0106 	adc.w	r1, r2, r6
   d868c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8690:	bf08      	it	eq
   d8692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8696:	bd70      	pop	{r4, r5, r6, pc}
   d8698:	f1c4 040c 	rsb	r4, r4, #12
   d869c:	f1c4 0520 	rsb	r5, r4, #32
   d86a0:	fa00 f304 	lsl.w	r3, r0, r4
   d86a4:	fa20 f005 	lsr.w	r0, r0, r5
   d86a8:	fa01 f204 	lsl.w	r2, r1, r4
   d86ac:	ea40 0002 	orr.w	r0, r0, r2
   d86b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d86b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d86b8:	f141 0100 	adc.w	r1, r1, #0
   d86bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d86c0:	bf08      	it	eq
   d86c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d86c6:	bd70      	pop	{r4, r5, r6, pc}
   d86c8:	f1c4 0520 	rsb	r5, r4, #32
   d86cc:	fa00 f205 	lsl.w	r2, r0, r5
   d86d0:	ea4e 0e02 	orr.w	lr, lr, r2
   d86d4:	fa20 f304 	lsr.w	r3, r0, r4
   d86d8:	fa01 f205 	lsl.w	r2, r1, r5
   d86dc:	ea43 0302 	orr.w	r3, r3, r2
   d86e0:	fa21 f004 	lsr.w	r0, r1, r4
   d86e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d86e8:	fa21 f204 	lsr.w	r2, r1, r4
   d86ec:	ea20 0002 	bic.w	r0, r0, r2
   d86f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d86f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d86f8:	bf08      	it	eq
   d86fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d86fe:	bd70      	pop	{r4, r5, r6, pc}
   d8700:	f094 0f00 	teq	r4, #0
   d8704:	d10f      	bne.n	d8726 <__aeabi_dmul+0x1c2>
   d8706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d870a:	0040      	lsls	r0, r0, #1
   d870c:	eb41 0101 	adc.w	r1, r1, r1
   d8710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8714:	bf08      	it	eq
   d8716:	3c01      	subeq	r4, #1
   d8718:	d0f7      	beq.n	d870a <__aeabi_dmul+0x1a6>
   d871a:	ea41 0106 	orr.w	r1, r1, r6
   d871e:	f095 0f00 	teq	r5, #0
   d8722:	bf18      	it	ne
   d8724:	4770      	bxne	lr
   d8726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d872a:	0052      	lsls	r2, r2, #1
   d872c:	eb43 0303 	adc.w	r3, r3, r3
   d8730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8734:	bf08      	it	eq
   d8736:	3d01      	subeq	r5, #1
   d8738:	d0f7      	beq.n	d872a <__aeabi_dmul+0x1c6>
   d873a:	ea43 0306 	orr.w	r3, r3, r6
   d873e:	4770      	bx	lr
   d8740:	ea94 0f0c 	teq	r4, ip
   d8744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8748:	bf18      	it	ne
   d874a:	ea95 0f0c 	teqne	r5, ip
   d874e:	d00c      	beq.n	d876a <__aeabi_dmul+0x206>
   d8750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8754:	bf18      	it	ne
   d8756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d875a:	d1d1      	bne.n	d8700 <__aeabi_dmul+0x19c>
   d875c:	ea81 0103 	eor.w	r1, r1, r3
   d8760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8764:	f04f 0000 	mov.w	r0, #0
   d8768:	bd70      	pop	{r4, r5, r6, pc}
   d876a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d876e:	bf06      	itte	eq
   d8770:	4610      	moveq	r0, r2
   d8772:	4619      	moveq	r1, r3
   d8774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8778:	d019      	beq.n	d87ae <__aeabi_dmul+0x24a>
   d877a:	ea94 0f0c 	teq	r4, ip
   d877e:	d102      	bne.n	d8786 <__aeabi_dmul+0x222>
   d8780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8784:	d113      	bne.n	d87ae <__aeabi_dmul+0x24a>
   d8786:	ea95 0f0c 	teq	r5, ip
   d878a:	d105      	bne.n	d8798 <__aeabi_dmul+0x234>
   d878c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8790:	bf1c      	itt	ne
   d8792:	4610      	movne	r0, r2
   d8794:	4619      	movne	r1, r3
   d8796:	d10a      	bne.n	d87ae <__aeabi_dmul+0x24a>
   d8798:	ea81 0103 	eor.w	r1, r1, r3
   d879c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d87a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d87a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d87a8:	f04f 0000 	mov.w	r0, #0
   d87ac:	bd70      	pop	{r4, r5, r6, pc}
   d87ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d87b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d87b6:	bd70      	pop	{r4, r5, r6, pc}

000d87b8 <__aeabi_ddiv>:
   d87b8:	b570      	push	{r4, r5, r6, lr}
   d87ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d87be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d87c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d87c6:	bf1d      	ittte	ne
   d87c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d87cc:	ea94 0f0c 	teqne	r4, ip
   d87d0:	ea95 0f0c 	teqne	r5, ip
   d87d4:	f000 f8a7 	bleq	d8926 <__aeabi_ddiv+0x16e>
   d87d8:	eba4 0405 	sub.w	r4, r4, r5
   d87dc:	ea81 0e03 	eor.w	lr, r1, r3
   d87e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d87e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d87e8:	f000 8088 	beq.w	d88fc <__aeabi_ddiv+0x144>
   d87ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d87f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d87f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d87f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d87fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8808:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d880c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8810:	429d      	cmp	r5, r3
   d8812:	bf08      	it	eq
   d8814:	4296      	cmpeq	r6, r2
   d8816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d881a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d881e:	d202      	bcs.n	d8826 <__aeabi_ddiv+0x6e>
   d8820:	085b      	lsrs	r3, r3, #1
   d8822:	ea4f 0232 	mov.w	r2, r2, rrx
   d8826:	1ab6      	subs	r6, r6, r2
   d8828:	eb65 0503 	sbc.w	r5, r5, r3
   d882c:	085b      	lsrs	r3, r3, #1
   d882e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d883a:	ebb6 0e02 	subs.w	lr, r6, r2
   d883e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8842:	bf22      	ittt	cs
   d8844:	1ab6      	subcs	r6, r6, r2
   d8846:	4675      	movcs	r5, lr
   d8848:	ea40 000c 	orrcs.w	r0, r0, ip
   d884c:	085b      	lsrs	r3, r3, #1
   d884e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8852:	ebb6 0e02 	subs.w	lr, r6, r2
   d8856:	eb75 0e03 	sbcs.w	lr, r5, r3
   d885a:	bf22      	ittt	cs
   d885c:	1ab6      	subcs	r6, r6, r2
   d885e:	4675      	movcs	r5, lr
   d8860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8864:	085b      	lsrs	r3, r3, #1
   d8866:	ea4f 0232 	mov.w	r2, r2, rrx
   d886a:	ebb6 0e02 	subs.w	lr, r6, r2
   d886e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8872:	bf22      	ittt	cs
   d8874:	1ab6      	subcs	r6, r6, r2
   d8876:	4675      	movcs	r5, lr
   d8878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d887c:	085b      	lsrs	r3, r3, #1
   d887e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8882:	ebb6 0e02 	subs.w	lr, r6, r2
   d8886:	eb75 0e03 	sbcs.w	lr, r5, r3
   d888a:	bf22      	ittt	cs
   d888c:	1ab6      	subcs	r6, r6, r2
   d888e:	4675      	movcs	r5, lr
   d8890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8894:	ea55 0e06 	orrs.w	lr, r5, r6
   d8898:	d018      	beq.n	d88cc <__aeabi_ddiv+0x114>
   d889a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d889e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d88a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d88a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d88aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d88ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d88b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d88b6:	d1c0      	bne.n	d883a <__aeabi_ddiv+0x82>
   d88b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d88bc:	d10b      	bne.n	d88d6 <__aeabi_ddiv+0x11e>
   d88be:	ea41 0100 	orr.w	r1, r1, r0
   d88c2:	f04f 0000 	mov.w	r0, #0
   d88c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d88ca:	e7b6      	b.n	d883a <__aeabi_ddiv+0x82>
   d88cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d88d0:	bf04      	itt	eq
   d88d2:	4301      	orreq	r1, r0
   d88d4:	2000      	moveq	r0, #0
   d88d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d88da:	bf88      	it	hi
   d88dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d88e0:	f63f aeaf 	bhi.w	d8642 <__aeabi_dmul+0xde>
   d88e4:	ebb5 0c03 	subs.w	ip, r5, r3
   d88e8:	bf04      	itt	eq
   d88ea:	ebb6 0c02 	subseq.w	ip, r6, r2
   d88ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d88f2:	f150 0000 	adcs.w	r0, r0, #0
   d88f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d88fa:	bd70      	pop	{r4, r5, r6, pc}
   d88fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8908:	bfc2      	ittt	gt
   d890a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d890e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8912:	bd70      	popgt	{r4, r5, r6, pc}
   d8914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8918:	f04f 0e00 	mov.w	lr, #0
   d891c:	3c01      	subs	r4, #1
   d891e:	e690      	b.n	d8642 <__aeabi_dmul+0xde>
   d8920:	ea45 0e06 	orr.w	lr, r5, r6
   d8924:	e68d      	b.n	d8642 <__aeabi_dmul+0xde>
   d8926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d892a:	ea94 0f0c 	teq	r4, ip
   d892e:	bf08      	it	eq
   d8930:	ea95 0f0c 	teqeq	r5, ip
   d8934:	f43f af3b 	beq.w	d87ae <__aeabi_dmul+0x24a>
   d8938:	ea94 0f0c 	teq	r4, ip
   d893c:	d10a      	bne.n	d8954 <__aeabi_ddiv+0x19c>
   d893e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8942:	f47f af34 	bne.w	d87ae <__aeabi_dmul+0x24a>
   d8946:	ea95 0f0c 	teq	r5, ip
   d894a:	f47f af25 	bne.w	d8798 <__aeabi_dmul+0x234>
   d894e:	4610      	mov	r0, r2
   d8950:	4619      	mov	r1, r3
   d8952:	e72c      	b.n	d87ae <__aeabi_dmul+0x24a>
   d8954:	ea95 0f0c 	teq	r5, ip
   d8958:	d106      	bne.n	d8968 <__aeabi_ddiv+0x1b0>
   d895a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d895e:	f43f aefd 	beq.w	d875c <__aeabi_dmul+0x1f8>
   d8962:	4610      	mov	r0, r2
   d8964:	4619      	mov	r1, r3
   d8966:	e722      	b.n	d87ae <__aeabi_dmul+0x24a>
   d8968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d896c:	bf18      	it	ne
   d896e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8972:	f47f aec5 	bne.w	d8700 <__aeabi_dmul+0x19c>
   d8976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d897a:	f47f af0d 	bne.w	d8798 <__aeabi_dmul+0x234>
   d897e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8982:	f47f aeeb 	bne.w	d875c <__aeabi_dmul+0x1f8>
   d8986:	e712      	b.n	d87ae <__aeabi_dmul+0x24a>

000d8988 <__gedf2>:
   d8988:	f04f 3cff 	mov.w	ip, #4294967295
   d898c:	e006      	b.n	d899c <__cmpdf2+0x4>
   d898e:	bf00      	nop

000d8990 <__ledf2>:
   d8990:	f04f 0c01 	mov.w	ip, #1
   d8994:	e002      	b.n	d899c <__cmpdf2+0x4>
   d8996:	bf00      	nop

000d8998 <__cmpdf2>:
   d8998:	f04f 0c01 	mov.w	ip, #1
   d899c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d89a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d89a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d89a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d89ac:	bf18      	it	ne
   d89ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d89b2:	d01b      	beq.n	d89ec <__cmpdf2+0x54>
   d89b4:	b001      	add	sp, #4
   d89b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d89ba:	bf0c      	ite	eq
   d89bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d89c0:	ea91 0f03 	teqne	r1, r3
   d89c4:	bf02      	ittt	eq
   d89c6:	ea90 0f02 	teqeq	r0, r2
   d89ca:	2000      	moveq	r0, #0
   d89cc:	4770      	bxeq	lr
   d89ce:	f110 0f00 	cmn.w	r0, #0
   d89d2:	ea91 0f03 	teq	r1, r3
   d89d6:	bf58      	it	pl
   d89d8:	4299      	cmppl	r1, r3
   d89da:	bf08      	it	eq
   d89dc:	4290      	cmpeq	r0, r2
   d89de:	bf2c      	ite	cs
   d89e0:	17d8      	asrcs	r0, r3, #31
   d89e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d89e6:	f040 0001 	orr.w	r0, r0, #1
   d89ea:	4770      	bx	lr
   d89ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d89f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d89f4:	d102      	bne.n	d89fc <__cmpdf2+0x64>
   d89f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d89fa:	d107      	bne.n	d8a0c <__cmpdf2+0x74>
   d89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a04:	d1d6      	bne.n	d89b4 <__cmpdf2+0x1c>
   d8a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8a0a:	d0d3      	beq.n	d89b4 <__cmpdf2+0x1c>
   d8a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8a10:	4770      	bx	lr
   d8a12:	bf00      	nop

000d8a14 <__aeabi_cdrcmple>:
   d8a14:	4684      	mov	ip, r0
   d8a16:	4610      	mov	r0, r2
   d8a18:	4662      	mov	r2, ip
   d8a1a:	468c      	mov	ip, r1
   d8a1c:	4619      	mov	r1, r3
   d8a1e:	4663      	mov	r3, ip
   d8a20:	e000      	b.n	d8a24 <__aeabi_cdcmpeq>
   d8a22:	bf00      	nop

000d8a24 <__aeabi_cdcmpeq>:
   d8a24:	b501      	push	{r0, lr}
   d8a26:	f7ff ffb7 	bl	d8998 <__cmpdf2>
   d8a2a:	2800      	cmp	r0, #0
   d8a2c:	bf48      	it	mi
   d8a2e:	f110 0f00 	cmnmi.w	r0, #0
   d8a32:	bd01      	pop	{r0, pc}

000d8a34 <__aeabi_dcmpeq>:
   d8a34:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a38:	f7ff fff4 	bl	d8a24 <__aeabi_cdcmpeq>
   d8a3c:	bf0c      	ite	eq
   d8a3e:	2001      	moveq	r0, #1
   d8a40:	2000      	movne	r0, #0
   d8a42:	f85d fb08 	ldr.w	pc, [sp], #8
   d8a46:	bf00      	nop

000d8a48 <__aeabi_dcmplt>:
   d8a48:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a4c:	f7ff ffea 	bl	d8a24 <__aeabi_cdcmpeq>
   d8a50:	bf34      	ite	cc
   d8a52:	2001      	movcc	r0, #1
   d8a54:	2000      	movcs	r0, #0
   d8a56:	f85d fb08 	ldr.w	pc, [sp], #8
   d8a5a:	bf00      	nop

000d8a5c <__aeabi_dcmple>:
   d8a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a60:	f7ff ffe0 	bl	d8a24 <__aeabi_cdcmpeq>
   d8a64:	bf94      	ite	ls
   d8a66:	2001      	movls	r0, #1
   d8a68:	2000      	movhi	r0, #0
   d8a6a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8a6e:	bf00      	nop

000d8a70 <__aeabi_dcmpge>:
   d8a70:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a74:	f7ff ffce 	bl	d8a14 <__aeabi_cdrcmple>
   d8a78:	bf94      	ite	ls
   d8a7a:	2001      	movls	r0, #1
   d8a7c:	2000      	movhi	r0, #0
   d8a7e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8a82:	bf00      	nop

000d8a84 <__aeabi_dcmpgt>:
   d8a84:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8a88:	f7ff ffc4 	bl	d8a14 <__aeabi_cdrcmple>
   d8a8c:	bf34      	ite	cc
   d8a8e:	2001      	movcc	r0, #1
   d8a90:	2000      	movcs	r0, #0
   d8a92:	f85d fb08 	ldr.w	pc, [sp], #8
   d8a96:	bf00      	nop

000d8a98 <__aeabi_dcmpun>:
   d8a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8aa0:	d102      	bne.n	d8aa8 <__aeabi_dcmpun+0x10>
   d8aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8aa6:	d10a      	bne.n	d8abe <__aeabi_dcmpun+0x26>
   d8aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ab0:	d102      	bne.n	d8ab8 <__aeabi_dcmpun+0x20>
   d8ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8ab6:	d102      	bne.n	d8abe <__aeabi_dcmpun+0x26>
   d8ab8:	f04f 0000 	mov.w	r0, #0
   d8abc:	4770      	bx	lr
   d8abe:	f04f 0001 	mov.w	r0, #1
   d8ac2:	4770      	bx	lr

000d8ac4 <__aeabi_d2iz>:
   d8ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8acc:	d215      	bcs.n	d8afa <__aeabi_d2iz+0x36>
   d8ace:	d511      	bpl.n	d8af4 <__aeabi_d2iz+0x30>
   d8ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8ad8:	d912      	bls.n	d8b00 <__aeabi_d2iz+0x3c>
   d8ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8aea:	fa23 f002 	lsr.w	r0, r3, r2
   d8aee:	bf18      	it	ne
   d8af0:	4240      	negne	r0, r0
   d8af2:	4770      	bx	lr
   d8af4:	f04f 0000 	mov.w	r0, #0
   d8af8:	4770      	bx	lr
   d8afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8afe:	d105      	bne.n	d8b0c <__aeabi_d2iz+0x48>
   d8b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8b04:	bf08      	it	eq
   d8b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8b0a:	4770      	bx	lr
   d8b0c:	f04f 0000 	mov.w	r0, #0
   d8b10:	4770      	bx	lr
   d8b12:	bf00      	nop

000d8b14 <__aeabi_d2uiz>:
   d8b14:	004a      	lsls	r2, r1, #1
   d8b16:	d211      	bcs.n	d8b3c <__aeabi_d2uiz+0x28>
   d8b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8b1c:	d211      	bcs.n	d8b42 <__aeabi_d2uiz+0x2e>
   d8b1e:	d50d      	bpl.n	d8b3c <__aeabi_d2uiz+0x28>
   d8b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8b28:	d40e      	bmi.n	d8b48 <__aeabi_d2uiz+0x34>
   d8b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8b36:	fa23 f002 	lsr.w	r0, r3, r2
   d8b3a:	4770      	bx	lr
   d8b3c:	f04f 0000 	mov.w	r0, #0
   d8b40:	4770      	bx	lr
   d8b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8b46:	d102      	bne.n	d8b4e <__aeabi_d2uiz+0x3a>
   d8b48:	f04f 30ff 	mov.w	r0, #4294967295
   d8b4c:	4770      	bx	lr
   d8b4e:	f04f 0000 	mov.w	r0, #0
   d8b52:	4770      	bx	lr

000d8b54 <atoi>:
   d8b54:	220a      	movs	r2, #10
   d8b56:	2100      	movs	r1, #0
   d8b58:	f000 b8ec 	b.w	d8d34 <strtol>

000d8b5c <atol>:
   d8b5c:	220a      	movs	r2, #10
   d8b5e:	2100      	movs	r1, #0
   d8b60:	f000 b8e8 	b.w	d8d34 <strtol>

000d8b64 <__cxa_atexit>:
   d8b64:	b510      	push	{r4, lr}
   d8b66:	4c05      	ldr	r4, [pc, #20]	; (d8b7c <__cxa_atexit+0x18>)
   d8b68:	4613      	mov	r3, r2
   d8b6a:	b12c      	cbz	r4, d8b78 <__cxa_atexit+0x14>
   d8b6c:	460a      	mov	r2, r1
   d8b6e:	4601      	mov	r1, r0
   d8b70:	2002      	movs	r0, #2
   d8b72:	f3af 8000 	nop.w
   d8b76:	bd10      	pop	{r4, pc}
   d8b78:	4620      	mov	r0, r4
   d8b7a:	e7fc      	b.n	d8b76 <__cxa_atexit+0x12>
   d8b7c:	00000000 	.word	0x00000000

000d8b80 <memcpy>:
   d8b80:	440a      	add	r2, r1
   d8b82:	4291      	cmp	r1, r2
   d8b84:	f100 33ff 	add.w	r3, r0, #4294967295
   d8b88:	d100      	bne.n	d8b8c <memcpy+0xc>
   d8b8a:	4770      	bx	lr
   d8b8c:	b510      	push	{r4, lr}
   d8b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8b92:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8b96:	4291      	cmp	r1, r2
   d8b98:	d1f9      	bne.n	d8b8e <memcpy+0xe>
   d8b9a:	bd10      	pop	{r4, pc}

000d8b9c <memset>:
   d8b9c:	4402      	add	r2, r0
   d8b9e:	4603      	mov	r3, r0
   d8ba0:	4293      	cmp	r3, r2
   d8ba2:	d100      	bne.n	d8ba6 <memset+0xa>
   d8ba4:	4770      	bx	lr
   d8ba6:	f803 1b01 	strb.w	r1, [r3], #1
   d8baa:	e7f9      	b.n	d8ba0 <memset+0x4>

000d8bac <srand>:
   d8bac:	b538      	push	{r3, r4, r5, lr}
   d8bae:	4b0d      	ldr	r3, [pc, #52]	; (d8be4 <srand+0x38>)
   d8bb0:	681d      	ldr	r5, [r3, #0]
   d8bb2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8bb4:	4604      	mov	r4, r0
   d8bb6:	b97b      	cbnz	r3, d8bd8 <srand+0x2c>
   d8bb8:	2018      	movs	r0, #24
   d8bba:	f7fd ff4f 	bl	d6a5c <malloc>
   d8bbe:	4a0a      	ldr	r2, [pc, #40]	; (d8be8 <srand+0x3c>)
   d8bc0:	4b0a      	ldr	r3, [pc, #40]	; (d8bec <srand+0x40>)
   d8bc2:	63a8      	str	r0, [r5, #56]	; 0x38
   d8bc4:	e9c0 2300 	strd	r2, r3, [r0]
   d8bc8:	4b09      	ldr	r3, [pc, #36]	; (d8bf0 <srand+0x44>)
   d8bca:	6083      	str	r3, [r0, #8]
   d8bcc:	230b      	movs	r3, #11
   d8bce:	8183      	strh	r3, [r0, #12]
   d8bd0:	2201      	movs	r2, #1
   d8bd2:	2300      	movs	r3, #0
   d8bd4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8bd8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8bda:	2200      	movs	r2, #0
   d8bdc:	611c      	str	r4, [r3, #16]
   d8bde:	615a      	str	r2, [r3, #20]
   d8be0:	bd38      	pop	{r3, r4, r5, pc}
   d8be2:	bf00      	nop
   d8be4:	2003e500 	.word	0x2003e500
   d8be8:	abcd330e 	.word	0xabcd330e
   d8bec:	e66d1234 	.word	0xe66d1234
   d8bf0:	0005deec 	.word	0x0005deec

000d8bf4 <strcmp>:
   d8bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8bfc:	2a01      	cmp	r2, #1
   d8bfe:	bf28      	it	cs
   d8c00:	429a      	cmpcs	r2, r3
   d8c02:	d0f7      	beq.n	d8bf4 <strcmp>
   d8c04:	1ad0      	subs	r0, r2, r3
   d8c06:	4770      	bx	lr

000d8c08 <strlen>:
   d8c08:	4603      	mov	r3, r0
   d8c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8c0e:	2a00      	cmp	r2, #0
   d8c10:	d1fb      	bne.n	d8c0a <strlen+0x2>
   d8c12:	1a18      	subs	r0, r3, r0
   d8c14:	3801      	subs	r0, #1
   d8c16:	4770      	bx	lr

000d8c18 <strncpy>:
   d8c18:	b510      	push	{r4, lr}
   d8c1a:	3901      	subs	r1, #1
   d8c1c:	4603      	mov	r3, r0
   d8c1e:	b132      	cbz	r2, d8c2e <strncpy+0x16>
   d8c20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8c24:	f803 4b01 	strb.w	r4, [r3], #1
   d8c28:	3a01      	subs	r2, #1
   d8c2a:	2c00      	cmp	r4, #0
   d8c2c:	d1f7      	bne.n	d8c1e <strncpy+0x6>
   d8c2e:	441a      	add	r2, r3
   d8c30:	2100      	movs	r1, #0
   d8c32:	4293      	cmp	r3, r2
   d8c34:	d100      	bne.n	d8c38 <strncpy+0x20>
   d8c36:	bd10      	pop	{r4, pc}
   d8c38:	f803 1b01 	strb.w	r1, [r3], #1
   d8c3c:	e7f9      	b.n	d8c32 <strncpy+0x1a>
	...

000d8c40 <_strtol_l.isra.0>:
   d8c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8c44:	4e3a      	ldr	r6, [pc, #232]	; (d8d30 <_strtol_l.isra.0+0xf0>)
   d8c46:	4686      	mov	lr, r0
   d8c48:	468c      	mov	ip, r1
   d8c4a:	4660      	mov	r0, ip
   d8c4c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8c50:	5da5      	ldrb	r5, [r4, r6]
   d8c52:	f015 0508 	ands.w	r5, r5, #8
   d8c56:	d1f8      	bne.n	d8c4a <_strtol_l.isra.0+0xa>
   d8c58:	2c2d      	cmp	r4, #45	; 0x2d
   d8c5a:	d133      	bne.n	d8cc4 <_strtol_l.isra.0+0x84>
   d8c5c:	f89c 4000 	ldrb.w	r4, [ip]
   d8c60:	f04f 0801 	mov.w	r8, #1
   d8c64:	f100 0c02 	add.w	ip, r0, #2
   d8c68:	2b00      	cmp	r3, #0
   d8c6a:	d05c      	beq.n	d8d26 <_strtol_l.isra.0+0xe6>
   d8c6c:	2b10      	cmp	r3, #16
   d8c6e:	d10c      	bne.n	d8c8a <_strtol_l.isra.0+0x4a>
   d8c70:	2c30      	cmp	r4, #48	; 0x30
   d8c72:	d10a      	bne.n	d8c8a <_strtol_l.isra.0+0x4a>
   d8c74:	f89c 0000 	ldrb.w	r0, [ip]
   d8c78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8c7c:	2858      	cmp	r0, #88	; 0x58
   d8c7e:	d14d      	bne.n	d8d1c <_strtol_l.isra.0+0xdc>
   d8c80:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8c84:	2310      	movs	r3, #16
   d8c86:	f10c 0c02 	add.w	ip, ip, #2
   d8c8a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d8c8e:	3f01      	subs	r7, #1
   d8c90:	2600      	movs	r6, #0
   d8c92:	fbb7 f9f3 	udiv	r9, r7, r3
   d8c96:	4630      	mov	r0, r6
   d8c98:	fb03 7a19 	mls	sl, r3, r9, r7
   d8c9c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d8ca0:	2d09      	cmp	r5, #9
   d8ca2:	d818      	bhi.n	d8cd6 <_strtol_l.isra.0+0x96>
   d8ca4:	462c      	mov	r4, r5
   d8ca6:	42a3      	cmp	r3, r4
   d8ca8:	dd24      	ble.n	d8cf4 <_strtol_l.isra.0+0xb4>
   d8caa:	1c75      	adds	r5, r6, #1
   d8cac:	d007      	beq.n	d8cbe <_strtol_l.isra.0+0x7e>
   d8cae:	4581      	cmp	r9, r0
   d8cb0:	d31d      	bcc.n	d8cee <_strtol_l.isra.0+0xae>
   d8cb2:	d101      	bne.n	d8cb8 <_strtol_l.isra.0+0x78>
   d8cb4:	45a2      	cmp	sl, r4
   d8cb6:	db1a      	blt.n	d8cee <_strtol_l.isra.0+0xae>
   d8cb8:	fb00 4003 	mla	r0, r0, r3, r4
   d8cbc:	2601      	movs	r6, #1
   d8cbe:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8cc2:	e7eb      	b.n	d8c9c <_strtol_l.isra.0+0x5c>
   d8cc4:	2c2b      	cmp	r4, #43	; 0x2b
   d8cc6:	bf08      	it	eq
   d8cc8:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8ccc:	46a8      	mov	r8, r5
   d8cce:	bf08      	it	eq
   d8cd0:	f100 0c02 	addeq.w	ip, r0, #2
   d8cd4:	e7c8      	b.n	d8c68 <_strtol_l.isra.0+0x28>
   d8cd6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8cda:	2d19      	cmp	r5, #25
   d8cdc:	d801      	bhi.n	d8ce2 <_strtol_l.isra.0+0xa2>
   d8cde:	3c37      	subs	r4, #55	; 0x37
   d8ce0:	e7e1      	b.n	d8ca6 <_strtol_l.isra.0+0x66>
   d8ce2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d8ce6:	2d19      	cmp	r5, #25
   d8ce8:	d804      	bhi.n	d8cf4 <_strtol_l.isra.0+0xb4>
   d8cea:	3c57      	subs	r4, #87	; 0x57
   d8cec:	e7db      	b.n	d8ca6 <_strtol_l.isra.0+0x66>
   d8cee:	f04f 36ff 	mov.w	r6, #4294967295
   d8cf2:	e7e4      	b.n	d8cbe <_strtol_l.isra.0+0x7e>
   d8cf4:	1c73      	adds	r3, r6, #1
   d8cf6:	d106      	bne.n	d8d06 <_strtol_l.isra.0+0xc6>
   d8cf8:	2322      	movs	r3, #34	; 0x22
   d8cfa:	f8ce 3000 	str.w	r3, [lr]
   d8cfe:	4638      	mov	r0, r7
   d8d00:	b942      	cbnz	r2, d8d14 <_strtol_l.isra.0+0xd4>
   d8d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8d06:	f1b8 0f00 	cmp.w	r8, #0
   d8d0a:	d000      	beq.n	d8d0e <_strtol_l.isra.0+0xce>
   d8d0c:	4240      	negs	r0, r0
   d8d0e:	2a00      	cmp	r2, #0
   d8d10:	d0f7      	beq.n	d8d02 <_strtol_l.isra.0+0xc2>
   d8d12:	b10e      	cbz	r6, d8d18 <_strtol_l.isra.0+0xd8>
   d8d14:	f10c 31ff 	add.w	r1, ip, #4294967295
   d8d18:	6011      	str	r1, [r2, #0]
   d8d1a:	e7f2      	b.n	d8d02 <_strtol_l.isra.0+0xc2>
   d8d1c:	2430      	movs	r4, #48	; 0x30
   d8d1e:	2b00      	cmp	r3, #0
   d8d20:	d1b3      	bne.n	d8c8a <_strtol_l.isra.0+0x4a>
   d8d22:	2308      	movs	r3, #8
   d8d24:	e7b1      	b.n	d8c8a <_strtol_l.isra.0+0x4a>
   d8d26:	2c30      	cmp	r4, #48	; 0x30
   d8d28:	d0a4      	beq.n	d8c74 <_strtol_l.isra.0+0x34>
   d8d2a:	230a      	movs	r3, #10
   d8d2c:	e7ad      	b.n	d8c8a <_strtol_l.isra.0+0x4a>
   d8d2e:	bf00      	nop
   d8d30:	000da06a 	.word	0x000da06a

000d8d34 <strtol>:
   d8d34:	4613      	mov	r3, r2
   d8d36:	460a      	mov	r2, r1
   d8d38:	4601      	mov	r1, r0
   d8d3a:	4802      	ldr	r0, [pc, #8]	; (d8d44 <strtol+0x10>)
   d8d3c:	6800      	ldr	r0, [r0, #0]
   d8d3e:	f7ff bf7f 	b.w	d8c40 <_strtol_l.isra.0>
   d8d42:	bf00      	nop
   d8d44:	2003e500 	.word	0x2003e500

000d8d48 <dynalib_user>:
   d8d48:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d8d58:	00000000 25006925 6900696c 756f006e     ....%i.%li.in.ou
   d8d68:	77700074 7764006d 00776100 33533549     t.pwm.dw.aw.I5S3
   d8d78:	427a4549 4c725f67 41794453 526b4972     IEzBg_rLSDyArIkR
   d8d88:	57704632 7067682d 366e4e4f 00777600     2FpW-hgpONn6.vw.
   d8d98:	372e3225 43200066 00462000 2c796548     %2.7f. C. F.Hey,
   d8da8:	746f6720 70206120 20687375 69746f6e      got a push noti
   d8db8:	61636966 6e6f6974 69480021 4c206867     fication!.High L
   d8dc8:	6c657665 4c00203a 4c20776f 6c657665     evel: .Low Level
   d8dd8:	                                         : .

000d8ddb <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d8ddb:	6b6e6c62 00666e69 00726576 2e302e31     blnkinf.ver.1.0.
   d8deb:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   d8dfb:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d8e0b:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d8e1b:	32203620 20313230 353a3830 39343a38      6 2021 08:58:49
   d8e2b:	64000000 75616665 0020746c 0042534d     ...default .MSB.
   d8e3b:	0042534c 4950533c 74746553 73676e69     LSB.<SPISettings
   d8e4b:	66656420 746c7561 533c003e 65534950      default>.<SPISe
   d8e5b:	6e697474 25207367 20752573 4d207325     ttings %s%u %s M
   d8e6b:	2545444f                                 ODE%u>.

000d8e72 <_ZL4font>:
   d8e72:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   d8e82:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   d8e92:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   d8ea2:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   d8eb2:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   d8ec2:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   d8ed2:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   d8ee2:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   d8ef2:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   d8f02:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   d8f12:	00000000 5f000000 07000000 14000700     ......._........
   d8f22:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   d8f32:	00502056 00030708 41221c00 22410000     V P......."A..A"
   d8f42:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   d8f52:	08080800 00000808 20006060 02040810     ........``. ....
   d8f62:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   d8f72:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   d8f82:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   d8f92:	00001e29 00000014 00003440 22140800     ).......@4....."
   d8fa2:	14141441 41001414 02081422 06095901     A......A"....Y..
   d8fb2:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   d8fc2:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   d8fd2:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   d8fe2:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   d8ff2:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   d9002:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   d9012:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   d9022:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   d9032:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   d9042:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   d9052:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   d9062:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   d9072:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   d9082:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   d9092:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   d90a2:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   d90b2:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   d90c2:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   d90d2:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   d90e2:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   d90f2:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   d9102:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   d9112:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   d9122:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   d9132:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   d9142:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   d9152:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   d9162:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   d9172:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   d9182:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   d9192:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   d91a2:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   d91b2:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   d91c2:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   d91d2:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   d91e2:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   d91f2:	00ff0000 ff101010 14141400 101000ff     ................
   d9202:	10ff00ff f010f010 fc141414 f7141400     ................
   d9212:	0000ff00 14ff00ff fc04f414 10171414     ................
   d9222:	1f10101f 14141f10 10001f14 00f01010     ................
   d9232:	1f000000 10101010 1010101f 0010f010     ................
   d9242:	10ff0000 10101010 10101010 000010ff     ................
   d9252:	0014ff00 ff00ff00 101f0000 fc000017     ................
   d9262:	1414f404 14171017 f404f414 00ff0000     ................
   d9272:	141414f7 14141414 14f700f7 14171414     ................
   d9282:	101f1010 1414141f 101014f4 00f010f0     ................
   d9292:	1f101f00 1f000000 00000014 000014fc     ................
   d92a2:	10f010f0 ff10ff10 ff141414 10101014     ................
   d92b2:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   d92c2:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   d92d2:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   d92e2:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   d92f2:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   d9302:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   d9312:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   d9322:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   d9332:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   d9342:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   d9352:	00000018 30001010 0101ff40 01011f00     .......0@.......
   d9362:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....
	...

000d9374 <_ZTV12Adafruit_GFX>:
	...
   d9384:	000d564d 000d6d59 000d40a5 000d5055     MV..Ym...@..UP..
   d9394:	000d5057 000d5089 000d5065 000d5077     WP...P..eP..wP..
   d93a4:	000d4f99 000d5055 000d5281 000d51fb     .O..UP...R...Q..
   d93b4:	000d50a1 000d50df 000d5119 000d515f     .P...P...Q.._Q..
   d93c4:	000d51fd 000d517b                       .Q..{Q..

000d93cc <_ZTV16OledWingAdafruit>:
	...
   d93d4:	000d575d 000d577d 000d564d 000d6d59     ]W..}W..MV..Ym..
   d93e4:	000d5c1d 000d5055 000d5057 000d5089     .\..UP..WP...P..
   d93f4:	000d5065 000d5077 000d4f99 000d5055     eP..wP...O..UP..
   d9404:	000d5281 000d5dd7 000d636b 000d631d     .R...]..kc...c..
   d9414:	000d5119 000d515f 000d51fd 000d517b     .Q.._Q...Q..{Q..

000d9424 <_ZTVN8particle11SPISettingsE>:
	...
   d942c:	000d4f45 000d4f19 000d4f1b              EO...O...O..

000d9438 <_ZL12splash1_data>:
   d9438:	00000000 00800100 00000000 00000000     ................
   d9448:	00008003 00000000 07000000 000000c0     ................
   d9458:	00000000 c0070000 00000000 00000000     ................
   d9468:	00c00f00 00000000 00000000 0000e01f     ................
   d9478:	00000000 1f000000 000000e0 00000000     ................
   d9488:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   d94a0:	0000f07f 00000000 7ff81f00 000000f0     ................
   d94b0:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   d94c0:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   d94d0:	00000000 f9ff0f00 0000c0ff 00000000     ................
   d94e0:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   d94f0:	00000000 fc030000 80ffff73 00000000     ........s.......
   d9500:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   d9510:	000000ff 00000000 fc1ffe7f 00000000     ................
   d9520:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   d9530:	0000e0ff 00000000 ff191f00 000000c0     ................
   d9540:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   d9550:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   d9560:	00000000 fcffff00 00000000 00000000     ................
   d9570:	00feffff 00000000 ff000000 0000feff     ................
   d9580:	00000000 efff0100 000000fe 00000000     ................
   d9590:	fecfff01 00000000 03000000 00fe07ff     ................
   d95a0:	00000000 fc030000 0000fe07 00000000     ................
   d95b0:	03f00300 000000fe 00000000 fe008001     ................
	...
   d95c8:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   d95e0:	0000000c 07000000 00fc0080 00c00300     ................
   d95f0:	80070000 0000fc01 0000c003 01800700     ................
   d9600:	030000fc 000000c0 e0018007 1e000000     ................
   d9610:	07000000 00e00180 001e0000 9ff7e37f     ................
   d9620:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   d9630:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   d9640:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   d9650:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   d9660:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   d9670:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   d9680:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   d9690:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   d96a0:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   d96b0:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   d96c0:	ffffff00 ffffffff c0ffffff ffffffff     ................
   d96d0:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   d96e0:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   d96f0:	5b6bfdff c0fd6adb                       ..k[.j..

000d96f8 <_ZL12splash2_data>:
   d96f8:	00600000 00000000 00000000 00000000     ..`.............
   d9708:	0000e000 00000000 00000000 01000000     ................
   d9718:	000000e0 00000000 00000000 f0010000     ................
	...
   d9734:	00f00300 00000000 00000000 00000000     ................
   d9744:	0000f007 00000000 00000000 07000000     ................
   d9754:	000000f8 00000000 00000000 f80f0000     ................
   d9764:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   d9774:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   d9784:	00c00300 010000fe ffff00e0 000000f8     ................
   d9794:	f000c003 0f000000 7ffe7f00 030000c0     ................
   d97a4:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   d97b4:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   d97c4:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   d97d4:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   d97e4:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   d97f4:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   d9804:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   d9814:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   d9824:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   d9834:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   d9844:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   d9854:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   d9864:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   d9874:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   d988c:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   d989c:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   d98ac:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   d98bc:	ff7f000f a5feffff 198d9dad 060000e0     ................
   d98cc:	ffff7f00 adb5feff e07eb5ed              ..........~.

000d98d8 <_ZTV16Adafruit_SSD1306>:
	...
   d98e0:	000d5bf1 000d5c09 000d564d 000d6d59     .[...\..MV..Ym..
   d98f0:	000d5c1d 000d5055 000d5057 000d5089     .\..UP..WP...P..
   d9900:	000d5065 000d5077 000d4f99 000d5055     eP..wP...O..UP..
   d9910:	000d5281 000d5dd7 000d636b 000d631d     .R...]..kc...c..
   d9920:	000d5119 000d515f 000d51fd 000d517b     .Q.._Q...Q..{Q..

000d9930 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d9930:	e0c08000 fefcf8f0                       ........

000d9938 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d9938:	07030100 7f3f1f0f                       ......?.

000d9940 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d9940:	a880d5ae                                ....

000d9944 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d9944:	8d4000d3                                ..@.

000d9948 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d9948:	c8a10020                                 ...

000d994c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d994c:	a6a440db                                 .@....

000d9952 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d9952:	8f8102da                                ....

000d9956 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d9956:	                                         ...

000d9959 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d9959:	                                         ...

000d995c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d995c:	21ff0022 00000000                       "..!....

000d9964 <_ZL22BlynkReadHandlerVector>:
   d9964:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9974:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9984:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9994:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d99a4:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d99b4:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d99c4:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d99d4:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d99e4:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d99f4:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9a04:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9a14:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9a24:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9a34:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9a44:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9a54:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9a64:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9a74:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9a84:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9a94:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9aa4:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9ab4:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9ac4:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9ad4:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9ae4:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9af4:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9b04:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9b14:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9b24:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9b34:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9b44:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..
   d9b54:	000d64f5 000d64f5 000d64f5 000d64f5     .d...d...d...d..

000d9b64 <_ZL23BlynkWriteHandlerVector>:
   d9b64:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9b74:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9b84:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9b94:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9ba4:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9bb4:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9bc4:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9bd4:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9be4:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9bf4:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9c04:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9c14:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9c24:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9c34:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9c44:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9c54:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9c64:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9c74:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9c84:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9c94:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9ca4:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9cb4:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9cc4:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9cd4:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9ce4:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9cf4:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9d04:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9d14:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9d24:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9d34:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9d44:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..
   d9d54:	000d64f7 000d64f7 000d64f7 000d64f7     .d...d...d...d..

000d9d64 <_ZTVN5spark13EthernetClassE>:
	...
   d9d6c:	000d6b1b 000d6b11 000d6b07 000d6afd     .k...k...k...j..
   d9d7c:	000d6af1 000d6ae5 000d7c99 000d7ca1     .j...j...|...|..
   d9d8c:	000d6ad9 000d6ad1 000d6ac7 000d6abd     .j...j...j...j..
   d9d9c:	000d7cd1                                .|..

000d9da0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9da0:	18100800 38302820                       .... (08

000d9da8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d9db0:	006e616e 00666e69 0066766f 7061002e     nan.inf.ovf...ap
   d9dc0:	59250070 2d6d252d 25546425 4d253a48     p.%Y-%m-%dT%H:%M
   d9dd0:	2553253a 7361007a 6d697463 00000065     :%S%z.asctime...

000d9de0 <_ZTV9IPAddress>:
	...
   d9de8:	000d71f9 000d71e9 000d71eb              .q...q...q..

000d9df4 <_ZTV9USBSerial>:
	...
   d9dfc:	000d731d 000d7385 000d735b 000d6d59     .s...s..[s..Ym..
   d9e0c:	000d734d 000d731f 000d732f 000d737f     Ms...s../s...s..
   d9e1c:	000d733f 000d7319                       ?s...s..

000d9e24 <_ZTV11USARTSerial>:
	...
   d9e2c:	000d7429 000d7495 000d746d 000d6d59     )t...t..mt..Ym..
   d9e3c:	000d743d 000d7459 000d744b 000d7467     =t..Yt..Kt..gt..
   d9e4c:	000d742b 000d742f                       +t../t..

000d9e54 <_ZTV7TwoWire>:
	...
   d9e5c:	000d7525 000d756f 000d7547 000d7527     %u..ou..Gu..'u..
   d9e6c:	000d754f 000d7557 000d755f 000d7567     Ou..Wu.._u..gu..
   d9e7c:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d9e8c:	203d2072 00006425                       r = %d..

000d9e94 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9e9c:	000d76ab 000d76cd 000d7ae7 000d76db     .v...v...z...v..
   d9eac:	000d76ad                                .v..

000d9eb0 <_ZTV9TCPClient>:
	...
   d9eb8:	000d7759 000d778d 000d7629 000d7643     Yw...w..)v..Cv..
   d9ec8:	000d797d 000d77ef 000d77c1 000d766d     }y...w...w..mv..
   d9ed8:	000d7887 000d7aed 000d7823 000d7a31     .x...z..#x..1z..
   d9ee8:	000d766f 000d76a1 000d7655 000d76df     ov...v..Uv...v..
   d9ef8:	000d77a1                                .w..

000d9efc <_ZTVN5spark9WiFiClassE>:
	...
   d9f04:	000d7c3b 000d7c31 000d7c27 000d7be9     ;|..1|..'|...{..
   d9f14:	000d7065 000d7c1b 000d7c99 000d7ca1     ep...|...|...|..
   d9f24:	000d7c0f 000d7c07 000d7bfd 000d7bf3     .|...|...{...{..
   d9f34:	000d7cd1                                .|..

000d9f38 <_ZTVN5spark12NetworkClassE>:
	...
   d9f40:	000d7c59 000d7c63 000d7c6d 000d7c77     Y|..c|..m|..w|..
   d9f50:	000d7c81 000d7c8d 000d7c99 000d7ca1     .|...|...|...|..
   d9f60:	000d7ca9 000d7cb5 000d7cbd 000d7cc7     .|...|...|...|..
   d9f70:	000d7cd1                                .|..

000d9f74 <_ZSt7nothrow>:
	...

000d9f75 <_ZTSSt19_Sp_make_shared_tag>:
   d9f75:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d9f85:	5f646572 00676174                        red_tag....

000d9f90 <_ZTISt19_Sp_make_shared_tag>:
   d9f90:	000d9fd0 000d9f75                       ....u...

000d9f98 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d9f98:	000da030 000d9fa4 000da054              0.......T...

000d9fa4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d9fa4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d9fb4:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d9fc4:	00000045                                E...

000d9fc8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d9fc8:	00000000 000d9f98 000d8015 000d8029     ............)...
   d9fd8:	000d81bd 000d81bd 000d8093 000d7fd5     ................
   d9fe8:	000d807b 000d803d 000d8009              {...=.......

000d9ff4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d9ff4:	000da030 000da000 000d9f98              0...........

000da000 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   da000:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   da010:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   da020:	456f666e 00000000                       nfoE....

000da028 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   da028:	00000000 000d9ff4 000d80bd 000d80d1     ................
   da038:	000d81bd 000d81bd 000d8093 000d7fd5     ................
   da048:	000d8191 000d811d 000d80e5              ............

000da054 <_ZTISt9type_info>:
   da054:	000d9fd0 000da05c                       ....\...

000da05c <_ZTSSt9type_info>:
   da05c:	74397453 5f657079 6f666e69               St9type_info.

000da069 <_ctype_>:
   da069:	20202000 20202020 28282020 20282828     .         ((((( 
   da079:	20202020 20202020 20202020 20202020                     
   da089:	10108820 10101010 10101010 10101010      ...............
   da099:	04040410 04040404 10040404 10101010     ................
   da0a9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   da0b9:	01010101 01010101 01010101 10101010     ................
   da0c9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   da0d9:	02020202 02020202 02020202 10101010     ................
   da0e9:	00000020 00000000 00000000 00000000      ...............
	...

000da16a <link_const_variable_data_end>:
	...

000da16c <link_constructors_location>:
   da16c:	000d4ea1 	.word	0x000d4ea1
   da170:	000d6b25 	.word	0x000d6b25
   da174:	000d6cb5 	.word	0x000d6cb5
   da178:	000d6d31 	.word	0x000d6d31
   da17c:	000d7071 	.word	0x000d7071
   da180:	000d7081 	.word	0x000d7081
   da184:	000d70a9 	.word	0x000d70a9
   da188:	000d7c45 	.word	0x000d7c45
   da18c:	000d7db1 	.word	0x000d7db1
